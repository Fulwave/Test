---- P Æ¥Åä (8815 in 24 ÎÄ¼þ) ----
1761.c (src):#include "DrvGPIO.h"
1761.c (src):#include "DataType.h"
1761.c (src):#define ADAU1761SDA_DIR_OUT  	DrvGPIO_Open(E_GPA, 10, E_IO_OPENDRAIN)
1761.c (src):#define ADAU1761SDA_DIR_IN   	DrvGPIO_Open(E_GPA, 10, E_IO_INPUT)
1761.c (src):static uint8_t OperationWriteADI1761(uint8_t devAddress, uint16_t address, uint16_t numBytes, const uint8_t *data)
1761.c (src):	PO_1761_SCL(1);
1761.c (src):	PO_1761_SDA(1);
1761.c (src):	PO_1761_SDA(0);
1761.c (src):	PO_1761_SCL(0);
1761.c (src):				PO_1761_SDA(1);
1761.c (src):				PO_1761_SDA(0);
1761.c (src):			PO_1761_SCL(1);
1761.c (src):			PO_1761_SCL(0);
1761.c (src):	PO_1761_SCL(1);
1761.c (src):	if(PI_1761_SDA() != 0)
1761.c (src):			goto STOP;
1761.c (src):	PO_1761_SCL(0);
1761.c (src):				PO_1761_SDA(1);
1761.c (src):				PO_1761_SDA(0);
1761.c (src):			PO_1761_SCL(1);
1761.c (src):			PO_1761_SCL(0);
1761.c (src):	PO_1761_SCL(1);
1761.c (src):	if(PI_1761_SDA() != 0)
1761.c (src):			goto STOP;
1761.c (src):	PO_1761_SCL(0);
1761.c (src):				PO_1761_SDA(1);
1761.c (src):				PO_1761_SDA(0);
1761.c (src):			PO_1761_SCL(1);
1761.c (src):			PO_1761_SCL(0);
1761.c (src):	PO_1761_SCL(1);
1761.c (src):	if(PI_1761_SDA() != 0)
1761.c (src):			goto STOP;
1761.c (src):	PO_1761_SCL(0);
1761.c (src):						PO_1761_SDA(1);
1761.c (src):						PO_1761_SDA(0);
1761.c (src):				PO_1761_SCL(1);
1761.c (src):				PO_1761_SCL(0);
1761.c (src):			PO_1761_SCL(1);
1761.c (src):			if(PI_1761_SDA() != 0)
1761.c (src):					goto STOP;
1761.c (src):			PO_1761_SCL(0);
1761.c (src):	STOP:
1761.c (src):		PO_1761_SDA(0);
1761.c (src):		PO_1761_SCL(1);
1761.c (src):		PO_1761_SDA(1);
1761.c (src):static uint8_t OperationReadADI1761( uint8_t devAddress, uint16_t address, uint16_t numBytes,  uint8_t *data)
1761.c (src):	PO_1761_SCL(1);
1761.c (src):	PO_1761_SDA(1);
1761.c (src):	PO_1761_SDA(0);
1761.c (src):	PO_1761_SCL(0);
1761.c (src):				PO_1761_SDA(1);
1761.c (src):				PO_1761_SDA(0);
1761.c (src):			PO_1761_SCL(1);
1761.c (src):			PO_1761_SCL(0);
1761.c (src):	PO_1761_SCL(1);
1761.c (src):	if(PI_1761_SDA() != 0)
1761.c (src):			goto STOP;
1761.c (src):	PO_1761_SCL(0);
1761.c (src):				PO_1761_SDA(1);
1761.c (src):				PO_1761_SDA(0);
1761.c (src):			PO_1761_SCL(1);
1761.c (src):			PO_1761_SCL(0);
1761.c (src):	PO_1761_SCL(1);
1761.c (src):	if(PI_1761_SDA() != 0)
1761.c (src):			goto STOP;
1761.c (src):	PO_1761_SCL(0);
1761.c (src):				PO_1761_SDA(1);
1761.c (src):				PO_1761_SDA(0);
1761.c (src):			PO_1761_SCL(1);
1761.c (src):			PO_1761_SCL(0);
1761.c (src):	PO_1761_SCL(1);
1761.c (src):	if(PI_1761_SDA() != 0)
1761.c (src):			goto STOP;
1761.c (src):	PO_1761_SCL(0);
1761.c (src):				PO_1761_SCL(1);
1761.c (src):				if(PI_1761_SDA())
1761.c (src):				PO_1761_SCL(0);
1761.c (src):			PO_1761_SDA(0);
1761.c (src):			PO_1761_SCL(1);
1761.c (src):			PO_1761_SCL(0);
1761.c (src):	STOP:
1761.c (src):		PO_1761_SDA(0);
1761.c (src):		PO_1761_SCL(1);
1761.c (src):		PO_1761_SDA(1);
1761.c (src):T_ERROR_OP OperationADAU1761(void)
1761.c (src):	error_id=OperationWriteADI1761( DEVICE_ADDR_IC_1, REG_SAMPLE_RATE_SETTING_IC_1_ADDR, REG_SAMPLE_RATE_SETTING_IC_1_BYTE, R0_SAMPLE_RATE_SETTING_IC_1_Default );
1761.c (src):	error_id=OperationWriteADI1761( DEVICE_ADDR_IC_1, REG_DSP_RUN_REGISTER_IC_1_ADDR, REG_DSP_RUN_REGISTER_IC_1_BYTE, R1_DSP_RUN_REGISTER_IC_1_Default );
1761.c (src):	error_id=OperationWriteADI1761( DEVICE_ADDR_IC_1, REG_CLKCTRLREGISTER_IC_1_ADDR, REG_CLKCTRLREGISTER_IC_1_BYTE, R2_CLKCTRLREGISTER_IC_1_Default );
1761.c (src):	error_id=OperationWriteADI1761( DEVICE_ADDR_IC_1, REG_PLLCRLREGISTER_IC_1_ADDR, REG_PLLCRLREGISTER_IC_1_BYTE, R3_PLLCRLREGISTER_IC_1_Default );
1761.c (src):	error_id=OperationWriteADI1761( DEVICE_ADDR_IC_1, REG_SERIAL_PORT_CONTROL_0_IC_1_ADDR , R5_SERIAL_PORT_CONTROL_REGISTERS_IC_1_SIZE, R5_SERIAL_PORT_CONTROL_REGISTERS_IC_1_Default );
1761.c (src):	error_id=OperationWriteADI1761( DEVICE_ADDR_IC_1, REG_ALC_CONTROL_0_IC_1_ADDR , R6_ALC_CONTROL_REGISTERS_IC_1_SIZE, R6_ALC_CONTROL_REGISTERS_IC_1_Default );
1761.c (src):	error_id=OperationWriteADI1761( DEVICE_ADDR_IC_1, REG_MICCTRLREGISTER_IC_1_ADDR, REG_MICCTRLREGISTER_IC_1_BYTE, R7_MICCTRLREGISTER_IC_1_Default );
1761.c (src):	error_id=OperationWriteADI1761( DEVICE_ADDR_IC_1, REG_RECORD_PWR_MANAGEMENT_IC_1_ADDR , R8_RECORD_INPUT_SIGNAL_PATH_REGISTERS_IC_1_SIZE, R8_RECORD_INPUT_SIGNAL_PATH_REGISTERS_IC_1_Default );
1761.c (src):	error_id=OperationWriteADI1761( DEVICE_ADDR_IC_1, REG_ADC_CONTROL_0_IC_1_ADDR , R9_ADC_CONTROL_REGISTERS_IC_1_SIZE, R9_ADC_CONTROL_REGISTERS_IC_1_Default );
1761.c (src):	error_id=OperationWriteADI1761( DEVICE_ADDR_IC_1, REG_PLAYBACK_MIXER_LEFT_CONTROL_0_IC_1_ADDR , R10_PLAYBACK_OUTPUT_SIGNAL_PATH_REGISTERS_IC_1_SIZE, R10_PLAYBACK_OUTPUT_SIGNAL_PATH_REGISTERS_IC_1_Default );
1761.c (src):	error_id=OperationWriteADI1761( DEVICE_ADDR_IC_1, REG_CONVERTER_CTRL_0_IC_1_ADDR , R11_CONVERTER_CONTROL_REGISTERS_IC_1_SIZE, R11_CONVERTER_CONTROL_REGISTERS_IC_1_Default );
1761.c (src):	error_id=OperationWriteADI1761( DEVICE_ADDR_IC_1, REG_DAC_CONTROL_0_IC_1_ADDR , R12_DAC_CONTROL_REGISTERS_IC_1_SIZE, R12_DAC_CONTROL_REGISTERS_IC_1_Default );
1761.c (src):	error_id=OperationWriteADI1761( DEVICE_ADDR_IC_1, REG_SERIAL_PORT_PAD_CONTROL_0_IC_1_ADDR , R13_SERIAL_PORT_PAD_CONTROL_REGISTERS_IC_1_SIZE, R13_SERIAL_PORT_PAD_CONTROL_REGISTERS_IC_1_Default );
1761.c (src):	error_id=OperationWriteADI1761( DEVICE_ADDR_IC_1, REG_COMM_PORT_PAD_CTRL_0_IC_1_ADDR , R14_COMMUNICATION_PORT_PAD_CONTROL_REGISTERS_IC_1_SIZE, R14_COMMUNICATION_PORT_PAD_CONTROL_REGISTERS_IC_1_Default );
1761.c (src):	error_id=OperationWriteADI1761( DEVICE_ADDR_IC_1, REG_JACKREGISTER_IC_1_ADDR, REG_JACKREGISTER_IC_1_BYTE, R15_JACKREGISTER_IC_1_Default );
1761.c (src):	error_id=OperationWriteADI1761( DEVICE_ADDR_IC_1, REG_DSP_ENABLE_REGISTER_IC_1_ADDR, REG_DSP_ENABLE_REGISTER_IC_1_BYTE, R16_DSP_ENABLE_REGISTER_IC_1_Default );
1761.c (src):	error_id=OperationWriteADI1761( DEVICE_ADDR_IC_1, REG_CRC_IDEAL_1_IC_1_ADDR , R17_CRC_REGISTERS_IC_1_SIZE, R17_CRC_REGISTERS_IC_1_Default );
1761.c (src):	error_id=OperationWriteADI1761( DEVICE_ADDR_IC_1, REG_GPIO_0_CONTROL_IC_1_ADDR , R18_GPIO_REGISTERS_IC_1_SIZE, R18_GPIO_REGISTERS_IC_1_Default );
1761.c (src):	error_id=OperationWriteADI1761( DEVICE_ADDR_IC_1, REG_NON_MODULO_RAM_1_IC_1_ADDR , R19_NON_MODULO_REGISTERS_IC_1_SIZE, R19_NON_MODULO_REGISTERS_IC_1_Default );
1761.c (src):	error_id=OperationWriteADI1761( DEVICE_ADDR_IC_1, REG_WATCHDOG_ENABLE_IC_1_ADDR , R20_WATCHDOG_REGISTERS_IC_1_SIZE, R20_WATCHDOG_REGISTERS_IC_1_Default );
1761.c (src):	error_id=OperationWriteADI1761( DEVICE_ADDR_IC_1, REG_SAMPLE_RATE_SETTING_IC_1_ADDR, REG_SAMPLE_RATE_SETTING_IC_1_BYTE, R21_SAMPLE_RATE_SETTING_IC_1_Default );
1761.c (src):	error_id=OperationWriteADI1761( DEVICE_ADDR_IC_1, REG_ROUTING_MATRIX_INPUTS_IC_1_ADDR, REG_ROUTING_MATRIX_INPUTS_IC_1_BYTE, R22_ROUTING_MATRIX_INPUTS_IC_1_Default );
1761.c (src):	error_id=OperationWriteADI1761( DEVICE_ADDR_IC_1, REG_ROUTING_MATRIX_OUTPUTS_IC_1_ADDR, REG_ROUTING_MATRIX_OUTPUTS_IC_1_BYTE, R23_ROUTING_MATRIX_OUTPUTS_IC_1_Default );
1761.c (src):	error_id=OperationWriteADI1761( DEVICE_ADDR_IC_1, REG_SERIAL_DATAGPIO_PIN_CONFIG_IC_1_ADDR, REG_SERIAL_DATAGPIO_PIN_CONFIG_IC_1_BYTE, R24_SERIAL_DATAGPIO_PIN_CONFIG_IC_1_Default );
1761.c (src):	error_id=OperationWriteADI1761( DEVICE_ADDR_IC_1, REG_DSP_SLEW_MODES_IC_1_ADDR, REG_DSP_SLEW_MODES_IC_1_BYTE, R25_DSP_SLEW_MODES_IC_1_Default );
1761.c (src):	error_id=OperationWriteADI1761( DEVICE_ADDR_IC_1, REG_SERIAL_PORT_SAMPLE_RATE_SETTING_IC_1_ADDR, REG_SERIAL_PORT_SAMPLE_RATE_SETTING_IC_1_BYTE, R26_SERIAL_PORT_SAMPLE_RATE_SETTING_IC_1_Default );
1761.c (src):	error_id=OperationWriteADI1761( DEVICE_ADDR_IC_1, REG_CLOCK_ENABLE_REG_0_IC_1_ADDR , R27_CLOCK_ENABLE_REGISTERS_IC_1_SIZE, R27_CLOCK_ENABLE_REGISTERS_IC_1_Default );
1761.c (src):	error_id=OperationWriteADI1761( DEVICE_ADDR_IC_1, PROGRAM_ADDR_IC_1, PROGRAM_SIZE_IC_1, Program_Data_IC_1 );
1761.c (src):	//error_id=OperationWriteADI1761( DEVICE_ADDR_IC_1, PARAM_ADDR_IC_1, PARAM_SIZE_IC_1, Param_Data_IC_1 );
1761.c (src):				error_id=OperationWriteADI1761( DEVICE_ADDR_IC_1, PARAM_ADDR_IC_BigMovies_1, PARAM_SIZE_IC_BigMovies_1, Param_Data_IC_BigMovies_1 );
1761.c (src):				error_id=OperationWriteADI1761( DEVICE_ADDR_IC_1, PARAM_ADDR_IC_Clean1_1, PARAM_SIZE_IC_Clean1_1, Param_Data_IC_Clean1_1);
1761.c (src):				error_id=OperationWriteADI1761( DEVICE_ADDR_IC_1, PARAM_ADDR_IC_Music1_1, PARAM_SIZE_IC_Music1_1, Param_Data_IC_Music1_1);
1761.c (src):				error_id=OperationWriteADI1761( DEVICE_ADDR_IC_1, PARAM_ADDR_IC_SuperBass1_1, PARAM_SIZE_IC_SuperBass1_1, Param_Data_IC_SuperBass1_1);
1761.c (src):				error_id=OperationWriteADI1761( DEVICE_ADDR_IC_1, PARAM_ADDR_IC_SuperClear1_1, PARAM_SIZE_IC_SuperClear1_1, Param_Data_IC_SuperClear1_1);
1761.c (src):				error_id=OperationWriteADI1761( DEVICE_ADDR_IC_1, PARAM_ADDR_IC_Talks1_1, PARAM_SIZE_IC_Talks1_1, Param_Data_IC_Talks1_1);
1761.c (src):				error_id=OperationWriteADI1761( DEVICE_ADDR_IC_1, PARAM_ADDR_IC_Bypass_1, PARAM_SIZE_IC_Bypass_1, Param_Data_IC_Bypass_1);
1761.c (src):	error_id=OperationWriteADI1761( DEVICE_ADDR_IC_1, REG_SAMPLE_RATE_SETTING_IC_1_ADDR, REG_SAMPLE_RATE_SETTING_IC_1_BYTE, R30_SAMPLE_RATE_SETTING_IC_1_Default );
1761.c (src):	error_id=OperationWriteADI1761( DEVICE_ADDR_IC_1, REG_DSP_RUN_REGISTER_IC_1_ADDR, REG_DSP_RUN_REGISTER_IC_1_BYTE, R31_DSP_RUN_REGISTER_IC_1_Default );
1761.c (src):	error_id=OperationWriteADI1761( DEVICE_ADDR_IC_1, REG_DEJITTER_REGISTER_CONTROL_IC_1_ADDR, REG_DEJITTER_REGISTER_CONTROL_IC_1_BYTE, R32_DEJITTER_REGISTER_CONTROL_IC_1_Default );
1761.c (src):	error_id=OperationWriteADI1761( DEVICE_ADDR_IC_1, REG_DEJITTER_REGISTER_CONTROL_IC_1_ADDR, REG_DEJITTER_REGISTER_CONTROL_IC_1_BYTE, R33_DEJITTER_REGISTER_CONTROL_IC_1_Default );
1761_IC_1.h (inc): * File:           C:\Users\Administrator\Desktop\6 modes\BigMovies\BigMovies_IC_1.h
1761_IC_1.h (inc): * Created:        Thursday, November 07, 2013 4:11:11 PM
1761_IC_1.h (inc): * Description:    SuperWire Scheme1:IC 1 program data.
1761_IC_1.h (inc): * This software is distributed in the hope that it will be useful,
1761_IC_1.h (inc): * CONDITIONS OF ANY KIND, without even the implied warranty of
1761_IC_1.h (inc): * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
1761_IC_1.h (inc): * This software may only be used to program products purchased from
1761_IC_1.h (inc): * Analog Devices for incorporation by you into audio products that
1761_IC_1.h (inc): * are intended for resale to audio product end users. This software
1761_IC_1.h (inc): * may not be distributed whole or in any part to third parties.
1761_IC_1.h (inc): * Copyright ?2013 Analog Devices, Inc. All rights reserved.
1761_IC_1.h (inc):typedef const unsigned char ADI_REG_TYPE;
1761_IC_1.h (inc):/* DSP Program Data */
1761_IC_1.h (inc):#define PROGRAM_SIZE_IC_1 4280
1761_IC_1.h (inc):#define PROGRAM_ADDR_IC_1 2048
1761_IC_1.h (inc):ADI_REG_TYPE Program_Data_IC_1[PROGRAM_SIZE_IC_1] = {
1761_IC_1.h (inc)://profile 1 BigMovies
1761_IC_1.h (inc):/* DSP Parameter (Coefficient) Data */
1761_IC_1.h (inc):#define PARAM_SIZE_IC_BigMovies_1 1648
1761_IC_1.h (inc):#define PARAM_ADDR_IC_BigMovies_1 0
1761_IC_1.h (inc):ADI_REG_TYPE Param_Data_IC_BigMovies_1[PARAM_SIZE_IC_BigMovies_1] = {
1761_IC_1.h (inc)://profile 2  Clean1
1761_IC_1.h (inc):/* DSP Parameter (Coefficient) Data */
1761_IC_1.h (inc):#define PARAM_SIZE_IC_Clean1_1 1648
1761_IC_1.h (inc):#define PARAM_ADDR_IC_Clean1_1 0
1761_IC_1.h (inc):ADI_REG_TYPE Param_Data_IC_Clean1_1[PARAM_SIZE_IC_Clean1_1] = {
1761_IC_1.h (inc)://profile 3 Music1
1761_IC_1.h (inc):/* DSP Parameter (Coefficient) Data */
1761_IC_1.h (inc):#define PARAM_SIZE_IC_Music1_1 1648
1761_IC_1.h (inc):#define PARAM_ADDR_IC_Music1_1 0
1761_IC_1.h (inc):ADI_REG_TYPE Param_Data_IC_Music1_1[PARAM_SIZE_IC_Music1_1] = {
1761_IC_1.h (inc)://profile 4 SuperBass1
1761_IC_1.h (inc):/* DSP Parameter (Coefficient) Data */
1761_IC_1.h (inc):#define PARAM_SIZE_IC_SuperBass1_1 1648
1761_IC_1.h (inc):#define PARAM_ADDR_IC_SuperBass1_1 0
1761_IC_1.h (inc):ADI_REG_TYPE Param_Data_IC_SuperBass1_1[PARAM_SIZE_IC_SuperBass1_1] = {
1761_IC_1.h (inc)://profile 5 SuperClear1
1761_IC_1.h (inc):/* DSP Parameter (Coefficient) Data */
1761_IC_1.h (inc):#define PARAM_SIZE_IC_SuperClear1_1 1648
1761_IC_1.h (inc):#define PARAM_ADDR_IC_SuperClear1_1 0
1761_IC_1.h (inc):ADI_REG_TYPE Param_Data_IC_SuperClear1_1[PARAM_SIZE_IC_SuperClear1_1] = {
1761_IC_1.h (inc)://profile 6 Talks1
1761_IC_1.h (inc):/* DSP Parameter (Coefficient) Data */
1761_IC_1.h (inc):#define PARAM_SIZE_IC_Talks1_1 1648
1761_IC_1.h (inc):#define PARAM_ADDR_IC_Talks1_1 0
1761_IC_1.h (inc):ADI_REG_TYPE Param_Data_IC_Talks1_1[PARAM_SIZE_IC_Talks1_1] = {
1761_IC_1.h (inc)://profile 7 Bypass
1761_IC_1.h (inc):/* DSP Parameter (Coefficient) Data */
1761_IC_1.h (inc):#define PARAM_SIZE_IC_Bypass_1 1648
1761_IC_1.h (inc):#define PARAM_ADDR_IC_Bypass_1 0
1761_IC_1.h (inc):ADI_REG_TYPE Param_Data_IC_Bypass_1[PARAM_SIZE_IC_Bypass_1] = {
1761_IC_1.h (inc):/* Register Default - IC 1.Sample Rate Setting */
1761_IC_1.h (inc):ADI_REG_TYPE R0_SAMPLE_RATE_SETTING_IC_1_Default[REG_SAMPLE_RATE_SETTING_IC_1_BYTE] = {
1761_IC_1.h (inc):/* Register Default - IC 1.DSP Run Register */
1761_IC_1.h (inc):ADI_REG_TYPE R1_DSP_RUN_REGISTER_IC_1_Default[REG_DSP_RUN_REGISTER_IC_1_BYTE] = {
1761_IC_1.h (inc):ADI_REG_TYPE R2_CLKCTRLREGISTER_IC_1_Default[REG_CLKCTRLREGISTER_IC_1_BYTE] = {
1761_IC_1.h (inc):/* Register Default - IC 1.PLL Control Register */
1761_IC_1.h (inc):ADI_REG_TYPE R3_PLLCRLREGISTER_IC_1_Default[REG_PLLCRLREGISTER_IC_1_BYTE] = {
1761_IC_1.h (inc):ADI_REG_TYPE R4_DELAY_IC_1_Default[R4_DELAY_IC_1_SIZE] = {
1761_IC_1.h (inc):/* Register Default - IC 1.Serial Port Control Registers */
1761_IC_1.h (inc):#define R5_SERIAL_PORT_CONTROL_REGISTERS_IC_1_SIZE 2
1761_IC_1.h (inc):ADI_REG_TYPE R5_SERIAL_PORT_CONTROL_REGISTERS_IC_1_Default[R5_SERIAL_PORT_CONTROL_REGISTERS_IC_1_SIZE] = {
1761_IC_1.h (inc):ADI_REG_TYPE R6_ALC_CONTROL_REGISTERS_IC_1_Default[R6_ALC_CONTROL_REGISTERS_IC_1_SIZE] = {
1761_IC_1.h (inc):/* Register Default - IC 1.Microphone Control Register */
1761_IC_1.h (inc):ADI_REG_TYPE R7_MICCTRLREGISTER_IC_1_Default[REG_MICCTRLREGISTER_IC_1_BYTE] = {
1761_IC_1.h (inc):/* Register Default - IC 1.Record Input Signal Path Registers */
1761_IC_1.h (inc):#define R8_RECORD_INPUT_SIGNAL_PATH_REGISTERS_IC_1_SIZE 8
1761_IC_1.h (inc):ADI_REG_TYPE R8_RECORD_INPUT_SIGNAL_PATH_REGISTERS_IC_1_Default[R8_RECORD_INPUT_SIGNAL_PATH_REGISTERS_IC_1_SIZE] = {
1761_IC_1.h (inc):ADI_REG_TYPE R9_ADC_CONTROL_REGISTERS_IC_1_Default[R9_ADC_CONTROL_REGISTERS_IC_1_SIZE] = {
1761_IC_1.h (inc):/* Register Default - IC 1.Playback Output Signal Path Registers */
1761_IC_1.h (inc):#define R10_PLAYBACK_OUTPUT_SIGNAL_PATH_REGISTERS_IC_1_SIZE 14
1761_IC_1.h (inc):ADI_REG_TYPE R10_PLAYBACK_OUTPUT_SIGNAL_PATH_REGISTERS_IC_1_Default[R10_PLAYBACK_OUTPUT_SIGNAL_PATH_REGISTERS_IC_1_SIZE] = {
1761_IC_1.h (inc):ADI_REG_TYPE R11_CONVERTER_CONTROL_REGISTERS_IC_1_Default[R11_CONVERTER_CONTROL_REGISTERS_IC_1_SIZE] = {
1761_IC_1.h (inc):ADI_REG_TYPE R12_DAC_CONTROL_REGISTERS_IC_1_Default[R12_DAC_CONTROL_REGISTERS_IC_1_SIZE] = {
1761_IC_1.h (inc):/* Register Default - IC 1.Serial Port Pad Control Registers */
1761_IC_1.h (inc):#define R13_SERIAL_PORT_PAD_CONTROL_REGISTERS_IC_1_SIZE 1
1761_IC_1.h (inc):ADI_REG_TYPE R13_SERIAL_PORT_PAD_CONTROL_REGISTERS_IC_1_Default[R13_SERIAL_PORT_PAD_CONTROL_REGISTERS_IC_1_SIZE] = {
1761_IC_1.h (inc):/* Register Default - IC 1.Communication Port Pad Control Registers */
1761_IC_1.h (inc):#define R14_COMMUNICATION_PORT_PAD_CONTROL_REGISTERS_IC_1_SIZE 2
1761_IC_1.h (inc):ADI_REG_TYPE R14_COMMUNICATION_PORT_PAD_CONTROL_REGISTERS_IC_1_Default[R14_COMMUNICATION_PORT_PAD_CONTROL_REGISTERS_IC_1_SIZE] = {
1761_IC_1.h (inc):/* Register Default - IC 1.Jack Detect Pad Control Register */
1761_IC_1.h (inc):ADI_REG_TYPE R15_JACKREGISTER_IC_1_Default[REG_JACKREGISTER_IC_1_BYTE] = {
1761_IC_1.h (inc):/* Register Default - IC 1.DSP ON Register */
1761_IC_1.h (inc):ADI_REG_TYPE R16_DSP_ENABLE_REGISTER_IC_1_Default[REG_DSP_ENABLE_REGISTER_IC_1_BYTE] = {
1761_IC_1.h (inc):ADI_REG_TYPE R17_CRC_REGISTERS_IC_1_Default[R17_CRC_REGISTERS_IC_1_SIZE] = {
1761_IC_1.h (inc):/* Register Default - IC 1.GPIO Registers */
1761_IC_1.h (inc):#define R18_GPIO_REGISTERS_IC_1_SIZE 4
1761_IC_1.h (inc):ADI_REG_TYPE R18_GPIO_REGISTERS_IC_1_Default[R18_GPIO_REGISTERS_IC_1_SIZE] = {
1761_IC_1.h (inc):ADI_REG_TYPE R19_NON_MODULO_REGISTERS_IC_1_Default[R19_NON_MODULO_REGISTERS_IC_1_SIZE] = {
1761_IC_1.h (inc):ADI_REG_TYPE R20_WATCHDOG_REGISTERS_IC_1_Default[R20_WATCHDOG_REGISTERS_IC_1_SIZE] = {
1761_IC_1.h (inc):/* Register Default - IC 1.Sampling Rate Setting Register */
1761_IC_1.h (inc):ADI_REG_TYPE R21_SAMPLE_RATE_SETTING_IC_1_Default[REG_SAMPLE_RATE_SETTING_IC_1_BYTE] = {
1761_IC_1.h (inc):/* Register Default - IC 1.Routing Matrix Inputs Register */
1761_IC_1.h (inc):ADI_REG_TYPE R22_ROUTING_MATRIX_INPUTS_IC_1_Default[REG_ROUTING_MATRIX_INPUTS_IC_1_BYTE] = {
1761_IC_1.h (inc):/* Register Default - IC 1.Routing Matrix Outputs Register */
1761_IC_1.h (inc):ADI_REG_TYPE R23_ROUTING_MATRIX_OUTPUTS_IC_1_Default[REG_ROUTING_MATRIX_OUTPUTS_IC_1_BYTE] = {
1761_IC_1.h (inc):ADI_REG_TYPE R24_SERIAL_DATAGPIO_PIN_CONFIG_IC_1_Default[REG_SERIAL_DATAGPIO_PIN_CONFIG_IC_1_BYTE] = {
1761_IC_1.h (inc):/* Register Default - IC 1.DSP Slew Mode Register */
1761_IC_1.h (inc):ADI_REG_TYPE R25_DSP_SLEW_MODES_IC_1_Default[REG_DSP_SLEW_MODES_IC_1_BYTE] = {
1761_IC_1.h (inc):/* Register Default - IC 1.Serial Port Sample Rate Register */
1761_IC_1.h (inc):ADI_REG_TYPE R26_SERIAL_PORT_SAMPLE_RATE_SETTING_IC_1_Default[REG_SERIAL_PORT_SAMPLE_RATE_SETTING_IC_1_BYTE] = {
1761_IC_1.h (inc):ADI_REG_TYPE R27_CLOCK_ENABLE_REGISTERS_IC_1_Default[R27_CLOCK_ENABLE_REGISTERS_IC_1_SIZE] = {
1761_IC_1.h (inc):/* Register Default - IC 1.Sample Rate Setting */
1761_IC_1.h (inc):ADI_REG_TYPE R30_SAMPLE_RATE_SETTING_IC_1_Default[REG_SAMPLE_RATE_SETTING_IC_1_BYTE] = {
1761_IC_1.h (inc):/* Register Default - IC 1.DSP Run Register */
1761_IC_1.h (inc):ADI_REG_TYPE R31_DSP_RUN_REGISTER_IC_1_Default[REG_DSP_RUN_REGISTER_IC_1_BYTE] = {
1761_IC_1.h (inc):ADI_REG_TYPE R32_DEJITTER_REGISTER_CONTROL_IC_1_Default[REG_DEJITTER_REGISTER_CONTROL_IC_1_BYTE] = {
1761_IC_1.h (inc):ADI_REG_TYPE R33_DEJITTER_REGISTER_CONTROL_IC_1_Default[REG_DEJITTER_REGISTER_CONTROL_IC_1_BYTE] = {
1761_IC_1.h (inc):	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SAMPLE_RATE_SETTING_IC_1_ADDR, REG_SAMPLE_RATE_SETTING_IC_1_BYTE, R0_SAMPLE_RATE_SETTING_IC_1_Default );
1761_IC_1.h (inc):	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_DSP_RUN_REGISTER_IC_1_ADDR, REG_DSP_RUN_REGISTER_IC_1_BYTE, R1_DSP_RUN_REGISTER_IC_1_Default );
1761_IC_1.h (inc):	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_PLLCRLREGISTER_IC_1_ADDR, REG_PLLCRLREGISTER_IC_1_BYTE, R3_PLLCRLREGISTER_IC_1_Default );
1761_IC_1.h (inc):	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_PORT_CONTROL_0_IC_1_ADDR , R5_SERIAL_PORT_CONTROL_REGISTERS_IC_1_SIZE, R5_SERIAL_PORT_CONTROL_REGISTERS_IC_1_Default );
1761_IC_1.h (inc):	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_RECORD_PWR_MANAGEMENT_IC_1_ADDR , R8_RECORD_INPUT_SIGNAL_PATH_REGISTERS_IC_1_SIZE, R8_RECORD_INPUT_SIGNAL_PATH_REGISTERS_IC_1_Default );
1761_IC_1.h (inc):	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_PLAYBACK_MIXER_LEFT_CONTROL_0_IC_1_ADDR , R10_PLAYBACK_OUTPUT_SIGNAL_PATH_REGISTERS_IC_1_SIZE, R10_PLAYBACK_OUTPUT_SIGNAL_PATH_REGISTERS_IC_1_Default );
1761_IC_1.h (inc):	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_PORT_PAD_CONTROL_0_IC_1_ADDR , R13_SERIAL_PORT_PAD_CONTROL_REGISTERS_IC_1_SIZE, R13_SERIAL_PORT_PAD_CONTROL_REGISTERS_IC_1_Default );
1761_IC_1.h (inc):	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_COMM_PORT_PAD_CTRL_0_IC_1_ADDR , R14_COMMUNICATION_PORT_PAD_CONTROL_REGISTERS_IC_1_SIZE, R14_COMMUNICATION_PORT_PAD_CONTROL_REGISTERS_IC_1_Default );
1761_IC_1.h (inc):	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_DSP_ENABLE_REGISTER_IC_1_ADDR, REG_DSP_ENABLE_REGISTER_IC_1_BYTE, R16_DSP_ENABLE_REGISTER_IC_1_Default );
1761_IC_1.h (inc):	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_GPIO_0_CONTROL_IC_1_ADDR , R18_GPIO_REGISTERS_IC_1_SIZE, R18_GPIO_REGISTERS_IC_1_Default );
1761_IC_1.h (inc):	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SAMPLE_RATE_SETTING_IC_1_ADDR, REG_SAMPLE_RATE_SETTING_IC_1_BYTE, R21_SAMPLE_RATE_SETTING_IC_1_Default );
1761_IC_1.h (inc):	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ROUTING_MATRIX_INPUTS_IC_1_ADDR, REG_ROUTING_MATRIX_INPUTS_IC_1_BYTE, R22_ROUTING_MATRIX_INPUTS_IC_1_Default );
1761_IC_1.h (inc):	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ROUTING_MATRIX_OUTPUTS_IC_1_ADDR, REG_ROUTING_MATRIX_OUTPUTS_IC_1_BYTE, R23_ROUTING_MATRIX_OUTPUTS_IC_1_Default );
1761_IC_1.h (inc):	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_DATAGPIO_PIN_CONFIG_IC_1_ADDR, REG_SERIAL_DATAGPIO_PIN_CONFIG_IC_1_BYTE, R24_SERIAL_DATAGPIO_PIN_CONFIG_IC_1_Default );
1761_IC_1.h (inc):	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_DSP_SLEW_MODES_IC_1_ADDR, REG_DSP_SLEW_MODES_IC_1_BYTE, R25_DSP_SLEW_MODES_IC_1_Default );
1761_IC_1.h (inc):	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_PORT_SAMPLE_RATE_SETTING_IC_1_ADDR, REG_SERIAL_PORT_SAMPLE_RATE_SETTING_IC_1_BYTE, R26_SERIAL_PORT_SAMPLE_RATE_SETTING_IC_1_Default );
1761_IC_1.h (inc):	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, PROGRAM_ADDR_IC_1, PROGRAM_SIZE_IC_1, Program_Data_IC_1 );
1761_IC_1.h (inc):	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, PARAM_ADDR_IC_1, PARAM_SIZE_IC_1, Param_Data_IC_1 );
1761_IC_1.h (inc):	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SAMPLE_RATE_SETTING_IC_1_ADDR, REG_SAMPLE_RATE_SETTING_IC_1_BYTE, R30_SAMPLE_RATE_SETTING_IC_1_Default );
1761_IC_1.h (inc):	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_DSP_RUN_REGISTER_IC_1_ADDR, REG_DSP_RUN_REGISTER_IC_1_BYTE, R31_DSP_RUN_REGISTER_IC_1_Default );
1761_IC_1_REG.h (inc): * File:           C:\Users\Administrator\Desktop\6 modes\BigMovies\BigMovies_IC_1_REG.h
1761_IC_1_REG.h (inc): * Created:        Thursday, November 07, 2013 4:11:11 PM
1761_IC_1_REG.h (inc): * Description:    SuperWire Scheme1:IC 1 control register definitions.
1761_IC_1_REG.h (inc): * This software is distributed in the hope that it will be useful,
1761_IC_1_REG.h (inc): * CONDITIONS OF ANY KIND, without even the implied warranty of
1761_IC_1_REG.h (inc): * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
1761_IC_1_REG.h (inc): * This software may only be used to program products purchased from
1761_IC_1_REG.h (inc): * Analog Devices for incorporation by you into audio products that
1761_IC_1_REG.h (inc): * are intended for resale to audio product end users. This software
1761_IC_1_REG.h (inc): * may not be distributed whole or in any part to third parties.
1761_IC_1_REG.h (inc): * Copyright ?2013 Analog Devices, Inc. All rights reserved.
1761_IC_1_REG.h (inc):/* RegPowCtrlRegister  - Registers (IC 1) */
1761_IC_1_REG.h (inc):#define REG_REGPOWCTRLREGISTER_IC_1_ADDR          0x4001
1761_IC_1_REG.h (inc):#define REG_REGPOWCTRLREGISTER_IC_1_BYTE          1
1761_IC_1_REG.h (inc):#define REG_REGPOWCTRLREGISTER_IC_1_VALUE         0x0
1761_IC_1_REG.h (inc):/* PLLCrlRegister  - Registers (IC 1) */
1761_IC_1_REG.h (inc):#define REG_PLLCRLREGISTER_IC_1_ADDR              0x4002
1761_IC_1_REG.h (inc):#define REG_PLLCRLREGISTER_IC_1_BYTE              6
1761_IC_1_REG.h (inc):#define REG_PLLCRLREGISTER_IC_1_VALUE             0x00FD000C2001
1761_IC_1_REG.h (inc):/* Record Pwr Management  - Registers (IC 1) */
1761_IC_1_REG.h (inc):#define REG_RECORD_PWR_MANAGEMENT_IC_1_ADDR       0x4009
1761_IC_1_REG.h (inc):#define REG_RECORD_PWR_MANAGEMENT_IC_1_BYTE       1
1761_IC_1_REG.h (inc):#define REG_RECORD_PWR_MANAGEMENT_IC_1_VALUE      0x0
1761_IC_1_REG.h (inc):/* Serial Port Control 0  - Registers (IC 1) */
1761_IC_1_REG.h (inc):#define REG_SERIAL_PORT_CONTROL_0_IC_1_ADDR       0x4015
1761_IC_1_REG.h (inc):#define REG_SERIAL_PORT_CONTROL_0_IC_1_BYTE       1
1761_IC_1_REG.h (inc):#define REG_SERIAL_PORT_CONTROL_0_IC_1_VALUE      0x0
1761_IC_1_REG.h (inc):/* Serail Port Control 1  - Registers (IC 1) */
1761_IC_1_REG.h (inc):#define REG_SERAIL_PORT_CONTROL_1_IC_1_ADDR       0x4016
1761_IC_1_REG.h (inc):#define REG_SERAIL_PORT_CONTROL_1_IC_1_BYTE       1
1761_IC_1_REG.h (inc):#define REG_SERAIL_PORT_CONTROL_1_IC_1_VALUE      0x0
1761_IC_1_REG.h (inc):/* Playback Mixer Left Control 0  - Registers (IC 1) */
1761_IC_1_REG.h (inc):#define REG_PLAYBACK_MIXER_LEFT_CONTROL_0_IC_1_ADDR 0x401C
1761_IC_1_REG.h (inc):#define REG_PLAYBACK_MIXER_LEFT_CONTROL_0_IC_1_BYTE 1
1761_IC_1_REG.h (inc):#define REG_PLAYBACK_MIXER_LEFT_CONTROL_0_IC_1_VALUE 0x21
1761_IC_1_REG.h (inc):/* Plaback Mixer Left Control 1  - Registers (IC 1) */
1761_IC_1_REG.h (inc):#define REG_PLABACK_MIXER_LEFT_CONTROL_1_IC_1_ADDR 0x401D
1761_IC_1_REG.h (inc):#define REG_PLABACK_MIXER_LEFT_CONTROL_1_IC_1_BYTE 1
1761_IC_1_REG.h (inc):#define REG_PLABACK_MIXER_LEFT_CONTROL_1_IC_1_VALUE 0x0
1761_IC_1_REG.h (inc):/* Plaback Mixer Right Control 0  - Registers (IC 1) */
1761_IC_1_REG.h (inc):#define REG_PLABACK_MIXER_RIGHT_CONTROL_0_IC_1_ADDR 0x401E
1761_IC_1_REG.h (inc):#define REG_PLABACK_MIXER_RIGHT_CONTROL_0_IC_1_BYTE 1
1761_IC_1_REG.h (inc):#define REG_PLABACK_MIXER_RIGHT_CONTROL_0_IC_1_VALUE 0x41
1761_IC_1_REG.h (inc):/* Playback Mixer Right Control 1  - Registers (IC 1) */
1761_IC_1_REG.h (inc):#define REG_PLAYBACK_MIXER_RIGHT_CONTROL_1_IC_1_ADDR 0x401F
1761_IC_1_REG.h (inc):#define REG_PLAYBACK_MIXER_RIGHT_CONTROL_1_IC_1_BYTE 1
1761_IC_1_REG.h (inc):#define REG_PLAYBACK_MIXER_RIGHT_CONTROL_1_IC_1_VALUE 0x0
1761_IC_1_REG.h (inc):/* Playback LR Left  - Registers (IC 1) */
1761_IC_1_REG.h (inc):#define REG_PLAYBACK_LR_LEFT_IC_1_ADDR            0x4020
1761_IC_1_REG.h (inc):#define REG_PLAYBACK_LR_LEFT_IC_1_BYTE            1
1761_IC_1_REG.h (inc):#define REG_PLAYBACK_LR_LEFT_IC_1_VALUE           0x0
1761_IC_1_REG.h (inc):/* Playback LR Right  - Registers (IC 1) */
1761_IC_1_REG.h (inc):#define REG_PLAYBACK_LR_RIGHT_IC_1_ADDR           0x4021
1761_IC_1_REG.h (inc):#define REG_PLAYBACK_LR_RIGHT_IC_1_BYTE           1
1761_IC_1_REG.h (inc):#define REG_PLAYBACK_LR_RIGHT_IC_1_VALUE          0x0
1761_IC_1_REG.h (inc):/* Playback LR Mono Ctrl  - Registers (IC 1) */
1761_IC_1_REG.h (inc):#define REG_PLAYBACK_LR_MONO_CTRL_IC_1_ADDR       0x4022
1761_IC_1_REG.h (inc):#define REG_PLAYBACK_LR_MONO_CTRL_IC_1_BYTE       1
1761_IC_1_REG.h (inc):#define REG_PLAYBACK_LR_MONO_CTRL_IC_1_VALUE      0x1
1761_IC_1_REG.h (inc):/* Playback Headphone Left  - Registers (IC 1) */
1761_IC_1_REG.h (inc):#define REG_PLAYBACK_HEADPHONE_LEFT_IC_1_ADDR     0x4023
1761_IC_1_REG.h (inc):#define REG_PLAYBACK_HEADPHONE_LEFT_IC_1_BYTE     1
1761_IC_1_REG.h (inc):#define REG_PLAYBACK_HEADPHONE_LEFT_IC_1_VALUE    0xE7
1761_IC_1_REG.h (inc):/* Playback Headphone Right  - Registers (IC 1) */
1761_IC_1_REG.h (inc):#define REG_PLAYBACK_HEADPHONE_RIGHT_IC_1_ADDR    0x4024
1761_IC_1_REG.h (inc):#define REG_PLAYBACK_HEADPHONE_RIGHT_IC_1_BYTE    1
1761_IC_1_REG.h (inc):#define REG_PLAYBACK_HEADPHONE_RIGHT_IC_1_VALUE   0xE7
1761_IC_1_REG.h (inc):/* Playback Line Out Left  - Registers (IC 1) */
1761_IC_1_REG.h (inc):#define REG_PLAYBACK_LINE_OUT_LEFT_IC_1_ADDR      0x4025
1761_IC_1_REG.h (inc):#define REG_PLAYBACK_LINE_OUT_LEFT_IC_1_BYTE      1
1761_IC_1_REG.h (inc):#define REG_PLAYBACK_LINE_OUT_LEFT_IC_1_VALUE     0x0
1761_IC_1_REG.h (inc):/* Playback Line Out Right  - Registers (IC 1) */
1761_IC_1_REG.h (inc):#define REG_PLAYBACK_LINE_OUT_RIGHT_IC_1_ADDR     0x4026
1761_IC_1_REG.h (inc):#define REG_PLAYBACK_LINE_OUT_RIGHT_IC_1_BYTE     1
1761_IC_1_REG.h (inc):#define REG_PLAYBACK_LINE_OUT_RIGHT_IC_1_VALUE    0x0
1761_IC_1_REG.h (inc):/* Playback Line Out Mono  - Registers (IC 1) */
1761_IC_1_REG.h (inc):#define REG_PLAYBACK_LINE_OUT_MONO_IC_1_ADDR      0x4027
1761_IC_1_REG.h (inc):#define REG_PLAYBACK_LINE_OUT_MONO_IC_1_BYTE      1
1761_IC_1_REG.h (inc):#define REG_PLAYBACK_LINE_OUT_MONO_IC_1_VALUE     0xE5
1761_IC_1_REG.h (inc):/* Playback Control  - Registers (IC 1) */
1761_IC_1_REG.h (inc):#define REG_PLAYBACK_CONTROL_IC_1_ADDR            0x4028
1761_IC_1_REG.h (inc):#define REG_PLAYBACK_CONTROL_IC_1_BYTE            1
1761_IC_1_REG.h (inc):#define REG_PLAYBACK_CONTROL_IC_1_VALUE           0x0
1761_IC_1_REG.h (inc):/* Playback Power Management  - Registers (IC 1) */
1761_IC_1_REG.h (inc):#define REG_PLAYBACK_POWER_MANAGEMENT_IC_1_ADDR   0x4029
1761_IC_1_REG.h (inc):#define REG_PLAYBACK_POWER_MANAGEMENT_IC_1_BYTE   1
1761_IC_1_REG.h (inc):#define REG_PLAYBACK_POWER_MANAGEMENT_IC_1_VALUE  0x3
1761_IC_1_REG.h (inc):/* Serial Port Pad Control 0  - Registers (IC 1) */
1761_IC_1_REG.h (inc):#define REG_SERIAL_PORT_PAD_CONTROL_0_IC_1_ADDR   0x402D
1761_IC_1_REG.h (inc):#define REG_SERIAL_PORT_PAD_CONTROL_0_IC_1_BYTE   1
1761_IC_1_REG.h (inc):#define REG_SERIAL_PORT_PAD_CONTROL_0_IC_1_VALUE  0xAA
1761_IC_1_REG.h (inc):/* Comm Port Pad Ctrl 0  - Registers (IC 1) */
1761_IC_1_REG.h (inc):#define REG_COMM_PORT_PAD_CTRL_0_IC_1_ADDR        0x402F
1761_IC_1_REG.h (inc):#define REG_COMM_PORT_PAD_CTRL_0_IC_1_BYTE        1
1761_IC_1_REG.h (inc):#define REG_COMM_PORT_PAD_CTRL_0_IC_1_VALUE       0xAA
1761_IC_1_REG.h (inc):/* Comm Port Pad Ctrl 1  - Registers (IC 1) */
1761_IC_1_REG.h (inc):#define REG_COMM_PORT_PAD_CTRL_1_IC_1_ADDR        0x4030
1761_IC_1_REG.h (inc):#define REG_COMM_PORT_PAD_CTRL_1_IC_1_BYTE        1
1761_IC_1_REG.h (inc):#define REG_COMM_PORT_PAD_CTRL_1_IC_1_VALUE       0x0
1761_IC_1_REG.h (inc):/* GPIO 0 Control  - Registers (IC 1) */
1761_IC_1_REG.h (inc):#define REG_GPIO_0_CONTROL_IC_1_ADDR              0x40C6
1761_IC_1_REG.h (inc):#define REG_GPIO_0_CONTROL_IC_1_BYTE              1
1761_IC_1_REG.h (inc):#define REG_GPIO_0_CONTROL_IC_1_VALUE             0x0
1761_IC_1_REG.h (inc):/* GPIO 1 Control  - Registers (IC 1) */
1761_IC_1_REG.h (inc):#define REG_GPIO_1_CONTROL_IC_1_ADDR              0x40C7
1761_IC_1_REG.h (inc):#define REG_GPIO_1_CONTROL_IC_1_BYTE              1
1761_IC_1_REG.h (inc):#define REG_GPIO_1_CONTROL_IC_1_VALUE             0x0
1761_IC_1_REG.h (inc):/* GPIO 2 Control  - Registers (IC 1) */
1761_IC_1_REG.h (inc):#define REG_GPIO_2_CONTROL_IC_1_ADDR              0x40C8
1761_IC_1_REG.h (inc):#define REG_GPIO_2_CONTROL_IC_1_BYTE              1
1761_IC_1_REG.h (inc):#define REG_GPIO_2_CONTROL_IC_1_VALUE             0x0
1761_IC_1_REG.h (inc):/* GPIO 3 Control  - Registers (IC 1) */
1761_IC_1_REG.h (inc):#define REG_GPIO_3_CONTROL_IC_1_ADDR              0x40C9
1761_IC_1_REG.h (inc):#define REG_GPIO_3_CONTROL_IC_1_BYTE              1
1761_IC_1_REG.h (inc):#define REG_GPIO_3_CONTROL_IC_1_VALUE             0x0
1761_IC_1_REG.h (inc):/* Sample Rate Setting  - Registers (IC 1) */
1761_IC_1_REG.h (inc):#define REG_SAMPLE_RATE_SETTING_IC_1_ADDR         0x40EB
1761_IC_1_REG.h (inc):#define REG_SAMPLE_RATE_SETTING_IC_1_BYTE         1
1761_IC_1_REG.h (inc):#define REG_SAMPLE_RATE_SETTING_IC_1_VALUE        0x1
1761_IC_1_REG.h (inc):/* Routing Matrix Inputs  - Registers (IC 1) */
1761_IC_1_REG.h (inc):#define REG_ROUTING_MATRIX_INPUTS_IC_1_ADDR       0x40F2
1761_IC_1_REG.h (inc):#define REG_ROUTING_MATRIX_INPUTS_IC_1_BYTE       1
1761_IC_1_REG.h (inc):#define REG_ROUTING_MATRIX_INPUTS_IC_1_VALUE      0x0
1761_IC_1_REG.h (inc):/* Routing Matrix Outputs  - Registers (IC 1) */
1761_IC_1_REG.h (inc):#define REG_ROUTING_MATRIX_OUTPUTS_IC_1_ADDR      0x40F3
1761_IC_1_REG.h (inc):#define REG_ROUTING_MATRIX_OUTPUTS_IC_1_BYTE      1
1761_IC_1_REG.h (inc):#define REG_ROUTING_MATRIX_OUTPUTS_IC_1_VALUE     0x0
1761_IC_1_REG.h (inc):/* Serial Data/GPIO Pin Config  - Registers (IC 1) */
1761_IC_1_REG.h (inc):#define REG_SERIAL_DATAGPIO_PIN_CONFIG_IC_1_ADDR  0x40F4
1761_IC_1_REG.h (inc):#define REG_SERIAL_DATAGPIO_PIN_CONFIG_IC_1_BYTE  1
1761_IC_1_REG.h (inc):#define REG_SERIAL_DATAGPIO_PIN_CONFIG_IC_1_VALUE 0x11
1761_IC_1_REG.h (inc):/* DSP Enable Register  - Registers (IC 1) */
1761_IC_1_REG.h (inc):#define REG_DSP_ENABLE_REGISTER_IC_1_ADDR         0x40F5
1761_IC_1_REG.h (inc):#define REG_DSP_ENABLE_REGISTER_IC_1_BYTE         1
1761_IC_1_REG.h (inc):#define REG_DSP_ENABLE_REGISTER_IC_1_VALUE        0x1
1761_IC_1_REG.h (inc):/* DSP Run Register  - Registers (IC 1) */
1761_IC_1_REG.h (inc):#define REG_DSP_RUN_REGISTER_IC_1_ADDR            0x40F6
1761_IC_1_REG.h (inc):#define REG_DSP_RUN_REGISTER_IC_1_BYTE            1
1761_IC_1_REG.h (inc):#define REG_DSP_RUN_REGISTER_IC_1_VALUE           0x1
1761_IC_1_REG.h (inc):/* DSP Slew Modes  - Registers (IC 1) */
1761_IC_1_REG.h (inc):#define REG_DSP_SLEW_MODES_IC_1_ADDR              0x40F7
1761_IC_1_REG.h (inc):#define REG_DSP_SLEW_MODES_IC_1_BYTE              1
1761_IC_1_REG.h (inc):#define REG_DSP_SLEW_MODES_IC_1_VALUE             0x0
1761_IC_1_REG.h (inc):/* Serial Port Sample Rate Setting  - Registers (IC 1) */
1761_IC_1_REG.h (inc):#define REG_SERIAL_PORT_SAMPLE_RATE_SETTING_IC_1_ADDR 0x40F8
1761_IC_1_REG.h (inc):#define REG_SERIAL_PORT_SAMPLE_RATE_SETTING_IC_1_BYTE 1
1761_IC_1_REG.h (inc):#define REG_SERIAL_PORT_SAMPLE_RATE_SETTING_IC_1_VALUE 0x0
1761_IC_1_REG.h (inc): * Control register's field descriptions
1761_IC_1_REG.h (inc):#define R0_INPUT_MCLK_FREQ_IC_1                   0x3    /* 11b	[2:1] */
1761_IC_1_REG.h (inc):#define R0_INPUT_MCLK_FREQ_IC_1_MASK              0x6
1761_IC_1_REG.h (inc):#define R0_INPUT_MCLK_FREQ_IC_1_SHIFT             1
1761_IC_1_REG.h (inc):/* RegPowCtrlRegister (IC 1) */
1761_IC_1_REG.h (inc):#define R1_REGPOWCTRL_IC_1                        0x0    /* 0b	[0] */
1761_IC_1_REG.h (inc):#define R1_REGPOWCTRL_IC_1_MASK                   0x1
1761_IC_1_REG.h (inc):#define R1_REGPOWCTRL_IC_1_SHIFT                  0
1761_IC_1_REG.h (inc):/* PLLCrlRegister (IC 1) */
1761_IC_1_REG.h (inc):#define R2_PLL_POWER_DOWN_IC_1                    0x1    /* 1b	[0] */
1761_IC_1_REG.h (inc):#define R2_PLL_LOCK_IC_1                          0x0    /* 0b	[1] */
1761_IC_1_REG.h (inc):#define R2_PLL_TYPE_IC_1                          0x0    /* 0b	[8] */
1761_IC_1_REG.h (inc):#define R2_INPUT_DIVIDER_IC_1                     0x0    /* 00b	[10:9] */
1761_IC_1_REG.h (inc):#define R2_PLL_POWER_DOWN_IC_1_MASK               0x1
1761_IC_1_REG.h (inc):#define R2_PLL_POWER_DOWN_IC_1_SHIFT              0
1761_IC_1_REG.h (inc):#define R2_PLL_LOCK_IC_1_MASK                     0x2
1761_IC_1_REG.h (inc):#define R2_PLL_LOCK_IC_1_SHIFT                    1
1761_IC_1_REG.h (inc):#define R2_PLL_TYPE_IC_1_MASK                     0x100
1761_IC_1_REG.h (inc):#define R2_PLL_TYPE_IC_1_SHIFT                    8
1761_IC_1_REG.h (inc):#define R2_INPUT_DIVIDER_IC_1_MASK                0x600
1761_IC_1_REG.h (inc):#define R2_INPUT_DIVIDER_IC_1_SHIFT               9
1761_IC_1_REG.h (inc):#define R3_JACK_POLARITY_IC_1                     0x0    /* 0b	[0] */
1761_IC_1_REG.h (inc):#define R3_JACK_POLARITY_IC_1_MASK                0x1
1761_IC_1_REG.h (inc):#define R3_JACK_POLARITY_IC_1_SHIFT               0
1761_IC_1_REG.h (inc):/* Record Pwr Management (IC 1) */
1761_IC_1_REG.h (inc):#define R4_MIXER_AMP_BOOST_IC_1                   0x0    /* 00b	[6:5] */
1761_IC_1_REG.h (inc):#define R4_MIXER_AMP_BOOST_IC_1_MASK              0x60
1761_IC_1_REG.h (inc):#define R4_MIXER_AMP_BOOST_IC_1_SHIFT             5
1761_IC_1_REG.h (inc):#define R5_LINE_IN_P_GAIN_IC_1                    0x0    /* 000b	[6:4] */
1761_IC_1_REG.h (inc):#define R5_LINE_IN_P_GAIN_IC_1_MASK               0x70
1761_IC_1_REG.h (inc):#define R5_LINE_IN_P_GAIN_IC_1_SHIFT              4
1761_IC_1_REG.h (inc):#define R6_REC_MIX_LFT_CTRL1_PGABOOST_IC_1        0x0    /* 00b	[4:3] */
1761_IC_1_REG.h (inc):#define R6_REC_MIX_LFT_CTRL1_PGABOOST_IC_1_MASK   0x18
1761_IC_1_REG.h (inc):#define R6_REC_MIX_LFT_CTRL1_PGABOOST_IC_1_SHIFT  3
1761_IC_1_REG.h (inc):#define R7_RECMIXRIGHT_CTRL0_PGAIN_IC_1           0x0    /* 000b	[6:4] */
1761_IC_1_REG.h (inc):#define R7_RECMIXRIGHT_CTRL0_PGAIN_IC_1_MASK      0x70
1761_IC_1_REG.h (inc):#define R7_RECMIXRIGHT_CTRL0_PGAIN_IC_1_SHIFT     4
1761_IC_1_REG.h (inc):#define R8_RECMIXRIGHT_CTRL1_PGABOOST_IC_1        0x0    /* 00b	[4:3] */
1761_IC_1_REG.h (inc):#define R8_RECMIXRIGHT_CTRL1_PGABOOST_IC_1_MASK   0x18
1761_IC_1_REG.h (inc):#define R8_RECMIXRIGHT_CTRL1_PGABOOST_IC_1_SHIFT  3
1761_IC_1_REG.h (inc):#define R9_REC_VOL_CTRL_LFT_DIFPATH_IC_1          0x0    /* 0b	[0] */
1761_IC_1_REG.h (inc):#define R9_REC_VOL_CTRL_LFT_DIFPATH_IC_1_MASK     0x1
1761_IC_1_REG.h (inc):#define R9_REC_VOL_CTRL_LFT_DIFPATH_IC_1_SHIFT    0
1761_IC_1_REG.h (inc):#define R10_REC_VOL_CTRL_RGT_DIFPATH_IC_1         0x0    /* 0b	[0] */
1761_IC_1_REG.h (inc):#define R10_REC_VOL_CTRL_RGT_DIFPATH_IC_1_MASK    0x1
1761_IC_1_REG.h (inc):#define R10_REC_VOL_CTRL_RGT_DIFPATH_IC_1_SHIFT   0
1761_IC_1_REG.h (inc):#define R11_MIC_HI_PERFORM_IC_1                   0x0    /* 0b	[3] */
1761_IC_1_REG.h (inc):#define R11_MIC_HI_PERFORM_IC_1_MASK              0x8
1761_IC_1_REG.h (inc):#define R11_MIC_HI_PERFORM_IC_1_SHIFT             3
1761_IC_1_REG.h (inc):#define R13_ALC_COMPRESSOR_HOLD_TIME_IC_1         0x0    /* 0000b	[7:4] */
1761_IC_1_REG.h (inc):#define R13_ALC_COMPRESSOR_HOLD_TIME_IC_1_MASK    0xF0
1761_IC_1_REG.h (inc):#define R13_ALC_COMPRESSOR_HOLD_TIME_IC_1_SHIFT   4
1761_IC_1_REG.h (inc):#define R14_ALC_COMPRESSOR_ATTACK_TIME_IC_1       0x0    /* 0000b	[7:4] */
1761_IC_1_REG.h (inc):#define R14_ALC_COMPRESSOR_ATTACK_TIME_IC_1_MASK  0xF0
1761_IC_1_REG.h (inc):#define R14_ALC_COMPRESSOR_ATTACK_TIME_IC_1_SHIFT 4
1761_IC_1_REG.h (inc):#define R15_NOISE_GATE_TYPE_IC_1                  0x0    /* 00b	[7:6] */
1761_IC_1_REG.h (inc):#define R15_NOISE_GATE_TYPE_IC_1_MASK             0xC0
1761_IC_1_REG.h (inc):#define R15_NOISE_GATE_TYPE_IC_1_SHIFT            6
1761_IC_1_REG.h (inc):/* Serial Port Control 0 (IC 1) */
1761_IC_1_REG.h (inc):#define R16_SP_CTRL0_SDBUSMSTRMD_IC_1             0x0    /* 0b	[0] */
1761_IC_1_REG.h (inc):#define R16_SP_CTRL0_CHANFRM_IC_1                 0x0    /* 00b	[2:1] */
1761_IC_1_REG.h (inc):#define R16_SP_CTRL0_LRCLK_POL_IC_1               0x0    /* 0b	[3] */
1761_IC_1_REG.h (inc):#define R16_SP_CTRL0_BCLK_IC_1                    0x0    /* 0b	[4] */
1761_IC_1_REG.h (inc):#define R16_SP_CTRL0_LRCLK_IC_1                   0x0    /* 0b	[5] */
1761_IC_1_REG.h (inc):#define R16_SP_CTRL0_SDBUSMSTRMD_IC_1_MASK        0x1
1761_IC_1_REG.h (inc):#define R16_SP_CTRL0_SDBUSMSTRMD_IC_1_SHIFT       0
1761_IC_1_REG.h (inc):#define R16_SP_CTRL0_CHANFRM_IC_1_MASK            0x6
1761_IC_1_REG.h (inc):#define R16_SP_CTRL0_CHANFRM_IC_1_SHIFT           1
1761_IC_1_REG.h (inc):#define R16_SP_CTRL0_LRCLK_POL_IC_1_MASK          0x8
1761_IC_1_REG.h (inc):#define R16_SP_CTRL0_LRCLK_POL_IC_1_SHIFT         3
1761_IC_1_REG.h (inc):#define R16_SP_CTRL0_BCLK_IC_1_MASK               0x10
1761_IC_1_REG.h (inc):#define R16_SP_CTRL0_BCLK_IC_1_SHIFT              4
1761_IC_1_REG.h (inc):#define R16_SP_CTRL0_LRCLK_IC_1_MASK              0x20
1761_IC_1_REG.h (inc):#define R16_SP_CTRL0_LRCLK_IC_1_SHIFT             5
1761_IC_1_REG.h (inc):/* Serail Port Control 1 (IC 1) */
1761_IC_1_REG.h (inc):#define R17_SP_CTRL1_MSB_POSITION_IC_1            0x0    /* 0b	[2] */
1761_IC_1_REG.h (inc):#define R17_SP_CTRL1_DAC_CHAN_POSITION_IC_1       0x0    /* 0b	[3] */
1761_IC_1_REG.h (inc):#define R17_SP_CTRL1_ADC_CHAN_POSITION_IC_1       0x0    /* 0b	[4] */
1761_IC_1_REG.h (inc):#define R17_SP_CTRL1_NUMBER_OF_BIT_CLK_CYCLES_IC_1 0x0   /* 000b	[7:5] */
1761_IC_1_REG.h (inc):#define R17_SP_CTRL1_MSB_POSITION_IC_1_MASK       0x4
1761_IC_1_REG.h (inc):#define R17_SP_CTRL1_MSB_POSITION_IC_1_SHIFT      2
1761_IC_1_REG.h (inc):#define R17_SP_CTRL1_DAC_CHAN_POSITION_IC_1_MASK  0x8
1761_IC_1_REG.h (inc):#define R17_SP_CTRL1_DAC_CHAN_POSITION_IC_1_SHIFT 3
1761_IC_1_REG.h (inc):#define R17_SP_CTRL1_ADC_CHAN_POSITION_IC_1_MASK  0x10
1761_IC_1_REG.h (inc):#define R17_SP_CTRL1_ADC_CHAN_POSITION_IC_1_SHIFT 4
1761_IC_1_REG.h (inc):#define R17_SP_CTRL1_NUMBER_OF_BIT_CLK_CYCLES_IC_1_MASK 0xE0
1761_IC_1_REG.h (inc):#define R17_SP_CTRL1_NUMBER_OF_BIT_CLK_CYCLES_IC_1_SHIFT 5
1761_IC_1_REG.h (inc):#define R18_CONV_CTRL0_SAMPLE_RATE_IC_1           0x0    /* 000b	[2:0] */
1761_IC_1_REG.h (inc):#define R18_ADC_OVERSAMPLING_IC_1                 0x0    /* 0b	[3] */
1761_IC_1_REG.h (inc):#define R18_DAC_OVERSAMPLING_IC_1                 0x0    /* 0b	[4] */
1761_IC_1_REG.h (inc):#define R18_ON_CHIP_DAC_IC_1                      0x0    /* 00b	[6:5] */
1761_IC_1_REG.h (inc):#define R18_CONV_CTRL0_SAMPLE_RATE_IC_1_MASK      0x7
1761_IC_1_REG.h (inc):#define R18_CONV_CTRL0_SAMPLE_RATE_IC_1_SHIFT     0
1761_IC_1_REG.h (inc):#define R18_ADC_OVERSAMPLING_IC_1_MASK            0x8
1761_IC_1_REG.h (inc):#define R18_ADC_OVERSAMPLING_IC_1_SHIFT           3
1761_IC_1_REG.h (inc):#define R18_DAC_OVERSAMPLING_IC_1_MASK            0x10
1761_IC_1_REG.h (inc):#define R18_DAC_OVERSAMPLING_IC_1_SHIFT           4
1761_IC_1_REG.h (inc):#define R18_ON_CHIP_DAC_IC_1_MASK                 0x60
1761_IC_1_REG.h (inc):#define R18_ON_CHIP_DAC_IC_1_SHIFT                5
1761_IC_1_REG.h (inc):#define R19_ON_CHIP_ADC_IC_1                      0x0    /* 00b	[1:0] */
1761_IC_1_REG.h (inc):#define R19_ON_CHIP_ADC_IC_1_MASK                 0x3
1761_IC_1_REG.h (inc):#define R19_ON_CHIP_ADC_IC_1_SHIFT                0
1761_IC_1_REG.h (inc):#define R20_DIGITAL_MIC_INPUT_IC_1                0x0    /* 0b	[2] */
1761_IC_1_REG.h (inc):#define R20_DIGITAL_MIC_SWAP_IC_1                 0x0    /* 0b	[3] */
1761_IC_1_REG.h (inc):#define R20_DIGITAL_MIC_POLARITY_IC_1             0x1    /* 1b	[4] */
1761_IC_1_REG.h (inc):#define R20_HIGH_PASS_SELECT_IC_1                 0x0    /* 0b	[5] */
1761_IC_1_REG.h (inc):#define R20_INVERT_IN_POLARITY_IC_1               0x0    /* 0b	[6] */
1761_IC_1_REG.h (inc):#define R20_DIGITAL_MIC_INPUT_IC_1_MASK           0x4
1761_IC_1_REG.h (inc):#define R20_DIGITAL_MIC_INPUT_IC_1_SHIFT          2
1761_IC_1_REG.h (inc):#define R20_DIGITAL_MIC_SWAP_IC_1_MASK            0x8
1761_IC_1_REG.h (inc):#define R20_DIGITAL_MIC_SWAP_IC_1_SHIFT           3
1761_IC_1_REG.h (inc):#define R20_DIGITAL_MIC_POLARITY_IC_1_MASK        0x10
1761_IC_1_REG.h (inc):#define R20_DIGITAL_MIC_POLARITY_IC_1_SHIFT       4
1761_IC_1_REG.h (inc):#define R20_HIGH_PASS_SELECT_IC_1_MASK            0x20
1761_IC_1_REG.h (inc):#define R20_HIGH_PASS_SELECT_IC_1_SHIFT           5
1761_IC_1_REG.h (inc):#define R20_INVERT_IN_POLARITY_IC_1_MASK          0x40
1761_IC_1_REG.h (inc):#define R20_INVERT_IN_POLARITY_IC_1_SHIFT         6
1761_IC_1_REG.h (inc):/* Playback Mixer Left Control 0 (IC 1) */
1761_IC_1_REG.h (inc):#define R23_PBC0_MIX_ENABLE_IC_1                  0x1    /* 1b	[0] */
1761_IC_1_REG.h (inc):#define R23_PBC0_AUX_OUT_GAIN_IC_1                0x0    /* 0000b	[4:1] */
1761_IC_1_REG.h (inc):#define R23_PBC0_LEFT_DAC_MUTE_IC_1               0x1    /* 1b	[5] */
1761_IC_1_REG.h (inc):#define R23_PBC0_RIGHT_DAC_MUTE_IC_1              0x0    /* 0b	[6] */
1761_IC_1_REG.h (inc):#define R23_PBC0_MIX_ENABLE_IC_1_MASK             0x1
1761_IC_1_REG.h (inc):#define R23_PBC0_MIX_ENABLE_IC_1_SHIFT            0
1761_IC_1_REG.h (inc):#define R23_PBC0_AUX_OUT_GAIN_IC_1_MASK           0x1E
1761_IC_1_REG.h (inc):#define R23_PBC0_AUX_OUT_GAIN_IC_1_SHIFT          1
1761_IC_1_REG.h (inc):#define R23_PBC0_LEFT_DAC_MUTE_IC_1_MASK          0x20
1761_IC_1_REG.h (inc):#define R23_PBC0_LEFT_DAC_MUTE_IC_1_SHIFT         5
1761_IC_1_REG.h (inc):#define R23_PBC0_RIGHT_DAC_MUTE_IC_1_MASK         0x40
1761_IC_1_REG.h (inc):#define R23_PBC0_RIGHT_DAC_MUTE_IC_1_SHIFT        6
1761_IC_1_REG.h (inc):/* Plaback Mixer Left Control 1 (IC 1) */
1761_IC_1_REG.h (inc):#define R24_PBC1_LEFT_PGA_GAIN_IC_1               0x0    /* 0000b	[3:0] */
1761_IC_1_REG.h (inc):#define R24_PBC1_RIGHT_PGA_GAIN_IC_1              0x0    /* 0000b	[7:4] */
1761_IC_1_REG.h (inc):#define R24_PBC1_LEFT_PGA_GAIN_IC_1_MASK          0xF
1761_IC_1_REG.h (inc):#define R24_PBC1_LEFT_PGA_GAIN_IC_1_SHIFT         0
1761_IC_1_REG.h (inc):#define R24_PBC1_RIGHT_PGA_GAIN_IC_1_MASK         0xF0
1761_IC_1_REG.h (inc):#define R24_PBC1_RIGHT_PGA_GAIN_IC_1_SHIFT        4
1761_IC_1_REG.h (inc):/* Plaback Mixer Right Control 0 (IC 1) */
1761_IC_1_REG.h (inc):#define R25_PBMRC0_ENABLE_IC_1                    0x1    /* 1b	[0] */
1761_IC_1_REG.h (inc):#define R25_PBMRC0_AUX_GAIN_IC_1                  0x0    /* 0000b	[4:1] */
1761_IC_1_REG.h (inc):#define R25_PBMRC0_L_DAC_MUTE_IC_1                0x0    /* 0b	[5] */
1761_IC_1_REG.h (inc):#define R25_PBMRC0_R_DAC_MUTE_IC_1                0x1    /* 1b	[6] */
1761_IC_1_REG.h (inc):#define R25_PBMRC0_ENABLE_IC_1_MASK               0x1
1761_IC_1_REG.h (inc):#define R25_PBMRC0_ENABLE_IC_1_SHIFT              0
1761_IC_1_REG.h (inc):#define R25_PBMRC0_AUX_GAIN_IC_1_MASK             0x1E
1761_IC_1_REG.h (inc):#define R25_PBMRC0_AUX_GAIN_IC_1_SHIFT            1
1761_IC_1_REG.h (inc):#define R25_PBMRC0_L_DAC_MUTE_IC_1_MASK           0x20
1761_IC_1_REG.h (inc):#define R25_PBMRC0_L_DAC_MUTE_IC_1_SHIFT          5
1761_IC_1_REG.h (inc):#define R25_PBMRC0_R_DAC_MUTE_IC_1_MASK           0x40
1761_IC_1_REG.h (inc):#define R25_PBMRC0_R_DAC_MUTE_IC_1_SHIFT          6
1761_IC_1_REG.h (inc):/* Playback Mixer Right Control 1 (IC 1) */
1761_IC_1_REG.h (inc):#define R26_PBMRC1_L_PGA_OUT_GAIN_IC_1            0x0    /* 0000b	[3:0] */
1761_IC_1_REG.h (inc):#define R26_PBMRC1_R_PGA_OUT_GAIN_IC_1            0x0    /* 0000b	[7:4] */
1761_IC_1_REG.h (inc):#define R26_PBMRC1_L_PGA_OUT_GAIN_IC_1_MASK       0xF
1761_IC_1_REG.h (inc):#define R26_PBMRC1_L_PGA_OUT_GAIN_IC_1_SHIFT      0
1761_IC_1_REG.h (inc):#define R26_PBMRC1_R_PGA_OUT_GAIN_IC_1_MASK       0xF0
1761_IC_1_REG.h (inc):#define R26_PBMRC1_R_PGA_OUT_GAIN_IC_1_SHIFT      4
1761_IC_1_REG.h (inc):/* Playback LR Left (IC 1) */
1761_IC_1_REG.h (inc):#define R27_PBLR_LEFT_MIX_ENABLE_IC_1             0x0    /* 0b	[0] */
1761_IC_1_REG.h (inc):#define R27_PBLR_LEFT_LEFT_MIXER_IC_1             0x0    /* 00b	[2:1] */
1761_IC_1_REG.h (inc):#define R27_PBLR_LEFT_RIGHT_MIXER_IC_1            0x0    /* 00b	[4:3] */
1761_IC_1_REG.h (inc):#define R27_PBLR_LEFT_MIX_ENABLE_IC_1_MASK        0x1
1761_IC_1_REG.h (inc):#define R27_PBLR_LEFT_MIX_ENABLE_IC_1_SHIFT       0
1761_IC_1_REG.h (inc):#define R27_PBLR_LEFT_LEFT_MIXER_IC_1_MASK        0x6
1761_IC_1_REG.h (inc):#define R27_PBLR_LEFT_LEFT_MIXER_IC_1_SHIFT       1
1761_IC_1_REG.h (inc):#define R27_PBLR_LEFT_RIGHT_MIXER_IC_1_MASK       0x18
1761_IC_1_REG.h (inc):#define R27_PBLR_LEFT_RIGHT_MIXER_IC_1_SHIFT      3
1761_IC_1_REG.h (inc):/* Playback LR Right (IC 1) */
1761_IC_1_REG.h (inc):#define R28_PBLR_RIGHT_MIX_ENABLE_IC_1            0x0    /* 0b	[0] */
1761_IC_1_REG.h (inc):#define R28_PBLR_RIGHT_LEFT_MIXER_IC_1            0x0    /* 00b	[2:1] */
1761_IC_1_REG.h (inc):#define R28_PBLR_RIGHT_RIGHT_MIXER_IC_1           0x0    /* 00b	[4:3] */
1761_IC_1_REG.h (inc):#define R28_PBLR_RIGHT_MIX_ENABLE_IC_1_MASK       0x1
1761_IC_1_REG.h (inc):#define R28_PBLR_RIGHT_MIX_ENABLE_IC_1_SHIFT      0
1761_IC_1_REG.h (inc):#define R28_PBLR_RIGHT_LEFT_MIXER_IC_1_MASK       0x6
1761_IC_1_REG.h (inc):#define R28_PBLR_RIGHT_LEFT_MIXER_IC_1_SHIFT      1
1761_IC_1_REG.h (inc):#define R28_PBLR_RIGHT_RIGHT_MIXER_IC_1_MASK      0x18
1761_IC_1_REG.h (inc):#define R28_PBLR_RIGHT_RIGHT_MIXER_IC_1_SHIFT     3
1761_IC_1_REG.h (inc):/* Playback LR Mono Ctrl (IC 1) */
1761_IC_1_REG.h (inc):#define R29_PBMONO_MIX_ENABLE_IC_1                0x1    /* 1b	[0] */
1761_IC_1_REG.h (inc):#define R29_PBMONO_LEFT_AND_RIGHT_MIXER_IC_1      0x0    /* 00b	[2:1] */
1761_IC_1_REG.h (inc):#define R29_PBMONO_MIX_ENABLE_IC_1_MASK           0x1
1761_IC_1_REG.h (inc):#define R29_PBMONO_MIX_ENABLE_IC_1_SHIFT          0
1761_IC_1_REG.h (inc):#define R29_PBMONO_LEFT_AND_RIGHT_MIXER_IC_1_MASK 0x6
1761_IC_1_REG.h (inc):#define R29_PBMONO_LEFT_AND_RIGHT_MIXER_IC_1_SHIFT 1
1761_IC_1_REG.h (inc):/* Playback Headphone Left (IC 1) */
1761_IC_1_REG.h (inc):#define R30_PB_HEADPHONE_LEFT_PWRUP_IC_1          0x1    /* 1b	[0] */
1761_IC_1_REG.h (inc):#define R30_PB_HEADPHONE_LEFT_MUTE_IC_1           0x1    /* 1b	[1] */
1761_IC_1_REG.h (inc):#define R30_PB_HEADPHONE_LEFT_VOL_IC_1            0x39   /* 111001b	[7:2] */
1761_IC_1_REG.h (inc):#define R30_PB_HEADPHONE_LEFT_PWRUP_IC_1_MASK     0x1
1761_IC_1_REG.h (inc):#define R30_PB_HEADPHONE_LEFT_PWRUP_IC_1_SHIFT    0
1761_IC_1_REG.h (inc):#define R30_PB_HEADPHONE_LEFT_MUTE_IC_1_MASK      0x2
1761_IC_1_REG.h (inc):#define R30_PB_HEADPHONE_LEFT_MUTE_IC_1_SHIFT     1
1761_IC_1_REG.h (inc):#define R30_PB_HEADPHONE_LEFT_VOL_IC_1_MASK       0xFC
1761_IC_1_REG.h (inc):#define R30_PB_HEADPHONE_LEFT_VOL_IC_1_SHIFT      2
1761_IC_1_REG.h (inc):/* Playback Headphone Right (IC 1) */
1761_IC_1_REG.h (inc):#define R31_PB_HEADPHONE_RIGHT_PWRUP_IC_1         0x1    /* 1b	[0] */
1761_IC_1_REG.h (inc):#define R31_PB_HEADPHONE_RIGHT_MUTE_IC_1          0x1    /* 1b	[1] */
1761_IC_1_REG.h (inc):#define R31_PB_HEADPHONE_RIGHT_VOL_IC_1           0x39   /* 111001b	[7:2] */
1761_IC_1_REG.h (inc):#define R31_PB_HEADPHONE_RIGHT_PWRUP_IC_1_MASK    0x1
1761_IC_1_REG.h (inc):#define R31_PB_HEADPHONE_RIGHT_PWRUP_IC_1_SHIFT   0
1761_IC_1_REG.h (inc):#define R31_PB_HEADPHONE_RIGHT_MUTE_IC_1_MASK     0x2
1761_IC_1_REG.h (inc):#define R31_PB_HEADPHONE_RIGHT_MUTE_IC_1_SHIFT    1
1761_IC_1_REG.h (inc):#define R31_PB_HEADPHONE_RIGHT_VOL_IC_1_MASK      0xFC
1761_IC_1_REG.h (inc):#define R31_PB_HEADPHONE_RIGHT_VOL_IC_1_SHIFT     2
1761_IC_1_REG.h (inc):/* Playback Line Out Left (IC 1) */
1761_IC_1_REG.h (inc):#define R32_PB_LEFT_PWRUP_IC_1                    0x0    /* 0b	[0] */
1761_IC_1_REG.h (inc):#define R32_PB_LEFT_MUTE_IC_1                     0x0    /* 0b	[1] */
1761_IC_1_REG.h (inc):#define R32_PB_LEFT_VOL_IC_1                      0x0    /* 000000b	[7:2] */
1761_IC_1_REG.h (inc):#define R32_PB_LEFT_PWRUP_IC_1_MASK               0x1
1761_IC_1_REG.h (inc):#define R32_PB_LEFT_PWRUP_IC_1_SHIFT              0
1761_IC_1_REG.h (inc):#define R32_PB_LEFT_MUTE_IC_1_MASK                0x2
1761_IC_1_REG.h (inc):#define R32_PB_LEFT_MUTE_IC_1_SHIFT               1
1761_IC_1_REG.h (inc):#define R32_PB_LEFT_VOL_IC_1_MASK                 0xFC
1761_IC_1_REG.h (inc):#define R32_PB_LEFT_VOL_IC_1_SHIFT                2
1761_IC_1_REG.h (inc):/* Playback Line Out Right (IC 1) */
1761_IC_1_REG.h (inc):#define R33_PB_RIGHT_PWRUP_IC_1                   0x0    /* 0b	[0] */
1761_IC_1_REG.h (inc):#define R33_PB_RIGHT_MUTE_IC_1                    0x0    /* 0b	[1] */
1761_IC_1_REG.h (inc):#define R33_PB_RIGHT_VOL_IC_1                     0x0    /* 000000b	[7:2] */
1761_IC_1_REG.h (inc):#define R33_PB_RIGHT_PWRUP_IC_1_MASK              0x1
1761_IC_1_REG.h (inc):#define R33_PB_RIGHT_PWRUP_IC_1_SHIFT             0
1761_IC_1_REG.h (inc):#define R33_PB_RIGHT_MUTE_IC_1_MASK               0x2
1761_IC_1_REG.h (inc):#define R33_PB_RIGHT_MUTE_IC_1_SHIFT              1
1761_IC_1_REG.h (inc):#define R33_PB_RIGHT_VOL_IC_1_MASK                0xFC
1761_IC_1_REG.h (inc):#define R33_PB_RIGHT_VOL_IC_1_SHIFT               2
1761_IC_1_REG.h (inc):/* Playback Line Out Mono (IC 1) */
1761_IC_1_REG.h (inc):#define R34_PB_MONO_PWRUP_IC_1                    0x1    /* 1b	[0] */
1761_IC_1_REG.h (inc):#define R34_PB_MONO_MUTE_IC_1                     0x0    /* 0b	[1] */
1761_IC_1_REG.h (inc):#define R34_PB_MONO_VOL_IC_1                      0x39   /* 111001b	[7:2] */
1761_IC_1_REG.h (inc):#define R34_PB_MONO_PWRUP_IC_1_MASK               0x1
1761_IC_1_REG.h (inc):#define R34_PB_MONO_PWRUP_IC_1_SHIFT              0
1761_IC_1_REG.h (inc):#define R34_PB_MONO_MUTE_IC_1_MASK                0x2
1761_IC_1_REG.h (inc):#define R34_PB_MONO_MUTE_IC_1_SHIFT               1
1761_IC_1_REG.h (inc):#define R34_PB_MONO_VOL_IC_1_MASK                 0xFC
1761_IC_1_REG.h (inc):#define R34_PB_MONO_VOL_IC_1_SHIFT                2
1761_IC_1_REG.h (inc):/* Playback Control (IC 1) */
1761_IC_1_REG.h (inc):#define R35_PLAYBACK_ANALOG_VOL_SLEW_RATE_IC_1    0x0    /* 00b	[2:1] */
1761_IC_1_REG.h (inc):#define R35_POPLESS_IC_1                          0x0    /* 0b	[3] */
1761_IC_1_REG.h (inc):#define R35_POP_MODE_IC_1                         0x0    /* 0b	[4] */
1761_IC_1_REG.h (inc):#define R35_PLAYBACK_ANALOG_VOL_SLEW_RATE_IC_1_MASK 0x6
1761_IC_1_REG.h (inc):#define R35_PLAYBACK_ANALOG_VOL_SLEW_RATE_IC_1_SHIFT 1
1761_IC_1_REG.h (inc):#define R35_POPLESS_IC_1_MASK                     0x8
1761_IC_1_REG.h (inc):#define R35_POPLESS_IC_1_SHIFT                    3
1761_IC_1_REG.h (inc):#define R35_POP_MODE_IC_1_MASK                    0x10
1761_IC_1_REG.h (inc):#define R35_POP_MODE_IC_1_SHIFT                   4
1761_IC_1_REG.h (inc):/* Playback Power Management (IC 1) */
1761_IC_1_REG.h (inc):#define R36_PB_BCKEND_LEFT_ENABLE_IC_1            0x1    /* 1b	[0] */
1761_IC_1_REG.h (inc):#define R36_PB_BCKEND_RIGHT_ENABLE_IC_1           0x1    /* 1b	[1] */
1761_IC_1_REG.h (inc):#define R36_PB_BACK_CTRL_IC_1                     0x0    /* 00b	[3:2] */
1761_IC_1_REG.h (inc):#define R36_PB_DAC_BIAS_IC_1                      0x0    /* 00b	[5:4] */
1761_IC_1_REG.h (inc):#define R36_PB_HP_BIAS_IC_1                       0x0    /* 00b	[7:6] */
1761_IC_1_REG.h (inc):#define R36_PB_BCKEND_LEFT_ENABLE_IC_1_MASK       0x1
1761_IC_1_REG.h (inc):#define R36_PB_BCKEND_LEFT_ENABLE_IC_1_SHIFT      0
1761_IC_1_REG.h (inc):#define R36_PB_BCKEND_RIGHT_ENABLE_IC_1_MASK      0x2
1761_IC_1_REG.h (inc):#define R36_PB_BCKEND_RIGHT_ENABLE_IC_1_SHIFT     1
1761_IC_1_REG.h (inc):#define R36_PB_BACK_CTRL_IC_1_MASK                0xC
1761_IC_1_REG.h (inc):#define R36_PB_BACK_CTRL_IC_1_SHIFT               2
1761_IC_1_REG.h (inc):#define R36_PB_DAC_BIAS_IC_1_MASK                 0x30
1761_IC_1_REG.h (inc):#define R36_PB_DAC_BIAS_IC_1_SHIFT                4
1761_IC_1_REG.h (inc):#define R36_PB_HP_BIAS_IC_1_MASK                  0xC0
1761_IC_1_REG.h (inc):#define R36_PB_HP_BIAS_IC_1_SHIFT                 6
1761_IC_1_REG.h (inc):#define R37_DACC0_DE_EMPH_FILTER_ENA_IC_1         0x0    /* 0b	[2] */
1761_IC_1_REG.h (inc):#define R37_DACC0_INV_INPUT_POL_IC_1              0x0    /* 0b	[5] */
1761_IC_1_REG.h (inc):#define R37_DACC0_DE_EMPH_FILTER_ENA_IC_1_MASK    0x4
1761_IC_1_REG.h (inc):#define R37_DACC0_DE_EMPH_FILTER_ENA_IC_1_SHIFT   2
1761_IC_1_REG.h (inc):#define R37_DACC0_INV_INPUT_POL_IC_1_MASK         0x20
1761_IC_1_REG.h (inc):#define R37_DACC0_INV_INPUT_POL_IC_1_SHIFT        5
1761_IC_1_REG.h (inc):/* Serial Port Pad Control 0 (IC 1) */
1761_IC_1_REG.h (inc):#define R40_BCLKP_IC_1                            0x2    /* 10b	[1:0] */
1761_IC_1_REG.h (inc):#define R40_LRCLKP_IC_1                           0x2    /* 10b	[3:2] */
1761_IC_1_REG.h (inc):#define R40_DACSDP_IC_1                           0x2    /* 10b	[5:4] */
1761_IC_1_REG.h (inc):#define R40_ADCSDP_IC_1                           0x2    /* 10b	[7:6] */
1761_IC_1_REG.h (inc):#define R40_BCLKP_IC_1_MASK                       0x3
1761_IC_1_REG.h (inc):#define R40_BCLKP_IC_1_SHIFT                      0
1761_IC_1_REG.h (inc):#define R40_LRCLKP_IC_1_MASK                      0xC
1761_IC_1_REG.h (inc):#define R40_LRCLKP_IC_1_SHIFT                     2
1761_IC_1_REG.h (inc):#define R40_DACSDP_IC_1_MASK                      0x30
1761_IC_1_REG.h (inc):#define R40_DACSDP_IC_1_SHIFT                     4
1761_IC_1_REG.h (inc):#define R40_ADCSDP_IC_1_MASK                      0xC0
1761_IC_1_REG.h (inc):#define R40_ADCSDP_IC_1_SHIFT                     6
1761_IC_1_REG.h (inc):/* Comm Port Pad Ctrl 0 (IC 1) */
1761_IC_1_REG.h (inc):#define R41_SDAP_PULL_UP_DOWN_IC_1                0x2    /* 10b	[1:0] */
1761_IC_1_REG.h (inc):#define R41_SCLP_PULL_UP_DOWN_IC_1                0x2    /* 10b	[3:2] */
1761_IC_1_REG.h (inc):#define R41_CLATCH_PULL_UP_DOWN_IC_1              0x2    /* 10b	[5:4] */
1761_IC_1_REG.h (inc):#define R41_CDATA_PULL_UP_DOWN_IC_1               0x2    /* 10b	[7:6] */
1761_IC_1_REG.h (inc):#define R41_SDAP_PULL_UP_DOWN_IC_1_MASK           0x3
1761_IC_1_REG.h (inc):#define R41_SDAP_PULL_UP_DOWN_IC_1_SHIFT          0
1761_IC_1_REG.h (inc):#define R41_SCLP_PULL_UP_DOWN_IC_1_MASK           0xC
1761_IC_1_REG.h (inc):#define R41_SCLP_PULL_UP_DOWN_IC_1_SHIFT          2
1761_IC_1_REG.h (inc):#define R41_CLATCH_PULL_UP_DOWN_IC_1_MASK         0x30
1761_IC_1_REG.h (inc):#define R41_CLATCH_PULL_UP_DOWN_IC_1_SHIFT        4
1761_IC_1_REG.h (inc):#define R41_CDATA_PULL_UP_DOWN_IC_1_MASK          0xC0
1761_IC_1_REG.h (inc):#define R41_CDATA_PULL_UP_DOWN_IC_1_SHIFT         6
1761_IC_1_REG.h (inc):/* Comm Port Pad Ctrl 1 (IC 1) */
1761_IC_1_REG.h (inc):#define R42_CPPC1_SDACOUT_IC_1                    0x0    /* 0b	[0] */
1761_IC_1_REG.h (inc):#define R42_CPPC1_SDACOUT_IC_1_MASK               0x1
1761_IC_1_REG.h (inc):#define R42_CPPC1_SDACOUT_IC_1_SHIFT              0
1761_IC_1_REG.h (inc):#define R43_MCLK_JACK_PULLUP_IC_1                 0x2    /* 10b	[3:2] */
1761_IC_1_REG.h (inc):#define R43_MCLK_JACK_PULLUP_IC_1_MASK            0xC
1761_IC_1_REG.h (inc):#define R43_MCLK_JACK_PULLUP_IC_1_SHIFT           2
1761_IC_1_REG.h (inc):/* GPIO 0 Control (IC 1) */
1761_IC_1_REG.h (inc):#define R50_GPIO_0_PIN_FUNCTION_IC_1              0x0    /* 0000b	[3:0] */
1761_IC_1_REG.h (inc):#define R50_GPIO_0_PIN_FUNCTION_IC_1_MASK         0xF
1761_IC_1_REG.h (inc):#define R50_GPIO_0_PIN_FUNCTION_IC_1_SHIFT        0
1761_IC_1_REG.h (inc):/* GPIO 1 Control (IC 1) */
1761_IC_1_REG.h (inc):#define R51_GPIO_1_PIN_FUNCTION_IC_1              0x0    /* 0000b	[3:0] */
1761_IC_1_REG.h (inc):#define R51_GPIO_1_PIN_FUNCTION_IC_1_MASK         0xF
1761_IC_1_REG.h (inc):#define R51_GPIO_1_PIN_FUNCTION_IC_1_SHIFT        0
1761_IC_1_REG.h (inc):/* GPIO 2 Control (IC 1) */
1761_IC_1_REG.h (inc):#define R52_GPIO_2_PIN_FUNCTION_IC_1              0x0    /* 0000b	[3:0] */
1761_IC_1_REG.h (inc):#define R52_GPIO_2_PIN_FUNCTION_IC_1_MASK         0xF
1761_IC_1_REG.h (inc):#define R52_GPIO_2_PIN_FUNCTION_IC_1_SHIFT        0
1761_IC_1_REG.h (inc):/* GPIO 3 Control (IC 1) */
1761_IC_1_REG.h (inc):#define R53_GPIO_3_PIN_FUNCTION_IC_1              0x0    /* 0000b	[3:0] */
1761_IC_1_REG.h (inc):#define R53_GPIO_3_PIN_FUNCTION_IC_1_MASK         0xF
1761_IC_1_REG.h (inc):#define R53_GPIO_3_PIN_FUNCTION_IC_1_SHIFT        0
1761_IC_1_REG.h (inc):/* Sample Rate Setting (IC 1) */
1761_IC_1_REG.h (inc):#define R61_CORE_DSP_SAMPLING_RATE_IC_1           0x1    /* 0001b	[3:0] */
1761_IC_1_REG.h (inc):#define R61_CORE_DSP_SAMPLING_RATE_IC_1_MASK      0xF
1761_IC_1_REG.h (inc):#define R61_CORE_DSP_SAMPLING_RATE_IC_1_SHIFT     0
1761_IC_1_REG.h (inc):/* Routing Matrix Inputs (IC 1) */
1761_IC_1_REG.h (inc):/* Routing Matrix Outputs (IC 1) */
1761_IC_1_REG.h (inc):/* Serial Data/GPIO Pin Config (IC 1) */
1761_IC_1_REG.h (inc):#define R64_GPIO_1_ENABLE_IC_1                    0x1    /* 1b	[0] */
1761_IC_1_REG.h (inc):#define R64_GPIO_0_ENABLE_IC_1                    0x0    /* 0b	[1] */
1761_IC_1_REG.h (inc):#define R64_GPIO_2_ENABLE_IC_1                    0x0    /* 0b	[2] */
1761_IC_1_REG.h (inc):#define R64_GPIO_3_ENABLE_IC_1                    0x0    /* 0b	[3] */
1761_IC_1_REG.h (inc):#define R64_GPIO_1_ENABLE_IC_1_MASK               0x1
1761_IC_1_REG.h (inc):#define R64_GPIO_1_ENABLE_IC_1_SHIFT              0
1761_IC_1_REG.h (inc):#define R64_GPIO_0_ENABLE_IC_1_MASK               0x2
1761_IC_1_REG.h (inc):#define R64_GPIO_0_ENABLE_IC_1_SHIFT              1
1761_IC_1_REG.h (inc):#define R64_GPIO_2_ENABLE_IC_1_MASK               0x4
1761_IC_1_REG.h (inc):#define R64_GPIO_2_ENABLE_IC_1_SHIFT              2
1761_IC_1_REG.h (inc):#define R64_GPIO_3_ENABLE_IC_1_MASK               0x8
1761_IC_1_REG.h (inc):#define R64_GPIO_3_ENABLE_IC_1_SHIFT              3
1761_IC_1_REG.h (inc):/* DSP Enable Register (IC 1) */
1761_IC_1_REG.h (inc):#define R65_DSP_ENABLE_IC_1                       0x1    /* 1b	[0] */
1761_IC_1_REG.h (inc):#define R65_DSP_ENABLE_IC_1_MASK                  0x1
1761_IC_1_REG.h (inc):#define R65_DSP_ENABLE_IC_1_SHIFT                 0
1761_IC_1_REG.h (inc):/* DSP Run Register (IC 1) */
1761_IC_1_REG.h (inc):#define R66_DSP_RUN_IC_1                          0x1    /* 1b	[0] */
1761_IC_1_REG.h (inc):#define R66_DSP_RUN_IC_1_MASK                     0x1
1761_IC_1_REG.h (inc):#define R66_DSP_RUN_IC_1_SHIFT                    0
1761_IC_1_REG.h (inc):/* DSP Slew Modes (IC 1) */
1761_IC_1_REG.h (inc):#define R67_HEADPHONE_LEFT_IC_1                   0x0    /* 0b	[0] */
1761_IC_1_REG.h (inc):#define R67_HEADPHONE_RIGHT_IC_1                  0x0    /* 0b	[1] */
1761_IC_1_REG.h (inc):#define R67_HEADPHONE_LEFT_IC_1_MASK              0x1
1761_IC_1_REG.h (inc):#define R67_HEADPHONE_LEFT_IC_1_SHIFT             0
1761_IC_1_REG.h (inc):#define R67_HEADPHONE_RIGHT_IC_1_MASK             0x2
1761_IC_1_REG.h (inc):#define R67_HEADPHONE_RIGHT_IC_1_SHIFT            1
1761_IC_1_REG.h (inc):/* Serial Port Sample Rate Setting (IC 1) */
1761_IC_1_REG.h (inc):#define R68_SERIAL_PORT_SMPL_RTE_IC_1             0x0    /* 000b	[2:0] */
1761_IC_1_REG.h (inc):#define R68_SERIAL_PORT_SMPL_RTE_IC_1_MASK        0x7
1761_IC_1_REG.h (inc):#define R68_SERIAL_PORT_SMPL_RTE_IC_1_SHIFT       0
1761_IC_1_REG.h (inc):#define R69_SERIAL_PORT_IC_1                      0x1    /* 1b	[0] */
1761_IC_1_REG.h (inc):#define R69_INTERPOLATOR_RESYNC_IC_1              0x1    /* 1b	[2] */
1761_IC_1_REG.h (inc):#define R69_SERIAL_PORT_IC_1_MASK                 0x1
1761_IC_1_REG.h (inc):#define R69_SERIAL_PORT_IC_1_SHIFT                0
1761_IC_1_REG.h (inc):#define R69_INTERPOLATOR_RESYNC_IC_1_MASK         0x4
1761_IC_1_REG.h (inc):#define R69_INTERPOLATOR_RESYNC_IC_1_SHIFT        2
Core_cm0.c (lib\src): * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Source File
Core_cm0.c (lib\src): * Copyright (C) 2009 ARM Limited. All rights reserved.
Core_cm0.c (lib\src): * @par
Core_cm0.c (lib\src): * ARM Limited (ARM) is supplying this software for use with Cortex-M 
Core_cm0.c (lib\src): * processor based microcontrollers.  This file can be freely distributed 
Core_cm0.c (lib\src): * within development tools that are supporting such ARM based processors. 
Core_cm0.c (lib\src): * @par
Core_cm0.c (lib\src): * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
Core_cm0.c (lib\src): * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
Core_cm0.c (lib\src): * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
Core_cm0.c (lib\src): * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
Core_cm0.c (lib\src):/* define compiler specific symbols */
Core_cm0.c (lib\src):  #define __ASM            __asm                                      /*!< asm keyword for ARM Compiler          */
Core_cm0.c (lib\src):  #define __INLINE         __inline                                   /*!< inline keyword for ARM Compiler       */
Core_cm0.c (lib\src):  #define __ASM           __asm                                       /*!< asm keyword for IAR Compiler          */
Core_cm0.c (lib\src):  #define __INLINE        inline                                      /*!< inline keyword for IAR Compiler. Only avaiable in High optimization mode! */
Core_cm0.c (lib\src):  #define __ASM            __asm                                      /*!< asm keyword for GNU Compiler          */
Core_cm0.c (lib\src):  #define __INLINE         inline                                     /*!< inline keyword for GNU Compiler       */
Core_cm0.c (lib\src):  #define __ASM            __asm                                      /*!< asm keyword for TASKING Compiler      */
Core_cm0.c (lib\src):  #define __INLINE         inline                                     /*!< inline keyword for TASKING Compiler   */
Core_cm0.c (lib\src):/* ###################  Compiler specific Intrinsics  ########################### */
Core_cm0.c (lib\src):#if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
Core_cm0.c (lib\src):/* ARM armcc specific functions */
Core_cm0.c (lib\src): * @brief  Return the Process Stack Pointer
Core_cm0.c (lib\src): * @return ProcessStackPointer
Core_cm0.c (lib\src): * Return the actual process stack pointer
Core_cm0.c (lib\src):__ASM uint32_t __get_PSP(void)
Core_cm0.c (lib\src):  mrs r0, psp
Core_cm0.c (lib\src): * @brief  Set the Process Stack Pointer
Core_cm0.c (lib\src): * @param  topOfProcStack  Process Stack Pointer
Core_cm0.c (lib\src): * Assign the value ProcessStackPointer to the MSP 
Core_cm0.c (lib\src): * (process stack pointer) Cortex processor register
Core_cm0.c (lib\src):__ASM void __set_PSP(uint32_t topOfProcStack)
Core_cm0.c (lib\src):  msr psp, r0
Core_cm0.c (lib\src): * @brief  Return the Main Stack Pointer
Core_cm0.c (lib\src): * @return Main Stack Pointer
Core_cm0.c (lib\src): * Return the current value of the MSP (main stack pointer)
Core_cm0.c (lib\src): * Cortex processor register
Core_cm0.c (lib\src):__ASM uint32_t __get_MSP(void)
Core_cm0.c (lib\src):  mrs r0, msp
Core_cm0.c (lib\src): * @brief  Set the Main Stack Pointer
Core_cm0.c (lib\src): * @param  topOfMainStack  Main Stack Pointer
Core_cm0.c (lib\src): * Assign the value mainStackPointer to the MSP 
Core_cm0.c (lib\src): * (main stack pointer) Cortex processor register
Core_cm0.c (lib\src):__ASM void __set_MSP(uint32_t mainStackPointer)
Core_cm0.c (lib\src):  msr msp, r0
Core_cm0.c (lib\src): * @param   value  value to reverse
Core_cm0.c (lib\src): * @param   value  value to reverse
Core_cm0.c (lib\src): * @brief  Return the Priority Mask value
Core_cm0.c (lib\src): * @return PriMask
Core_cm0.c (lib\src): * Return state of the priority mask bit from the priority mask register
Core_cm0.c (lib\src):__ASM uint32_t __get_PRIMASK(void)
Core_cm0.c (lib\src):  mrs r0, primask
Core_cm0.c (lib\src): * @brief  Set the Priority Mask value
Core_cm0.c (lib\src): * @param  priMask  PriMask
Core_cm0.c (lib\src): * Set the priority mask bit in the priority mask register
Core_cm0.c (lib\src):__ASM void __set_PRIMASK(uint32_t priMask)
Core_cm0.c (lib\src):  msr primask, r0
Core_cm0.c (lib\src): * @param  control  Control value
Core_cm0.c (lib\src):#elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
Core_cm0.c (lib\src):/* IAR iccarm specific functions */
Core_cm0.c (lib\src):#pragma diag_suppress=Pe940
Core_cm0.c (lib\src): * @brief  Return the Process Stack Pointer
Core_cm0.c (lib\src): * @return ProcessStackPointer
Core_cm0.c (lib\src): * Return the actual process stack pointer
Core_cm0.c (lib\src):uint32_t __get_PSP(void)
Core_cm0.c (lib\src):  __ASM("mrs r0, psp");
Core_cm0.c (lib\src): * @brief  Set the Process Stack Pointer
Core_cm0.c (lib\src): * @param  topOfProcStack  Process Stack Pointer
Core_cm0.c (lib\src): * Assign the value ProcessStackPointer to the MSP 
Core_cm0.c (lib\src): * (process stack pointer) Cortex processor register
Core_cm0.c (lib\src):void __set_PSP(uint32_t topOfProcStack)
Core_cm0.c (lib\src):  __ASM("msr psp, r0");
Core_cm0.c (lib\src): * @brief  Return the Main Stack Pointer
Core_cm0.c (lib\src): * @return Main Stack Pointer
Core_cm0.c (lib\src): * Return the current value of the MSP (main stack pointer)
Core_cm0.c (lib\src): * Cortex processor register
Core_cm0.c (lib\src):uint32_t __get_MSP(void)
Core_cm0.c (lib\src):  __ASM("mrs r0, msp");
Core_cm0.c (lib\src): * @brief  Set the Main Stack Pointer
Core_cm0.c (lib\src): * @param  topOfMainStack  Main Stack Pointer
Core_cm0.c (lib\src): * Assign the value mainStackPointer to the MSP 
Core_cm0.c (lib\src): * (main stack pointer) Cortex processor register
Core_cm0.c (lib\src):void __set_MSP(uint32_t topOfMainStack)
Core_cm0.c (lib\src):  __ASM("msr msp, r0");
Core_cm0.c (lib\src): * @param  value  value to reverse
Core_cm0.c (lib\src):#pragma diag_default=Pe940
Core_cm0.c (lib\src):#elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
Core_cm0.c (lib\src):/* GNU gcc specific functions */
Core_cm0.c (lib\src): * @brief  Return the Process Stack Pointer
Core_cm0.c (lib\src): * @return ProcessStackPointer
Core_cm0.c (lib\src): * Return the actual process stack pointer
Core_cm0.c (lib\src):uint32_t __get_PSP(void) __attribute__( ( naked ) );
Core_cm0.c (lib\src):uint32_t __get_PSP(void)
Core_cm0.c (lib\src):  __ASM volatile ("MRS %0, psp\n\t" 
Core_cm0.c (lib\src): * @brief  Set the Process Stack Pointer
Core_cm0.c (lib\src): * @param  topOfProcStack  Process Stack Pointer
Core_cm0.c (lib\src): * Assign the value ProcessStackPointer to the MSP 
Core_cm0.c (lib\src): * (process stack pointer) Cortex processor register
Core_cm0.c (lib\src):void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
Core_cm0.c (lib\src):void __set_PSP(uint32_t topOfProcStack)
Core_cm0.c (lib\src):  __ASM volatile ("MSR psp, %0\n\t"
Core_cm0.c (lib\src):                  "BX  lr     \n\t" : : "r" (topOfProcStack) );
Core_cm0.c (lib\src): * @brief  Return the Main Stack Pointer
Core_cm0.c (lib\src): * @return Main Stack Pointer
Core_cm0.c (lib\src): * Return the current value of the MSP (main stack pointer)
Core_cm0.c (lib\src): * Cortex processor register
Core_cm0.c (lib\src):uint32_t __get_MSP(void) __attribute__( ( naked ) );
Core_cm0.c (lib\src):uint32_t __get_MSP(void)
Core_cm0.c (lib\src):  __ASM volatile ("MRS %0, msp\n\t" 
Core_cm0.c (lib\src): * @brief  Set the Main Stack Pointer
Core_cm0.c (lib\src): * @param  topOfMainStack  Main Stack Pointer
Core_cm0.c (lib\src): * Assign the value mainStackPointer to the MSP 
Core_cm0.c (lib\src): * (main stack pointer) Cortex processor register
Core_cm0.c (lib\src):void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
Core_cm0.c (lib\src):void __set_MSP(uint32_t topOfMainStack)
Core_cm0.c (lib\src):  __ASM volatile ("MSR msp, %0\n\t"
Core_cm0.c (lib\src):                  "BX  lr     \n\t" : : "r" (topOfMainStack) );
Core_cm0.c (lib\src): * @brief  Return the Priority Mask value
Core_cm0.c (lib\src): * @return PriMask
Core_cm0.c (lib\src): * Return state of the priority mask bit from the priority mask register
Core_cm0.c (lib\src):uint32_t __get_PRIMASK(void)
Core_cm0.c (lib\src):  __ASM volatile ("MRS %0, primask" : "=r" (result) );
Core_cm0.c (lib\src): * @brief  Set the Priority Mask value
Core_cm0.c (lib\src): * @param  priMask  PriMask
Core_cm0.c (lib\src): * Set the priority mask bit in the priority mask register
Core_cm0.c (lib\src):void __set_PRIMASK(uint32_t priMask)
Core_cm0.c (lib\src):  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
Core_cm0.c (lib\src): * @param  control  Control value
Core_cm0.c (lib\src): * @param  value  value to reverse
Core_cm0.c (lib\src): * @param  value  value to reverse
Core_cm0.c (lib\src): * @param  value  value to reverse
Core_cm0.c (lib\src):#elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
Core_cm0.c (lib\src):/* TASKING carm specific functions */
Core_cm0.c (lib\src): * The CMSIS functions have been implemented as intrinsics in the compiler.
Core_cm0.c (lib\src): * Please use "carm -?i" to get an up to date list of all instrinsics,
Core_cm0.h (lib\inc): * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
Core_cm0.h (lib\inc): * Copyright (C) 2009 ARM Limited. All rights reserved.
Core_cm0.h (lib\inc): * @par
Core_cm0.h (lib\inc): * ARM Limited (ARM) is supplying this software for use with Cortex-M 
Core_cm0.h (lib\inc): * processor based microcontrollers.  This file can be freely distributed 
Core_cm0.h (lib\inc): * within development tools that are supporting such ARM based processors. 
Core_cm0.h (lib\inc): * @par
Core_cm0.h (lib\inc): * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
Core_cm0.h (lib\inc): * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
Core_cm0.h (lib\inc): * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
Core_cm0.h (lib\inc): * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
Core_cm0.h (lib\inc):/** @addtogroup CMSIS_CM0_core_LintCinfiguration CMSIS CM0 Core Lint Configuration
Core_cm0.h (lib\inc): * List of Lint messages which will be suppressed and not shown:
Core_cm0.h (lib\inc): * Note:  To re-enable a Message, insert a space before 'lint' *
Core_cm0.h (lib\inc):/** @addtogroup CMSIS_CM0_core_definitions CM0 Core Definitions
Core_cm0.h (lib\inc):    - Cortex-M core peripheral base address
Core_cm0.h (lib\inc):#ifdef __cplusplus
Core_cm0.h (lib\inc):#include <stdint.h>                           /* Include standard types */
Core_cm0.h (lib\inc):#ifndef __NVIC_PRIO_BITS
Core_cm0.h (lib\inc):  #define __NVIC_PRIO_BITS    2               /*!< standard definition for NVIC Priority Bits */
Core_cm0.h (lib\inc): * define access restrictions to peripheral registers
Core_cm0.h (lib\inc):#ifdef __cplusplus
Core_cm0.h (lib\inc):  #define     __I     volatile                /*!< defines 'read only' permissions      */
Core_cm0.h (lib\inc):  #define     __I     volatile const          /*!< defines 'read only' permissions      */
Core_cm0.h (lib\inc):#define     __O     volatile                  /*!< defines 'write only' permissions     */
Core_cm0.h (lib\inc):#define     __IO    volatile                  /*!< defines 'read / write' permissions   */
Core_cm0.h (lib\inc):/** @addtogroup CMSIS_CM0_core_register CMSIS CM0 Core Register
Core_cm0.h (lib\inc):/** @addtogroup CMSIS_CM0_NVIC CMSIS CM0 NVIC
Core_cm0.h (lib\inc):  memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
Core_cm0.h (lib\inc):typedef struct
Core_cm0.h (lib\inc):  __IO uint32_t ISER[1];                      /*!< (Offset: 0x000) Interrupt Set Enable Register            */
Core_cm0.h (lib\inc):  __IO uint32_t ICER[1];                      /*!< (Offset: 0x080) Interrupt Clear Enable Register          */
Core_cm0.h (lib\inc):  __IO uint32_t ISPR[1];                      /*!< (Offset: 0x100) Interrupt Set Pending Register           */
Core_cm0.h (lib\inc):  __IO uint32_t ICPR[1];                      /*!< (Offset: 0x180) Interrupt Clear Pending Register         */
Core_cm0.h (lib\inc):  __IO uint32_t IPR[8];                       /*!< (Offset: 0x3EC) Interrupt Priority Register              */
Core_cm0.h (lib\inc):}  NVIC_Type;
Core_cm0.h (lib\inc):/*@}*/ /* end of group CMSIS_CM0_NVIC */
Core_cm0.h (lib\inc):/** @addtogroup CMSIS_CM0_SCB CMSIS CM0 SCB
Core_cm0.h (lib\inc):  memory mapped structure for System Control Block (SCB)
Core_cm0.h (lib\inc):typedef struct
Core_cm0.h (lib\inc):  __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register                                  */
Core_cm0.h (lib\inc):  __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register                      */
Core_cm0.h (lib\inc):  __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Control Register        */
Core_cm0.h (lib\inc):  __IO uint32_t SHP[2];                       /*!< Offset: 0x1C  System Handlers Priority Registers. [0] is RESERVED   */
Core_cm0.h (lib\inc):} SCB_Type;                                                
Core_cm0.h (lib\inc):/* SCB CPUID Register Definitions */
Core_cm0.h (lib\inc):#define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB CPUID: IMPLEMENTER Position */
Core_cm0.h (lib\inc):#define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB CPUID: IMPLEMENTER Mask */
Core_cm0.h (lib\inc):#define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB CPUID: VARIANT Position */
Core_cm0.h (lib\inc):#define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB CPUID: VARIANT Mask */
Core_cm0.h (lib\inc):#define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB CPUID: ARCHITECTURE Position */
Core_cm0.h (lib\inc):#define SCB_CPUID_ARCHITECTURE_Msk         (0xFul << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB CPUID: ARCHITECTURE Mask */
Core_cm0.h (lib\inc):#define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB CPUID: PARTNO Position */
Core_cm0.h (lib\inc):#define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB CPUID: PARTNO Mask */
Core_cm0.h (lib\inc):#define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB CPUID: REVISION Position */
Core_cm0.h (lib\inc):#define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB CPUID: REVISION Mask */
Core_cm0.h (lib\inc):/* SCB Interrupt Control State Register Definitions */
Core_cm0.h (lib\inc):#define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB ICSR: NMIPENDSET Position */
Core_cm0.h (lib\inc):#define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB ICSR: NMIPENDSET Mask */
Core_cm0.h (lib\inc):#define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB ICSR: PENDSVSET Position */
Core_cm0.h (lib\inc):#define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB ICSR: PENDSVSET Mask */
Core_cm0.h (lib\inc):#define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB ICSR: PENDSVCLR Position */
Core_cm0.h (lib\inc):#define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB ICSR: PENDSVCLR Mask */
Core_cm0.h (lib\inc):#define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB ICSR: PENDSTSET Position */
Core_cm0.h (lib\inc):#define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB ICSR: PENDSTSET Mask */
Core_cm0.h (lib\inc):#define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB ICSR: PENDSTCLR Position */
Core_cm0.h (lib\inc):#define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB ICSR: PENDSTCLR Mask */
Core_cm0.h (lib\inc):#define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB ICSR: ISRPREEMPT Position */
Core_cm0.h (lib\inc):#define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB ICSR: ISRPREEMPT Mask */
Core_cm0.h (lib\inc):#define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB ICSR: ISRPENDING Position */
Core_cm0.h (lib\inc):#define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB ICSR: ISRPENDING Mask */
Core_cm0.h (lib\inc):#define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB ICSR: VECTPENDING Position */
Core_cm0.h (lib\inc):#define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB ICSR: VECTPENDING Mask */
Core_cm0.h (lib\inc):#define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB ICSR: VECTACTIVE Position */
Core_cm0.h (lib\inc):#define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB ICSR: VECTACTIVE Mask */
Core_cm0.h (lib\inc):/* SCB Application Interrupt and Reset Control Register Definitions */
Core_cm0.h (lib\inc):#define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB AIRCR: VECTKEY Position */
Core_cm0.h (lib\inc):#define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB AIRCR: VECTKEY Mask */
Core_cm0.h (lib\inc):#define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB AIRCR: VECTKEYSTAT Position */
Core_cm0.h (lib\inc):#define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB AIRCR: VECTKEYSTAT Mask */
Core_cm0.h (lib\inc):#define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB AIRCR: ENDIANESS Position */
Core_cm0.h (lib\inc):#define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB AIRCR: ENDIANESS Mask */
Core_cm0.h (lib\inc):#define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB AIRCR: SYSRESETREQ Position */
Core_cm0.h (lib\inc):#define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB AIRCR: SYSRESETREQ Mask */
Core_cm0.h (lib\inc):#define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB AIRCR: VECTCLRACTIVE Position */
Core_cm0.h (lib\inc):#define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB AIRCR: VECTCLRACTIVE Mask */
Core_cm0.h (lib\inc):#define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB SCR: SEVONPEND Position */
Core_cm0.h (lib\inc):#define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB SCR: SEVONPEND Mask */
Core_cm0.h (lib\inc):#define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB SCR: SLEEPDEEP Position */
Core_cm0.h (lib\inc):#define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB SCR: SLEEPDEEP Mask */
Core_cm0.h (lib\inc):#define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB SCR: SLEEPONEXIT Position */
Core_cm0.h (lib\inc):#define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB SCR: SLEEPONEXIT Mask */
Core_cm0.h (lib\inc):#define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB CCR: STKALIGN Position */
Core_cm0.h (lib\inc):#define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB CCR: STKALIGN Mask */
Core_cm0.h (lib\inc):#define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB CCR: UNALIGN_TRP Position */
Core_cm0.h (lib\inc):#define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB CCR: UNALIGN_TRP Mask */
Core_cm0.h (lib\inc):#define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB SHCSR: SVCALLPENDED Position */
Core_cm0.h (lib\inc):#define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB SHCSR: SVCALLPENDED Mask */
Core_cm0.h (lib\inc):#define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB DFSR: EXTERNAL Position */
Core_cm0.h (lib\inc):#define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB DFSR: EXTERNAL Mask */
Core_cm0.h (lib\inc):#define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB DFSR: VCATCH Position */
Core_cm0.h (lib\inc):#define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB DFSR: VCATCH Mask */
Core_cm0.h (lib\inc):#define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB DFSR: DWTTRAP Position */
Core_cm0.h (lib\inc):#define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB DFSR: DWTTRAP Mask */
Core_cm0.h (lib\inc):#define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB DFSR: BKPT Position */
Core_cm0.h (lib\inc):#define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB DFSR: BKPT Mask */
Core_cm0.h (lib\inc):#define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB DFSR: HALTED Position */
Core_cm0.h (lib\inc):#define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB DFSR: HALTED Mask */
Core_cm0.h (lib\inc):/*@}*/ /* end of group CMSIS_CM0_SCB */
Core_cm0.h (lib\inc):/** @addtogroup CMSIS_CM0_SysTick CMSIS CM0 SysTick
Core_cm0.h (lib\inc):  memory mapped structure for SysTick
Core_cm0.h (lib\inc):typedef struct
Core_cm0.h (lib\inc):} SysTick_Type;
Core_cm0.h (lib\inc):#define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysTick CTRL: COUNTFLAG Position */
Core_cm0.h (lib\inc):#define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysTick CTRL: COUNTFLAG Mask */
Core_cm0.h (lib\inc):#define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysTick CTRL: CLKSOURCE Position */
Core_cm0.h (lib\inc):#define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysTick CTRL: CLKSOURCE Mask */
Core_cm0.h (lib\inc):#define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysTick CTRL: TICKINT Position */
Core_cm0.h (lib\inc):#define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysTick CTRL: TICKINT Mask */
Core_cm0.h (lib\inc):#define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysTick CTRL: ENABLE Position */
Core_cm0.h (lib\inc):#define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysTick CTRL: ENABLE Mask */
Core_cm0.h (lib\inc):#define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysTick LOAD: RELOAD Position */
Core_cm0.h (lib\inc):#define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysTick LOAD: RELOAD Mask */
Core_cm0.h (lib\inc):#define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysTick VAL: CURRENT Position */
Core_cm0.h (lib\inc):#define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysTick VAL: CURRENT Mask */
Core_cm0.h (lib\inc):#define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysTick CALIB: NOREF Position */
Core_cm0.h (lib\inc):#define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysTick CALIB: NOREF Mask */
Core_cm0.h (lib\inc):#define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysTick CALIB: SKEW Position */
Core_cm0.h (lib\inc):#define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysTick CALIB: SKEW Mask */
Core_cm0.h (lib\inc):#define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysTick CALIB: TENMS Position */
Core_cm0.h (lib\inc):#define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysTick CALIB: TENMS Mask */
Core_cm0.h (lib\inc):/*@}*/ /* end of group CMSIS_CM0_SysTick */
Core_cm0.h (lib\inc):/** @addtogroup CMSIS_CM0_CoreDebug CMSIS CM0 Core Debug
Core_cm0.h (lib\inc):  memory mapped structure for Core Debug Register
Core_cm0.h (lib\inc):typedef struct
Core_cm0.h (lib\inc):  __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Control Register */
Core_cm0.h (lib\inc):} CoreDebug_Type;
Core_cm0.h (lib\inc):#define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< CoreDebug DHCSR: DBGKEY Position */
Core_cm0.h (lib\inc):#define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< CoreDebug DHCSR: DBGKEY Mask */
Core_cm0.h (lib\inc):#define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< CoreDebug DHCSR: S_RESET_ST Position */
Core_cm0.h (lib\inc):#define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< CoreDebug DHCSR: S_RESET_ST Mask */
Core_cm0.h (lib\inc):#define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< CoreDebug DHCSR: S_RETIRE_ST Position */
Core_cm0.h (lib\inc):#define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< CoreDebug DHCSR: S_RETIRE_ST Mask */
Core_cm0.h (lib\inc):#define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< CoreDebug DHCSR: S_LOCKUP Position */
Core_cm0.h (lib\inc):#define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< CoreDebug DHCSR: S_LOCKUP Mask */
Core_cm0.h (lib\inc):#define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< CoreDebug DHCSR: S_SLEEP Position */
Core_cm0.h (lib\inc):#define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< CoreDebug DHCSR: S_SLEEP Mask */
Core_cm0.h (lib\inc):#define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< CoreDebug DHCSR: S_HALT Position */
Core_cm0.h (lib\inc):#define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< CoreDebug DHCSR: S_HALT Mask */
Core_cm0.h (lib\inc):#define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< CoreDebug DHCSR: S_REGRDY Position */
Core_cm0.h (lib\inc):#define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< CoreDebug DHCSR: S_REGRDY Mask */
Core_cm0.h (lib\inc):#define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< CoreDebug DHCSR: C_MASKINTS Position */
Core_cm0.h (lib\inc):#define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< CoreDebug DHCSR: C_MASKINTS Mask */
Core_cm0.h (lib\inc):#define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< CoreDebug DHCSR: C_STEP Position */
Core_cm0.h (lib\inc):#define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< CoreDebug DHCSR: C_STEP Mask */
Core_cm0.h (lib\inc):#define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< CoreDebug DHCSR: C_HALT Position */
Core_cm0.h (lib\inc):#define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< CoreDebug DHCSR: C_HALT Mask */
Core_cm0.h (lib\inc):#define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< CoreDebug DHCSR: C_DEBUGEN Position */
Core_cm0.h (lib\inc):#define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< CoreDebug DHCSR: C_DEBUGEN Mask */
Core_cm0.h (lib\inc):#define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< CoreDebug DCRSR: REGWnR Position */
Core_cm0.h (lib\inc):#define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< CoreDebug DCRSR: REGWnR Mask */
Core_cm0.h (lib\inc):#define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< CoreDebug DCRSR: REGSEL Position */
Core_cm0.h (lib\inc):#define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< CoreDebug DCRSR: REGSEL Mask */
Core_cm0.h (lib\inc):/* Debug Exception and Monitor Control Register */
Core_cm0.h (lib\inc):#define CoreDebug_DEMCR_DWTENA_Pos         24                                             /*!< CoreDebug DEMCR: DWTENA Position */
Core_cm0.h (lib\inc):#define CoreDebug_DEMCR_DWTENA_Msk         (1ul << CoreDebug_DEMCR_DWTENA_Pos)            /*!< CoreDebug DEMCR: DWTENA Mask */
Core_cm0.h (lib\inc):#define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< CoreDebug DEMCR: VC_HARDERR Position */
Core_cm0.h (lib\inc):#define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< CoreDebug DEMCR: VC_HARDERR Mask */
Core_cm0.h (lib\inc):#define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< CoreDebug DEMCR: VC_CORERESET Position */
Core_cm0.h (lib\inc):#define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< CoreDebug DEMCR: VC_CORERESET Mask */
Core_cm0.h (lib\inc):/*@}*/ /* end of group CMSIS_CM0_CoreDebug */
Core_cm0.h (lib\inc):/* Memory mapping of Cortex-M0 Hardware */
Core_cm0.h (lib\inc):#define SCS_BASE            (0xE000E000)                              /*!< System Control Space Base Address */
Core_cm0.h (lib\inc):#define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct          */
Core_cm0.h (lib\inc):#define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration struct      */
Core_cm0.h (lib\inc):#define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struct         */
Core_cm0.h (lib\inc):#define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration struct   */
Core_cm0.h (lib\inc):/*@}*/ /* end of group CMSIS_CM0_core_register */
Core_cm0.h (lib\inc):  #define __ASM            __asm                                      /*!< asm keyword for ARM Compiler          */
Core_cm0.h (lib\inc):  #define __INLINE         __inline                                   /*!< inline keyword for ARM Compiler       */
Core_cm0.h (lib\inc):  #define __ASM           __asm                                       /*!< asm keyword for IAR Compiler          */
Core_cm0.h (lib\inc):  #define __INLINE        inline                                      /*!< inline keyword for IAR Compiler. Only avaiable in High optimization mode! */
Core_cm0.h (lib\inc):  #define __ASM            __asm                                      /*!< asm keyword for GNU Compiler          */
Core_cm0.h (lib\inc):  #define __INLINE         inline                                     /*!< inline keyword for GNU Compiler       */
Core_cm0.h (lib\inc):  #define __ASM            __asm                                      /*!< asm keyword for TASKING Compiler      */
Core_cm0.h (lib\inc):  #define __INLINE         inline                                     /*!< inline keyword for TASKING Compiler   */
Core_cm0.h (lib\inc):/* ###################  Compiler specific Intrinsics  ########################### */
Core_cm0.h (lib\inc):#if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
Core_cm0.h (lib\inc):/* ARM armcc specific functions */
Core_cm0.h (lib\inc):#define __NOP                             __nop
Core_cm0.h (lib\inc): * @brief  Return the Process Stack Pointer
Core_cm0.h (lib\inc): * @return ProcessStackPointer
Core_cm0.h (lib\inc): * Return the actual process stack pointer
Core_cm0.h (lib\inc):extern uint32_t __get_PSP(void);
Core_cm0.h (lib\inc): * @brief  Set the Process Stack Pointer
Core_cm0.h (lib\inc): * @param  topOfProcStack  Process Stack Pointer
Core_cm0.h (lib\inc): * Assign the value ProcessStackPointer to the MSP 
Core_cm0.h (lib\inc): * (process stack pointer) Cortex processor register
Core_cm0.h (lib\inc):extern void __set_PSP(uint32_t topOfProcStack);
Core_cm0.h (lib\inc): * @brief  Return the Main Stack Pointer
Core_cm0.h (lib\inc): * @return Main Stack Pointer
Core_cm0.h (lib\inc): * Return the current value of the MSP (main stack pointer)
Core_cm0.h (lib\inc): * Cortex processor register
Core_cm0.h (lib\inc):extern uint32_t __get_MSP(void);
Core_cm0.h (lib\inc): * @brief  Set the Main Stack Pointer
Core_cm0.h (lib\inc): * @param  topOfMainStack  Main Stack Pointer
Core_cm0.h (lib\inc): * Assign the value mainStackPointer to the MSP 
Core_cm0.h (lib\inc): * (main stack pointer) Cortex processor register
Core_cm0.h (lib\inc):extern void __set_MSP(uint32_t topOfMainStack);
Core_cm0.h (lib\inc): * @param   value  value to reverse
Core_cm0.h (lib\inc): * @param   value  value to reverse
Core_cm0.h (lib\inc): * @brief  Return the Priority Mask value
Core_cm0.h (lib\inc): * @return PriMask
Core_cm0.h (lib\inc): * Return state of the priority mask bit from the priority mask register
Core_cm0.h (lib\inc):extern uint32_t __get_PRIMASK(void);
Core_cm0.h (lib\inc): * @brief  Set the Priority Mask value
Core_cm0.h (lib\inc): * @param   priMask  PriMask
Core_cm0.h (lib\inc): * Set the priority mask bit in the priority mask register
Core_cm0.h (lib\inc):extern void __set_PRIMASK(uint32_t priMask);
Core_cm0.h (lib\inc): * @param  control  Control value
Core_cm0.h (lib\inc): * @brief  Return the Priority Mask value
Core_cm0.h (lib\inc): * @return PriMask
Core_cm0.h (lib\inc): * Return state of the priority mask bit from the priority mask register
Core_cm0.h (lib\inc):static __INLINE uint32_t __get_PRIMASK(void)
Core_cm0.h (lib\inc):  register uint32_t __regPriMask         __ASM("primask");
Core_cm0.h (lib\inc):  return(__regPriMask);
Core_cm0.h (lib\inc): * @brief  Set the Priority Mask value
Core_cm0.h (lib\inc): * @param  priMask  PriMask
Core_cm0.h (lib\inc): * Set the priority mask bit in the priority mask register
Core_cm0.h (lib\inc):static __INLINE void __set_PRIMASK(uint32_t priMask)
Core_cm0.h (lib\inc):  register uint32_t __regPriMask         __ASM("primask");
Core_cm0.h (lib\inc):  __regPriMask = (priMask);
Core_cm0.h (lib\inc): * @param  control  Control value
Core_cm0.h (lib\inc):#elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
Core_cm0.h (lib\inc):/* IAR iccarm specific functions */
Core_cm0.h (lib\inc):#define __enable_irq                              __enable_interrupt        /*!< global Interrupt enable */
Core_cm0.h (lib\inc):#define __disable_irq                             __disable_interrupt       /*!< global Interrupt disable */
Core_cm0.h (lib\inc):static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
Core_cm0.h (lib\inc):static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
Core_cm0.h (lib\inc):#define __NOP                                     __no_operation            /*!< no operation intrinsic in IAR Compiler */ 
Core_cm0.h (lib\inc):/* intrinsic void __set_PRIMASK();                                */
Core_cm0.h (lib\inc):/* intrinsic void __get_PRIMASK();                                */
Core_cm0.h (lib\inc): * @brief  Return the Process Stack Pointer
Core_cm0.h (lib\inc): * @return ProcessStackPointer
Core_cm0.h (lib\inc): * Return the actual process stack pointer
Core_cm0.h (lib\inc):extern uint32_t __get_PSP(void);
Core_cm0.h (lib\inc): * @brief  Set the Process Stack Pointer
Core_cm0.h (lib\inc): * @param  topOfProcStack  Process Stack Pointer
Core_cm0.h (lib\inc): * Assign the value ProcessStackPointer to the MSP 
Core_cm0.h (lib\inc): * (process stack pointer) Cortex processor register
Core_cm0.h (lib\inc):extern void __set_PSP(uint32_t topOfProcStack);
Core_cm0.h (lib\inc): * @brief  Return the Main Stack Pointer
Core_cm0.h (lib\inc): * @return Main Stack Pointer
Core_cm0.h (lib\inc): * Return the current value of the MSP (main stack pointer)
Core_cm0.h (lib\inc): * Cortex processor register
Core_cm0.h (lib\inc):extern uint32_t __get_MSP(void);
Core_cm0.h (lib\inc): * @brief  Set the Main Stack Pointer
Core_cm0.h (lib\inc): * @param  topOfMainStack  Main Stack Pointer
Core_cm0.h (lib\inc): * Assign the value mainStackPointer to the MSP 
Core_cm0.h (lib\inc): * (main stack pointer) Cortex processor register
Core_cm0.h (lib\inc):extern void __set_MSP(uint32_t topOfMainStack);
Core_cm0.h (lib\inc): * @param  value  value to reverse
Core_cm0.h (lib\inc):#elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
Core_cm0.h (lib\inc):/* GNU gcc specific functions */
Core_cm0.h (lib\inc):static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
Core_cm0.h (lib\inc):static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
Core_cm0.h (lib\inc):static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
Core_cm0.h (lib\inc):static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
Core_cm0.h (lib\inc):static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
Core_cm0.h (lib\inc): * @brief  Return the Process Stack Pointer
Core_cm0.h (lib\inc): * @return ProcessStackPointer
Core_cm0.h (lib\inc): * Return the actual process stack pointer
Core_cm0.h (lib\inc):extern uint32_t __get_PSP(void);
Core_cm0.h (lib\inc): * @brief  Set the Process Stack Pointer
Core_cm0.h (lib\inc): * @param  topOfProcStack  Process Stack Pointer
Core_cm0.h (lib\inc): * Assign the value ProcessStackPointer to the MSP 
Core_cm0.h (lib\inc): * (process stack pointer) Cortex processor register
Core_cm0.h (lib\inc):extern void __set_PSP(uint32_t topOfProcStack);
Core_cm0.h (lib\inc): * @brief  Return the Main Stack Pointer
Core_cm0.h (lib\inc): * @return Main Stack Pointer
Core_cm0.h (lib\inc): * Return the current value of the MSP (main stack pointer)
Core_cm0.h (lib\inc): * Cortex processor register
Core_cm0.h (lib\inc):extern uint32_t __get_MSP(void);
Core_cm0.h (lib\inc): * @brief  Set the Main Stack Pointer
Core_cm0.h (lib\inc): * @param  topOfMainStack  Main Stack Pointer
Core_cm0.h (lib\inc): * Assign the value mainStackPointer to the MSP 
Core_cm0.h (lib\inc): * (main stack pointer) Cortex processor register
Core_cm0.h (lib\inc):extern void __set_MSP(uint32_t topOfMainStack);
Core_cm0.h (lib\inc): * @brief  Return the Priority Mask value
Core_cm0.h (lib\inc): * @return PriMask
Core_cm0.h (lib\inc): * Return state of the priority mask bit from the priority mask register
Core_cm0.h (lib\inc):extern uint32_t  __get_PRIMASK(void);
Core_cm0.h (lib\inc): * @brief  Set the Priority Mask value
Core_cm0.h (lib\inc): * @param  priMask  PriMask
Core_cm0.h (lib\inc): * Set the priority mask bit in the priority mask register
Core_cm0.h (lib\inc):extern void __set_PRIMASK(uint32_t priMask);
Core_cm0.h (lib\inc): * @param  control  Control value
Core_cm0.h (lib\inc): * @param  value  value to reverse
Core_cm0.h (lib\inc): * @param  value  value to reverse
Core_cm0.h (lib\inc): * @param  value  value to reverse
Core_cm0.h (lib\inc):#elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
Core_cm0.h (lib\inc):/* TASKING carm specific functions */
Core_cm0.h (lib\inc): * The CMSIS functions have been implemented as intrinsics in the compiler.
Core_cm0.h (lib\inc): * Please use "carm -?i" to get an up to date list of all instrinsics,
Core_cm0.h (lib\inc):/** @addtogroup CMSIS_CM0_Core_FunctionInterface CMSIS CM0 Core Function Interface
Core_cm0.h (lib\inc):/* Interrupt Priorities are WORD accessible only under ARMv6M                   */
Core_cm0.h (lib\inc):#define _SHP_IDX(IRQn)           ( ((((uint32_t)(IRQn) & 0x0F)-8) >>    2)     )
Core_cm0.h (lib\inc):#define _IP_IDX(IRQn)            (   ((uint32_t)(IRQn)            >>    2)     )
Core_cm0.h (lib\inc): * @brief  Enable Interrupt in NVIC Interrupt Controller
Core_cm0.h (lib\inc): * @param  IRQn   The positive number of the external interrupt to enable
Core_cm0.h (lib\inc): * Enable a device specific interupt in the NVIC interrupt controller.
Core_cm0.h (lib\inc): * The interrupt number cannot be a negative value.
Core_cm0.h (lib\inc):static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
Core_cm0.h (lib\inc):  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
Core_cm0.h (lib\inc): * @brief  Disable the interrupt line for external interrupt specified
Core_cm0.h (lib\inc): * @param  IRQn   The positive number of the external interrupt to disable
Core_cm0.h (lib\inc): * Disable a device specific interupt in the NVIC interrupt controller.
Core_cm0.h (lib\inc): * The interrupt number cannot be a negative value.
Core_cm0.h (lib\inc):static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
Core_cm0.h (lib\inc):  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
Core_cm0.h (lib\inc): * @brief  Read the interrupt pending bit for a device specific interrupt source
Core_cm0.h (lib\inc): * @param  IRQn    The number of the device specifc interrupt
Core_cm0.h (lib\inc): * @return         1 = interrupt pending, 0 = interrupt not pending
Core_cm0.h (lib\inc): * Read the pending register in NVIC and return 1 if its status is pending, 
Core_cm0.h (lib\inc):static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
Core_cm0.h (lib\inc):  return((uint32_t) ((NVIC->ISPR[0] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pending else 0 */
Core_cm0.h (lib\inc): * @brief  Set the pending bit for an external interrupt
Core_cm0.h (lib\inc): * @param  IRQn    The number of the interrupt for set pending
Core_cm0.h (lib\inc): * Set the pending bit for the specified interrupt.
Core_cm0.h (lib\inc): * The interrupt number cannot be a negative value.
Core_cm0.h (lib\inc):static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
Core_cm0.h (lib\inc):  NVIC->ISPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
Core_cm0.h (lib\inc): * @brief  Clear the pending bit for an external interrupt
Core_cm0.h (lib\inc): * @param  IRQn    The number of the interrupt for clear pending
Core_cm0.h (lib\inc): * Clear the pending bit for the specified interrupt. 
Core_cm0.h (lib\inc): * The interrupt number cannot be a negative value.
Core_cm0.h (lib\inc):static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
Core_cm0.h (lib\inc):  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
Core_cm0.h (lib\inc): * @brief  Set the priority for an interrupt
Core_cm0.h (lib\inc): * @param  IRQn      The number of the interrupt for set priority
Core_cm0.h (lib\inc): * @param  priority  The priority to set
Core_cm0.h (lib\inc): * Set the priority for the specified interrupt. The interrupt 
Core_cm0.h (lib\inc): * number can be positive to specify an external (device specific) 
Core_cm0.h (lib\inc): * interrupt, or negative to specify an internal (core) interrupt.
Core_cm0.h (lib\inc): * Note: The priority cannot be set for every core interrupt.
Core_cm0.h (lib\inc):static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
Core_cm0.h (lib\inc):    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) | 
Core_cm0.h (lib\inc):        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
Core_cm0.h (lib\inc):    NVIC->IPR[_IP_IDX(IRQn)] = (NVIC->IPR[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
Core_cm0.h (lib\inc):        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
Core_cm0.h (lib\inc): * @brief  Read the priority for an interrupt
Core_cm0.h (lib\inc): * @param  IRQn      The number of the interrupt for get priority
Core_cm0.h (lib\inc): * @return           The priority for the interrupt
Core_cm0.h (lib\inc): * Read the priority for the specified interrupt. The interrupt 
Core_cm0.h (lib\inc): * number can be positive to specify an external (device specific) 
Core_cm0.h (lib\inc): * interrupt, or negative to specify an internal (core) interrupt.
Core_cm0.h (lib\inc): * The returned priority value is automatically aligned to the implemented
Core_cm0.h (lib\inc): * priority bits of the microcontroller.
Core_cm0.h (lib\inc): * Note: The priority cannot be set for every core interrupt.
Core_cm0.h (lib\inc):static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
Core_cm0.h (lib\inc):    return((uint32_t)((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS)));  } /* get priority for Cortex-M0 system interrupts */
Core_cm0.h (lib\inc):    return((uint32_t)((NVIC->IPR[_IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS)));  } /* get priority for device specific interrupts  */
Core_cm0.h (lib\inc): * @brief  Initialize and start the SysTick counter and its interrupt.
Core_cm0.h (lib\inc): * @param   ticks   number of ticks between two interrupts
Core_cm0.h (lib\inc): * Initialise the system tick timer and its interrupt and start the
Core_cm0.h (lib\inc): * periodical interrupts.
Core_cm0.h (lib\inc):  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
Core_cm0.h (lib\inc):  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
Core_cm0.h (lib\inc):  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      | 
Core_cm0.h (lib\inc):  __DSB();                                                                             /* Ensure completion of memory access */              
Core_cm0.h (lib\inc):/*@}*/ /* end of group CMSIS_CM0_Core_FunctionInterface */
Core_cm0.h (lib\inc):#ifdef __cplusplus
Core_cm0.h (lib\inc):/*@}*/ /* end of group CMSIS_CM0_core_definitions */
DataType.h (inc):#ifndef	__DATATYPE_H
DataType.h (inc):#define	__DATATYPE_H
DataType.h (inc):struct	oper_mess_type{
DataType.h (inc):	uint8_t	type;
DataType.h (inc):	int8_t	para;
DataType.h (inc):	void (*proc_entry)(int8_t para);
DataType.h (inc)://110p
DataType.h (inc):typedef enum OPERA_MODE {
DataType.h (inc):} T_OPERA_MODE;
DataType.h (inc):typedef enum ERROR_OP {
DataType.h (inc):    LOOP_EXP_ERROR = 3,
DataType.h (inc):} T_ERROR_OP;
DataType.h (inc):typedef union
DataType.h (inc):								key_rep:1,
DataType.h (inc):}Type_Flags;
DrvFMC.c (lib\src):/* Copyright(c) 2009 Nuvoton Technology Corp. All rights reserved.                                         */
DrvFMC.c (lib\src):/* Parameters:                                                                                             */
DrvFMC.c (lib\src):/*               u32addr    - [in]      Flash address include APROM, LDROM, Data Flash, and Config         */
DrvFMC.c (lib\src):/* Description:                                                                                            */
DrvFMC.c (lib\src):/*               Write data into Flash include APROM, LDROM, Data Flash, and Config                        */
DrvFMC.c (lib\src):/*               The corresponding functions in Config0 are listed in FMC section of TRM                   */
DrvFMC.c (lib\src):/*               Please make sure that Register Write-Protection Function has been disabled before using   */
DrvFMC.c (lib\src):/*               User can check the status of Register Write-Protection Function                           */
DrvFMC.c (lib\src):/*               with DrvSYS_IsProtectedRegLocked().                                                       */
DrvFMC.c (lib\src):    FMC->ISPCMD.FCTRL = 1;
DrvFMC.c (lib\src):    FMC->ISPCMD.FCEN = 0;
DrvFMC.c (lib\src):    FMC->ISPCMD.FOEN = 1;
DrvFMC.c (lib\src):    FMC->ISPADR = u32addr;
DrvFMC.c (lib\src):    FMC->ISPDAT = u32data;
DrvFMC.c (lib\src):    FMC->ISPTRG.ISPGO = 1;  
DrvFMC.c (lib\src):    while (FMC->ISPTRG.ISPGO);
DrvFMC.c (lib\src):    if (FMC->ISPCON.ISPFF == 1)
DrvFMC.c (lib\src):        FMC->ISPCON.ISPFF = 1;
DrvFMC.c (lib\src):        return E_DRVFMC_ERR_ISP_FAIL;
DrvFMC.c (lib\src):/* Parameters:                                                                                             */
DrvFMC.c (lib\src):/*               u32addr    - [in]      Flash address include APROM, LDROM, Data Flash, and Config         */
DrvFMC.c (lib\src):/* Description:                                                                                            */
DrvFMC.c (lib\src):/*               Read data from Flash include APROM, LDROM, Data Flash, and Config                         */
DrvFMC.c (lib\src):/*               Please make sure that Register Write-Protection Function has been disabled before using   */
DrvFMC.c (lib\src):/*               User can check the status of Register Write-Protection Function                           */
DrvFMC.c (lib\src):/*               with DrvSYS_IsProtectedRegLocked().                                                       */
DrvFMC.c (lib\src):    FMC->ISPCMD.FCTRL = 0;
DrvFMC.c (lib\src):    FMC->ISPCMD.FCEN = 0;
DrvFMC.c (lib\src):    FMC->ISPCMD.FOEN = 0;
DrvFMC.c (lib\src):    FMC->ISPADR = u32addr;
DrvFMC.c (lib\src):    FMC->ISPDAT = 0;
DrvFMC.c (lib\src):    FMC->ISPTRG.ISPGO = 1;    
DrvFMC.c (lib\src):    while (FMC->ISPTRG.ISPGO);
DrvFMC.c (lib\src):    if (FMC->ISPCON.ISPFF == 1)
DrvFMC.c (lib\src):        FMC->ISPCON.ISPFF = 1;
DrvFMC.c (lib\src):        return E_DRVFMC_ERR_ISP_FAIL;
DrvFMC.c (lib\src):    *u32data = FMC->ISPDAT;
DrvFMC.c (lib\src):/* Parameters:                                                                                             */
DrvFMC.c (lib\src):/*               u32addr    - [in]      Flash page base address or Config0 address                         */
DrvFMC.c (lib\src):/* Description:                                                                                            */
DrvFMC.c (lib\src):/*             Page Erase Flash include APROM, LDROM, Data Flash, and Config. The erase unit is 512 bytes  */
DrvFMC.c (lib\src):/*             Please make sure that Register Write-Protection Function has been disabled before using     */
DrvFMC.c (lib\src):/*             User can check the status of Register Write-Protection Function                             */
DrvFMC.c (lib\src):/*             with DrvSYS_IsProtectedRegLocked().                                                         */
DrvFMC.c (lib\src):    FMC->ISPCMD.FCTRL = 2;
DrvFMC.c (lib\src):    FMC->ISPCMD.FCEN = 0;
DrvFMC.c (lib\src):    FMC->ISPCMD.FOEN = 1;
DrvFMC.c (lib\src):    FMC->ISPADR = u32addr;
DrvFMC.c (lib\src):    FMC->ISPTRG.ISPGO = 1;  
DrvFMC.c (lib\src):    while (FMC->ISPTRG.ISPGO);
DrvFMC.c (lib\src):    if (FMC->ISPCON.ISPFF == 1)
DrvFMC.c (lib\src):        FMC->ISPCON.ISPFF = 1;
DrvFMC.c (lib\src):        return E_DRVFMC_ERR_ISP_FAIL;
DrvFMC.c (lib\src):/* Function: DrvFMC_EnableISP                                                                              */
DrvFMC.c (lib\src):/* Parameters:                                                                                             */
DrvFMC.c (lib\src):/* Description:                                                                                            */
DrvFMC.c (lib\src):/*               Enable ISP function.                                                                      */
DrvFMC.c (lib\src):/*               Please make sure that Register Write-Protection Function has been disabled before using   */
DrvFMC.c (lib\src):/*               this function to enable ISP function.                                                     */
DrvFMC.c (lib\src):/*               User can check the status of Register Write-Protection Function                           */
DrvFMC.c (lib\src):/*               with DrvSYS_IsProtectedRegLocked().                                                       */
DrvFMC.c (lib\src):void DrvFMC_EnableISP(void)
DrvFMC.c (lib\src):    SYSCLK->AHBCLK.ISP_EN = 1;
DrvFMC.c (lib\src):    FMC->ISPCON.ISPEN = 1;
DrvFMC.c (lib\src):/* Function: DrvFMC_DisableISP                                                                             */
DrvFMC.c (lib\src):/* Parameters:                                                                                             */
DrvFMC.c (lib\src):/* Description:                                                                                            */
DrvFMC.c (lib\src):/*               Disable ISP function.                                                                     */
DrvFMC.c (lib\src):/*               Please make sure that Register Write-Protection Function has been disabled before using   */
DrvFMC.c (lib\src):/*               this function to disable ISP function.                                                    */
DrvFMC.c (lib\src):/*               User can check the status of Register Write-Protection Function                           */
DrvFMC.c (lib\src):/*               with DrvSYS_IsProtectedRegLocked().                                                       */
DrvFMC.c (lib\src):void DrvFMC_DisableISP(void)
DrvFMC.c (lib\src):    FMC->ISPCON.ISPEN = 0;
DrvFMC.c (lib\src):/* Parameters:                                                                                             */
DrvFMC.c (lib\src):/*               boot   - [in]      E_FMC_APROM / E_FMC_LDROM                                              */
DrvFMC.c (lib\src):/* Description:                                                                                            */
DrvFMC.c (lib\src):/*               Select next boot from APROM or LDROM                                                      */
DrvFMC.c (lib\src):/*               Please make sure that Register Write-Protection Function has been disabled before using   */
DrvFMC.c (lib\src):/*               User can check the status of Register Write-Protection Function                           */
DrvFMC.c (lib\src):/*               with DrvSYS_IsProtectedRegLocked().                                                       */
DrvFMC.c (lib\src):    FMC->ISPCON.BS = (boot)? 1: 0;
DrvFMC.c (lib\src):/* Parameters:                                                                                             */
DrvFMC.c (lib\src):/*               E_FMC_APROM      The current boot select setting is in APROM                              */
DrvFMC.c (lib\src):/* Description:                                                                                            */
DrvFMC.c (lib\src):    return (E_FMC_BOOTSELECT)FMC->ISPCON.BS;
DrvFMC.c (lib\src):/* Function: DrvFMC_EnableLDUpdate                                                                         */
DrvFMC.c (lib\src):/* Parameters:                                                                                             */
DrvFMC.c (lib\src):/* Description:                                                                                            */
DrvFMC.c (lib\src):/*               Enable LDROM update function                                                              */
DrvFMC.c (lib\src):/*               Please make sure that Register Write-Protection Function has been disabled before using   */
DrvFMC.c (lib\src):/*               this function to enable LD update function.                                               */
DrvFMC.c (lib\src):/*               User can check the status of Register Write-Protection Function                           */
DrvFMC.c (lib\src):/*               with DrvSYS_IsProtectedRegLocked().                                                       */
DrvFMC.c (lib\src):void DrvFMC_EnableLDUpdate(void)
DrvFMC.c (lib\src):    FMC->ISPCON.LDUEN = 1;
DrvFMC.c (lib\src):/* Function: DrvFMC_DisableLDUpdate                                                                        */
DrvFMC.c (lib\src):/* Parameters:                                                                                             */
DrvFMC.c (lib\src):/* Description:                                                                                            */
DrvFMC.c (lib\src):/*               Disable LDROM update function                                                             */
DrvFMC.c (lib\src):/*               Please make sure that Register Write-Protection Function has been disabled before using   */
DrvFMC.c (lib\src):/*               this function to disable LD update function.                                              */
DrvFMC.c (lib\src):/*               User can check the status of Register Write-Protection Function                           */
DrvFMC.c (lib\src):/*               with DrvSYS_IsProtectedRegLocked().                                                       */
DrvFMC.c (lib\src):void DrvFMC_DisableLDUpdate(void)
DrvFMC.c (lib\src):    FMC->ISPCON.LDUEN = 0;
DrvFMC.c (lib\src):/* Function: DrvFMC_EnableConfigUpdate                                                                     */
DrvFMC.c (lib\src):/* Parameters:                                                                                             */
DrvFMC.c (lib\src):/* Description:                                                                                            */
DrvFMC.c (lib\src):/*               Enable Config update function when MCU is running in APROM or LDROM                       */
DrvFMC.c (lib\src):/*               Please make sure that Register Write-Protection Function has been disabled before using   */
DrvFMC.c (lib\src):/*               this function to enable Config update function.                                           */
DrvFMC.c (lib\src):/*               User can check the status of Register Write-Protection Function                           */
DrvFMC.c (lib\src):/*               with DrvSYS_IsProtectedRegLocked().                                                       */
DrvFMC.c (lib\src):void DrvFMC_EnableConfigUpdate(void)
DrvFMC.c (lib\src):    FMC->ISPCON.CFGUEN = 1;
DrvFMC.c (lib\src):/* Function: DrvFMC_DisableConfigUpdate                                                                    */
DrvFMC.c (lib\src):/* Parameters:                                                                                             */
DrvFMC.c (lib\src):/* Description:                                                                                            */
DrvFMC.c (lib\src):/*               Disable Config update function when MCU is running in APROM or LDROM                      */
DrvFMC.c (lib\src):/*               Please make sure that Register Write-Protection Function has been disabled before using   */
DrvFMC.c (lib\src):/*               this function to disable Config update function.                                          */
DrvFMC.c (lib\src):/*               User can check the status of Register Write-Protection Function                           */
DrvFMC.c (lib\src):/*               with DrvSYS_IsProtectedRegLocked().                                                       */
DrvFMC.c (lib\src):void DrvFMC_DisableConfigUpdate(void)
DrvFMC.c (lib\src):    FMC->ISPCON.CFGUEN = 0;
DrvFMC.c (lib\src):/* Function: DrvFMC_EnableLowFreqOptMode                                                                   */
DrvFMC.c (lib\src):/* Parameters:                                                                                             */
DrvFMC.c (lib\src):/* Description:                                                                                            */
DrvFMC.c (lib\src):/*               Enable flash access low frequency optimization mode. It can improve flash access          */
DrvFMC.c (lib\src):/*               performance when CPU runs at low frequency.                                               */
DrvFMC.c (lib\src):/*               If HCLK > 20 MHz, CPU will fetch wrong code and cause fail result.                        */
DrvFMC.c (lib\src):/*               Please make sure that Register Write-Protection Function has been disabled before using   */
DrvFMC.c (lib\src):/*               this function to enable flash access low frequency optimization mode.                     */
DrvFMC.c (lib\src):/*               User can check the status of Register Write-Protection Function                           */
DrvFMC.c (lib\src):/*               with DrvSYS_IsProtectedRegLocked().                                                       */
DrvFMC.c (lib\src):void DrvFMC_EnableLowFreqOptMode(void)
DrvFMC.c (lib\src):/* Function: DrvFMC_DisableLowFreqOptMode                                                                  */
DrvFMC.c (lib\src):/* Parameters:                                                                                             */
DrvFMC.c (lib\src):/* Description:                                                                                            */
DrvFMC.c (lib\src):/*               Disable flash access low frequency optimization mode.                                     */
DrvFMC.c (lib\src):/*               Please make sure that Register Write-Protection Function has been disabled before using   */
DrvFMC.c (lib\src):/*               this function to disable flash access low frequency optimization mode.                    */
DrvFMC.c (lib\src):/*               User can check the status of Register Write-Protection Function                           */
DrvFMC.c (lib\src):/*               with DrvSYS_IsProtectedRegLocked().                                                       */
DrvFMC.c (lib\src):void DrvFMC_DisableLowFreqOptMode(void)
DrvFMC.c (lib\src):/* Function: DrvFMC_EnableMiddleFreqOptMode                                                                */
DrvFMC.c (lib\src):/* Parameters:                                                                                             */
DrvFMC.c (lib\src):/* Description:                                                                                            */
DrvFMC.c (lib\src):/*               Enable flash access middle frequency optimization mode. It can improve flash access       */
DrvFMC.c (lib\src):/*               performance when CPU runs at middle frequency.                                            */
DrvFMC.c (lib\src):/*               If HCLK > 40 MHz, CPU will fetch wrong code and cause fail result.                        */
DrvFMC.c (lib\src):/*               Please make sure that Register Write-Protection Function has been disabled before using   */
DrvFMC.c (lib\src):/*               this function to enable flash access middle frequency optimization mode.                  */
DrvFMC.c (lib\src):/*               User can check the status of Register Write-Protection Function                           */
DrvFMC.c (lib\src):/*               with DrvSYS_IsProtectedRegLocked().                                                       */
DrvFMC.c (lib\src):void DrvFMC_EnableMiddleFreqOptMode(void)
DrvFMC.c (lib\src):/* Function: DrvFMC_DisableMiddleFreqOptMode                                                               */
DrvFMC.c (lib\src):/* Parameters:                                                                                             */
DrvFMC.c (lib\src):/* Description:                                                                                            */
DrvFMC.c (lib\src):/*               Disable flash access middle frequency optimization mode.                                  */
DrvFMC.c (lib\src):/*               Please make sure that Register Write-Protection Function has been disabled before using   */
DrvFMC.c (lib\src):/*               this function to disable flash access middle frequency optimization mode.                 */
DrvFMC.c (lib\src):/*               User can check the status of Register Write-Protection Function                           */
DrvFMC.c (lib\src):/*               with DrvSYS_IsProtectedRegLocked().                                                       */
DrvFMC.c (lib\src):void DrvFMC_DisableMiddleFreqOptMode(void)
DrvFMC.c (lib\src):/* Parameters:                                                                                             */
DrvFMC.c (lib\src):/* Description:                                                                                            */
DrvFMC.c (lib\src):/* Parameters:                                                                                             */
DrvFMC.c (lib\src):/* Description:                                                                                            */
DrvFMC.c (lib\src):/*               The corresponding functions in Config0 are listed in FMC section of TRM                   */
DrvFMC.c (lib\src):/*               Please make sure that Register Write-Protection Function has been disabled before using   */
DrvFMC.c (lib\src):/*               User can check the status of Register Write-Protection Function                           */
DrvFMC.c (lib\src):/*               with DrvSYS_IsProtectedRegLocked().                                                       */
DrvFMC.c (lib\src):        return E_DRVFMC_ERR_ISP_FAIL;
DrvFMC.c (lib\src):/* Parameters:                                                                                             */
DrvFMC.c (lib\src):/* Description:                                                                                            */
DrvFMC.h (lib\inc):/* Copyright(c) 2009 Nuvoton Technology Corp. All rights reserved.                                         */
DrvFMC.h (lib\inc):// E_DRVFMC_ERR_ISP_FAIL        ISP Failed when illegal condition occurs
DrvFMC.h (lib\inc):#define E_DRVFMC_ERR_ISP_FAIL   _SYSINFRA_ERRCODE(TRUE, MODULE_ID_DRVFMC, 1)
DrvFMC.h (lib\inc):/* Define parameter                                                                                        */
DrvFMC.h (lib\inc):typedef enum 
DrvFMC.h (lib\inc):    E_FMC_APROM = 0, 
DrvFMC.h (lib\inc):/* Define FMC functions prototype                                                                          */
DrvFMC.h (lib\inc):void     DrvFMC_DisableConfigUpdate(void);
DrvFMC.h (lib\inc):void     DrvFMC_DisableISP(void);
DrvFMC.h (lib\inc):void     DrvFMC_DisableLDUpdate(void);
DrvFMC.h (lib\inc):void     DrvFMC_DisableLowFreqOptMode(void);
DrvFMC.h (lib\inc):void     DrvFMC_DisableMiddleFreqOptMode(void);
DrvFMC.h (lib\inc):void     DrvFMC_EnableConfigUpdate(void);
DrvFMC.h (lib\inc):void     DrvFMC_EnableISP(void);
DrvFMC.h (lib\inc):void     DrvFMC_EnableLDUpdate(void);
DrvFMC.h (lib\inc):void     DrvFMC_EnableLowFreqOptMode(void);
DrvFMC.h (lib\inc):void     DrvFMC_EnableMiddleFreqOptMode(void);
DrvGPIO.c (lib\src):/* Copyright(c) 2009 Nuvoton Technology Corp. All rights reserved.                                         */
DrvGPIO.c (lib\src):#include "DrvGPIO.h"
DrvGPIO.c (lib\src):/* Macro, type and constant definitions                                                                    */
DrvGPIO.c (lib\src):#define PORT_OFFSET   0x40
DrvGPIO.c (lib\src):/* Global file scope (static) variables                                                                    */
DrvGPIO.c (lib\src):static void (*_pfGPABCallback)(uint32_t u32GPAStatus, uint32_t u32GPBStatus);
DrvGPIO.c (lib\src):static void (*_pfGPCDCallback)(uint32_t u32GPCStatus, uint32_t u32GPDStatus);
DrvGPIO.c (lib\src):static void (*_pfEINT0Callback)(void);
DrvGPIO.c (lib\src):static void (*_pfEINT1Callback)(void);              		 
DrvGPIO.c (lib\src):/* GPIO A and GPIO B  ISR                                                                                  */
DrvGPIO.c (lib\src):void GPAB_IRQHandler(void)
DrvGPIO.c (lib\src):	volatile uint32_t u32GPAStatus, u32GPBStatus;
DrvGPIO.c (lib\src):    /* Keep the interrupt source */
DrvGPIO.c (lib\src):	u32GPAStatus = GPIOA->ISRC;
DrvGPIO.c (lib\src):	u32GPBStatus = GPIOB->ISRC;
DrvGPIO.c (lib\src):    u32GPBStatus = u32GPBStatus & ~(0x3 << 14);
DrvGPIO.c (lib\src):    /* Clear the interrupt */
DrvGPIO.c (lib\src):    GPIOA->ISRC = u32GPAStatus;
DrvGPIO.c (lib\src):    GPIOB->ISRC = u32GPBStatus;
DrvGPIO.c (lib\src):    /* Call the callback function of GPIOAB interrupt */
DrvGPIO.c (lib\src):    if ( _pfGPABCallback )
DrvGPIO.c (lib\src):        _pfGPABCallback(u32GPAStatus, u32GPBStatus);    
DrvGPIO.c (lib\src):/* GPIO C,D,E  ISR                                                                                         */
DrvGPIO.c (lib\src):void GPCD_IRQHandler(void)
DrvGPIO.c (lib\src):    volatile uint32_t u32GPCStatus, u32GPDStatus;
DrvGPIO.c (lib\src):    /* Keep the interrupt source */
DrvGPIO.c (lib\src):	u32GPCStatus = GPIOC->ISRC;
DrvGPIO.c (lib\src):	u32GPDStatus = GPIOD->ISRC;
DrvGPIO.c (lib\src):    /* Clear the interrupt */
DrvGPIO.c (lib\src):    GPIOC->ISRC = u32GPCStatus;
DrvGPIO.c (lib\src):    GPIOD->ISRC = u32GPDStatus;
DrvGPIO.c (lib\src):    /* Call the callback function of GPIOAB interrupt */
DrvGPIO.c (lib\src):    if ( _pfGPCDCallback )
DrvGPIO.c (lib\src):        _pfGPCDCallback(u32GPCStatus, u32GPDStatus);    
DrvGPIO.c (lib\src):    /* EINT0 = GPB14. Clear the interrupt */
DrvGPIO.c (lib\src):  	GPIOB->ISRC  = 1UL << 14;
DrvGPIO.c (lib\src):	if ( _pfEINT0Callback )
DrvGPIO.c (lib\src):        _pfEINT0Callback();
DrvGPIO.c (lib\src):    /* EINT0 = GPB15. Clear the interrupt */
DrvGPIO.c (lib\src):  	GPIOB->ISRC  = 1UL << 15;
DrvGPIO.c (lib\src):	if ( _pfEINT1Callback )
DrvGPIO.c (lib\src):        _pfEINT1Callback();
DrvGPIO.c (lib\src):/* Function:    DrvGPIO_Open                                                                               */
DrvGPIO.c (lib\src):/* Parameter:        																					   */	
DrvGPIO.c (lib\src):/*	            port - [in]                                                                                */
DrvGPIO.c (lib\src):/*                  E_DRVGPIO_PORT, specify GPIO port. It could be E_GPA, E_GPB, E_GPC and E_GPD.          */
DrvGPIO.c (lib\src):/*                  Specify pin of the GPIO port. It could be 0~15.                                        */
DrvGPIO.c (lib\src):/*                  E_DRVGPIO_IO, set the specified GPIO pin to be E_IO_INPUT, E_IO_OUTPUT,                */
DrvGPIO.c (lib\src):/*                  E_IO_OPENDRAIN or E_IO_QUASI mode.                                                     */
DrvGPIO.c (lib\src):/*              E_SUCCESS										Operation successful                       */
DrvGPIO.c (lib\src):/*              E_DRVGPIO_ARGUMENT								Incorrect argument                         */
DrvGPIO.c (lib\src):/* Description:                                                                                            */
DrvGPIO.c (lib\src):/*              Set the specified GPIO pin to the specified GPIO operation mode.	                       */
DrvGPIO.c (lib\src):int32_t DrvGPIO_Open(E_DRVGPIO_PORT port, int32_t i32Bit, E_DRVGPIO_IO mode)
DrvGPIO.c (lib\src):        return E_DRVGPIO_ARGUMENT;
DrvGPIO.c (lib\src):    u32Reg = (uint32_t)&GPIOA->PMD + (port*PORT_OFFSET);    
DrvGPIO.c (lib\src):    if ((mode == E_IO_INPUT) || (mode == E_IO_OUTPUT) || (mode == E_IO_OPENDRAIN))
DrvGPIO.c (lib\src):        outpw(u32Reg, inpw(u32Reg) & ~(0x3<<(i32Bit*2)));
DrvGPIO.c (lib\src):        if (mode == E_IO_OUTPUT)
DrvGPIO.c (lib\src):            outpw(u32Reg, inpw(u32Reg) | (0x1<<(i32Bit*2)));
DrvGPIO.c (lib\src):        if (mode == E_IO_OPENDRAIN) 
DrvGPIO.c (lib\src):            outpw(u32Reg, inpw(u32Reg) | (0x2<<(i32Bit*2)));
DrvGPIO.c (lib\src):        outpw(u32Reg, inpw(u32Reg) | (0x3<<(i32Bit*2)));
DrvGPIO.c (lib\src):        return E_DRVGPIO_ARGUMENT;
DrvGPIO.c (lib\src):/* Function:    DrvGPIO_Close                                                                              */
DrvGPIO.c (lib\src):/* Parameter:        																					   */	
DrvGPIO.c (lib\src):/*	            port - [in]                                                                                */
DrvGPIO.c (lib\src):/*                  E_DRVGPIO_PORT, specify GPIO port. It could be E_GPA, E_GPB, E_GPC and E_GPD.          */
DrvGPIO.c (lib\src):/*                  Specify pin of the GPIO port. It could be 0~15.                                        */
DrvGPIO.c (lib\src):/*              E_SUCCESS										Operation successful                       */
DrvGPIO.c (lib\src):/*              E_DRVGPIO_ARGUMENT								Incorrect argument                         */
DrvGPIO.c (lib\src):/* Description:                                                                                            */
DrvGPIO.c (lib\src):/*              Close the specified GPIO pin function and set the pin to quasi-bidirectional mode.         */
DrvGPIO.c (lib\src):int32_t DrvGPIO_Close(E_DRVGPIO_PORT port, int32_t i32Bit)
DrvGPIO.c (lib\src):        return E_DRVGPIO_ARGUMENT;
DrvGPIO.c (lib\src):    u32Reg = (uint32_t)&GPIOA->PMD + (port*PORT_OFFSET);    
DrvGPIO.c (lib\src):    outpw(u32Reg, inpw(u32Reg) | (0x3<<(i32Bit*2)));
DrvGPIO.c (lib\src):	GPIO_DBNCECON->DBNCECON.ICLK_ON = 0; 
DrvGPIO.c (lib\src):/* Function:    DrvGPIO_SetBit                                                                             */
DrvGPIO.c (lib\src):/* Parameter:        																					   */	
DrvGPIO.c (lib\src):/*	            port - [in]                                                                                */
DrvGPIO.c (lib\src):/*                  E_DRVGPIO_PORT, specify GPIO port. It could be E_GPA, E_GPB, E_GPC and E_GPD.          */
DrvGPIO.c (lib\src):/*                  Specify pin of the GPIO port. It could be 0~15.                                        */
DrvGPIO.c (lib\src):/*              E_SUCCESS										Operation successful                       */
DrvGPIO.c (lib\src):/*              E_DRVGPIO_ARGUMENT								Incorrect argument                         */
DrvGPIO.c (lib\src):/* Description:                                                                                            */
DrvGPIO.c (lib\src):/*              Set the specified GPIO pin to 1.                                                      	   */
DrvGPIO.c (lib\src):int32_t DrvGPIO_SetBit(E_DRVGPIO_PORT port, int32_t i32Bit)
DrvGPIO.c (lib\src):	GPIO_T * tGPIO;
DrvGPIO.c (lib\src):        return E_DRVGPIO_ARGUMENT;
DrvGPIO.c (lib\src):	tGPIO = (GPIO_T *)((uint32_t)GPIOA + (port*PORT_OFFSET));  
DrvGPIO.c (lib\src):	tGPIO->DOUT |= (1 << i32Bit);
DrvGPIO.c (lib\src):/* Function:    DrvGPIO_GetBit                                                                             */
DrvGPIO.c (lib\src):/* Parameter:        																					   */	
DrvGPIO.c (lib\src):/*	            port - [in]                                                                                */
DrvGPIO.c (lib\src):/*                  E_DRVGPIO_PORT, specify GPIO port. It could be E_GPA, E_GPB, E_GPC and E_GPD.          */
DrvGPIO.c (lib\src):/*                  Specify pin of the GPIO port. It could be 0~15.                                        */
DrvGPIO.c (lib\src):/*              The specified input pin value					0 / 1                                      */
DrvGPIO.c (lib\src):/*              E_DRVGPIO_ARGUMENT								Incorrect argument                         */
DrvGPIO.c (lib\src):/* Description:                                                                                            */
DrvGPIO.c (lib\src):/*              Get the pin value from the specified input GPIO pin.            			               */
DrvGPIO.c (lib\src):int32_t DrvGPIO_GetBit(E_DRVGPIO_PORT port, int32_t i32Bit)
DrvGPIO.c (lib\src):        return E_DRVGPIO_ARGUMENT;
DrvGPIO.c (lib\src):    u32Reg = (uint32_t)&GPIOA->PIN + (port*PORT_OFFSET);    
DrvGPIO.c (lib\src):    return ((inpw(u32Reg)>>i32Bit) & 0x1);
DrvGPIO.c (lib\src):/* Function:    DrvGPIO_ClrBit                                                                             */
DrvGPIO.c (lib\src):/* Parameter:        																					   */	
DrvGPIO.c (lib\src):/*	            port - [in]                                                                                */
DrvGPIO.c (lib\src):/*                  E_DRVGPIO_PORT, specify GPIO port. It could be E_GPA, E_GPB, E_GPC and E_GPD.          */
DrvGPIO.c (lib\src):/*                  Specify pin of the GPIO port. It could be 0~15.                                        */
DrvGPIO.c (lib\src):/*              E_SUCCESS										Operation successful                       */
DrvGPIO.c (lib\src):/*              E_DRVGPIO_ARGUMENT								Incorrect argument                         */
DrvGPIO.c (lib\src):/* Description:                                                                                            */
DrvGPIO.c (lib\src):/*              Set the specified GPIO pin to 0.               			                                   */
DrvGPIO.c (lib\src):int32_t DrvGPIO_ClrBit(E_DRVGPIO_PORT port, int32_t i32Bit)
DrvGPIO.c (lib\src):	GPIO_T * tGPIO;
DrvGPIO.c (lib\src):        return E_DRVGPIO_ARGUMENT;
DrvGPIO.c (lib\src):	tGPIO = (GPIO_T *)((uint32_t)GPIOA + (port*PORT_OFFSET));  
DrvGPIO.c (lib\src):	tGPIO->DOUT &= ~(1 << i32Bit);
DrvGPIO.c (lib\src):/* Function:    DrvGPIO_SetPortBits                                                                        */
DrvGPIO.c (lib\src):/* Parameter:        																					   */	
DrvGPIO.c (lib\src):/*	            port - [in]                                                                                */
DrvGPIO.c (lib\src):/*                  E_DRVGPIO_PORT, specify GPIO port. It could be E_GPA, E_GPB, E_GPC and E_GPD.          */
DrvGPIO.c (lib\src):/*                  The data output value. It could be 0~0xFFFF                         				   */
DrvGPIO.c (lib\src):/*              E_SUCCESS										Operation successful                       */
DrvGPIO.c (lib\src):/*              E_DRVGPIO_ARGUMENT								Incorrect argument                         */
DrvGPIO.c (lib\src):/* Description:                                                                                            */
DrvGPIO.c (lib\src):/*              Set the output port value to the specified GPIO port.             	                       */
DrvGPIO.c (lib\src):int32_t DrvGPIO_SetPortBits(E_DRVGPIO_PORT port,int32_t i32Data)
DrvGPIO.c (lib\src):    GPIO_T * tGPIO;
DrvGPIO.c (lib\src):	tGPIO = (GPIO_T *)((uint32_t)GPIOA + (port*PORT_OFFSET));  
DrvGPIO.c (lib\src):	tGPIO->DOUT = i32Data;
DrvGPIO.c (lib\src):/* Function:    DrvGPIO_GetPortBits                                                                        */
DrvGPIO.c (lib\src):/* Parameter:        																					   */	
DrvGPIO.c (lib\src):/*	            port - [in]                                                                                */
DrvGPIO.c (lib\src):/*                  E_DRVGPIO_PORT, specify GPIO port. It could be E_GPA, E_GPB, E_GPC and E_GPD.          */
DrvGPIO.c (lib\src):/*              The specified input port value            		0 ~ 0xFFFF                                 */
DrvGPIO.c (lib\src):/*              E_DRVGPIO_ARGUMENT								Incorrect argument                         */
DrvGPIO.c (lib\src):/* Description:                                                                                            */
DrvGPIO.c (lib\src):/*             Get the input port value from the specified GPIO port.                                      */
DrvGPIO.c (lib\src):int32_t DrvGPIO_GetPortBits(E_DRVGPIO_PORT port)
DrvGPIO.c (lib\src):	GPIO_T * tGPIO;
DrvGPIO.c (lib\src):	tGPIO = (GPIO_T *)((uint32_t)GPIOA + (port*PORT_OFFSET));  
DrvGPIO.c (lib\src):    return tGPIO->PIN;
DrvGPIO.c (lib\src):/* Function:    DrvGPIO_GetDoutBit                                                                         */
DrvGPIO.c (lib\src):/* Parameter:        																					   */	
DrvGPIO.c (lib\src):/*	            port - [in]                                                                                */
DrvGPIO.c (lib\src):/*                  E_DRVGPIO_PORT, specify GPIO port. It could be E_GPA, E_GPB, E_GPC and E_GPD.          */
DrvGPIO.c (lib\src):/*                  Specify pin of the GPIO port. It could be 0~15.                                        */
DrvGPIO.c (lib\src):/*              The bit value of the specified register			0 / 1                                      */
DrvGPIO.c (lib\src):/*              E_DRVGPIO_ARGUMENT								Incorrect argument                         */
DrvGPIO.c (lib\src):/* Description:                                                                                            */
DrvGPIO.c (lib\src):/*              Get the bit value from the specified Data Output Value Register.                           */
DrvGPIO.c (lib\src):/*              If the bit value is 1, it's meaning the pin is output data to high.                   	   */
DrvGPIO.c (lib\src):/*              Otherwise, it's output data to low.           	                  						   */
DrvGPIO.c (lib\src):int32_t DrvGPIO_GetDoutBit(E_DRVGPIO_PORT port, int32_t i32Bit)
DrvGPIO.c (lib\src):        return E_DRVGPIO_ARGUMENT;
DrvGPIO.c (lib\src):    return ((inpw((uint32_t)&GPIOA->DOUT + (port*PORT_OFFSET))>>i32Bit) & 0x1);
DrvGPIO.c (lib\src):/* Function:    DrvGPIO_GetPortDoutBits                                                                    */
DrvGPIO.c (lib\src):/* Parameter:        																					   */	
DrvGPIO.c (lib\src):/*	            port - [in]                                                                                */
DrvGPIO.c (lib\src):/*                  E_DRVGPIO_PORT, specify GPIO port. It could be E_GPA, E_GPB, E_GPC and E_GPD.          */
DrvGPIO.c (lib\src):/*              The portt value of the specified register		0 ~ 0xFFFF                                 */
DrvGPIO.c (lib\src):/*              E_DRVGPIO_ARGUMENT								Incorrect argument                         */
DrvGPIO.c (lib\src):/* Description:                                                                                            */
DrvGPIO.c (lib\src):/*              Get the port value from the specified Data Output Value Register.                          */
DrvGPIO.c (lib\src):/*              If the corresponding bit of the return port value is 1, it's meaning the the corresponding */
DrvGPIO.c (lib\src):/*              bit is output data to high. Otherwise, it's output data to low.                            */
DrvGPIO.c (lib\src):int32_t DrvGPIO_GetPortDoutBits(E_DRVGPIO_PORT port)
DrvGPIO.c (lib\src):    if (port > 4)
DrvGPIO.c (lib\src):        return E_DRVGPIO_ARGUMENT;
DrvGPIO.c (lib\src):    return inpw((uint32_t)&GPIOA->DOUT + (port*PORT_OFFSET));
DrvGPIO.c (lib\src):/* Function:    DrvGPIO_SetBitMask                                                                         */
DrvGPIO.c (lib\src):/* Parameter:        																					   */	
DrvGPIO.c (lib\src):/*	            port - [in]                                                                                */
DrvGPIO.c (lib\src):/*                  E_DRVGPIO_PORT, specify GPIO port. It could be E_GPA, E_GPB, E_GPC and E_GPD.          */
DrvGPIO.c (lib\src):/*                  Specify pin of the GPIO port. It could be 0~15.                                        */
DrvGPIO.c (lib\src):/*              E_SUCCESS										Operation successful                       */
DrvGPIO.c (lib\src):/* Description:                                                                                            */
DrvGPIO.c (lib\src):/*              This function is used to protect the write data function of the corresponding GPIO pin.    */
DrvGPIO.c (lib\src):/*              When set the bit mask, the write signal is masked and write data to the protect bit is     */
DrvGPIO.c (lib\src):int32_t DrvGPIO_SetBitMask(E_DRVGPIO_PORT port, int32_t i32Bit)
DrvGPIO.c (lib\src):    u32Reg = (uint32_t)&GPIOA->DMASK + (port*PORT_OFFSET);    
DrvGPIO.c (lib\src):	outpw(u32Reg, inpw(u32Reg) | (1<<i32Bit));
DrvGPIO.c (lib\src):/* Function:    DrvGPIO_GetBitMask                                                                         */
DrvGPIO.c (lib\src):/* Parameter:                                                                                              */
DrvGPIO.c (lib\src):/*              port - [in]                                                                                */
DrvGPIO.c (lib\src):/*                  E_DRVGPIO_PORT, specify GPIO port. It could be E_GPA, E_GPB, E_GPC and E_GPD.          */
DrvGPIO.c (lib\src):/*                  Specify pin of the GPIO port. It could be 0~15.                                        */
DrvGPIO.c (lib\src):/*              The bit value of the specified register         0 / 1                                      */
DrvGPIO.c (lib\src):/* Description:                                                                                            */
DrvGPIO.c (lib\src):/*              Get the bit value from the specified Data Output Write Mask Register.                      */
DrvGPIO.c (lib\src):/*              If the bit value is 1, it's meaning the corresponding bit is protected.                    */
DrvGPIO.c (lib\src):int32_t DrvGPIO_GetBitMask(E_DRVGPIO_PORT port, int32_t i32Bit)
DrvGPIO.c (lib\src):    u32Reg = (uint32_t)&GPIOA->DMASK + (port*PORT_OFFSET);    
DrvGPIO.c (lib\src):    return ((inpw(u32Reg)>>i32Bit) & 0x1);
DrvGPIO.c (lib\src):/* Function:    DrvGPIO_ClrBitMask                                                                         */
DrvGPIO.c (lib\src):/* Parameter:        																					   */	
DrvGPIO.c (lib\src):/*	            port - [in]                                                                                */
DrvGPIO.c (lib\src):/*                  E_DRVGPIO_PORT, specify GPIO port. It could be E_GPA, E_GPB, E_GPC and E_GPD.          */
DrvGPIO.c (lib\src):/*                  Specify pin of the GPIO port. It could be 0~15.                                        */
DrvGPIO.c (lib\src):/*              E_SUCCESS										Operation successful                       */
DrvGPIO.c (lib\src):/* Description:                                                                                            */
DrvGPIO.c (lib\src):/*              This function is used to remove the write protect function of the the corresponding GPIO   */
DrvGPIO.c (lib\src):/*              pin. After remove the bit mask, write data to the corresponding bit is workable.           */
DrvGPIO.c (lib\src):int32_t DrvGPIO_ClrBitMask(E_DRVGPIO_PORT port, int32_t i32Bit)
DrvGPIO.c (lib\src):    u32Reg = (uint32_t)&GPIOA->DMASK + (port*PORT_OFFSET);    
DrvGPIO.c (lib\src):	outpw(u32Reg, inpw(u32Reg) & ~(1<<i32Bit));
DrvGPIO.c (lib\src):/* Function:    DrvGPIO_SetPortMask                                                                        */
DrvGPIO.c (lib\src):/* Parameter:        																					   */	
DrvGPIO.c (lib\src):/*	            port - [in]                                                                                */
DrvGPIO.c (lib\src):/*                  E_DRVGPIO_PORT, specify GPIO port. It could be E_GPA, E_GPB, E_GPC and E_GPD.          */
DrvGPIO.c (lib\src):/*                  Specify pins of the GPIO port. It could be 0~0xFFFF.            					   */
DrvGPIO.c (lib\src):/*              E_SUCCESS										Operation successful                       */
DrvGPIO.c (lib\src):/*              E_DRVGPIO_ARGUMENT								Incorrect argument                         */
DrvGPIO.c (lib\src):/* Description:                                                                                            */
DrvGPIO.c (lib\src):/*              This function is used to protect the write data function of the corresponding GPIO pins.   */
DrvGPIO.c (lib\src):/*              When set the bits are masked, write data to the protect bits are ignored.                  */
DrvGPIO.c (lib\src):int32_t DrvGPIO_SetPortMask(E_DRVGPIO_PORT port, int32_t i32MaskData)
DrvGPIO.c (lib\src):    outpw((uint32_t)&GPIOA->DMASK + (port*PORT_OFFSET), DrvGPIO_GetPortMask(port) | i32MaskData);
DrvGPIO.c (lib\src):/* Function:    DrvGPIO_GetPortMask                                                                        */
DrvGPIO.c (lib\src):/* Parameter:        																					   */	
DrvGPIO.c (lib\src):/*	            port - [in]                                                                                */
DrvGPIO.c (lib\src):/*                  E_DRVGPIO_PORT, specify GPIO port. It could be E_GPA, E_GPB, E_GPC and E_GPD.          */
DrvGPIO.c (lib\src):/*              The portt value of the specified register		0 ~ 0xFFFF        	                       */
DrvGPIO.c (lib\src):/* Description:                                                                                            */
DrvGPIO.c (lib\src):/*             	Get the port value from the specified Data Output Write Mask Register.                     */
DrvGPIO.c (lib\src):/*              If the corresponding bit of the return port value is 1, it's meaning the bits are 		   */
DrvGPIO.c (lib\src):/*				protected. And write data to the bits are ignored.          		                       */
DrvGPIO.c (lib\src):int32_t DrvGPIO_GetPortMask(E_DRVGPIO_PORT port)
DrvGPIO.c (lib\src):	return inpw((uint32_t)&GPIOA->DMASK + (port* PORT_OFFSET)); 
DrvGPIO.c (lib\src):/* Function:    DrvGPIO_ClrPortMask                                                                        */
DrvGPIO.c (lib\src):/* Parameter:        																					   */	
DrvGPIO.c (lib\src):/*	            port - [in]                                                                                */
DrvGPIO.c (lib\src):/*                  E_DRVGPIO_PORT, specify GPIO port. It could be E_GPA, E_GPB, E_GPC and E_GPD.          */
DrvGPIO.c (lib\src):/*                  Specify pins of the GPIO port. It could be 0~0xFFFF.                                   */
DrvGPIO.c (lib\src):/*              E_SUCCESS, operation successful                                                            */
DrvGPIO.c (lib\src):/* Description:                                                                                            */
DrvGPIO.c (lib\src):/*              This function is used to remove the write protect function of the the corresponding GPIO   */
DrvGPIO.c (lib\src):/*              pins. After remove those bits mask, write data to the corresponding bits are workable.     */
DrvGPIO.c (lib\src):int32_t DrvGPIO_ClrPortMask(E_DRVGPIO_PORT port, int32_t i32MaskData)
DrvGPIO.c (lib\src):	outpw((uint32_t)&GPIOA->DMASK + (port*PORT_OFFSET), DrvGPIO_GetPortMask(port) & ~(i32MaskData));
DrvGPIO.c (lib\src):/* Function:    DrvGPIO_EnableDigitalInputBit                                                              */
DrvGPIO.c (lib\src):/* Parameter:        																					   */	
DrvGPIO.c (lib\src):/*	            port - [in]                                                                                */
DrvGPIO.c (lib\src):/*                  E_DRVGPIO_PORT, specify GPIO port. It could be E_GPA, E_GPB, E_GPC and E_GPD.          */
DrvGPIO.c (lib\src):/*                  Specify pin of the GPIO port. It could be 0~15.                                        */
DrvGPIO.c (lib\src):/*              E_SUCCESS										Operation successful                       */
DrvGPIO.c (lib\src):/* Description:                                                                                            */
DrvGPIO.c (lib\src):/*              Enable IO digital input path of the specified GPIO input pin.                              */
DrvGPIO.c (lib\src):int32_t DrvGPIO_EnableDigitalInputBit(E_DRVGPIO_PORT port, int32_t i32Bit)
DrvGPIO.c (lib\src):    volatile uint32_t u32Reg = (uint32_t)&GPIOA->OFFD + (port*PORT_OFFSET);
DrvGPIO.c (lib\src):    outpw(u32Reg, inpw(u32Reg) & ~(1 << (i32Bit+16)));
DrvGPIO.c (lib\src):/* Function:    DrvGPIO_DisableDigitalInputBit                                                             */
DrvGPIO.c (lib\src):/* Parameter:        																					   */	
DrvGPIO.c (lib\src):/*	            port - [in]                                                                                */
DrvGPIO.c (lib\src):/*                  E_DRVGPIO_PORT, specify GPIO port. It could be E_GPA, E_GPB, E_GPC and E_GPD.          */
DrvGPIO.c (lib\src):/*                  Specify pin of the GPIO port. It could be 0~15.                                        */
DrvGPIO.c (lib\src):/*              E_SUCCESS										Operation successful                       */
DrvGPIO.c (lib\src):/* Description:                                                                                            */
DrvGPIO.c (lib\src):/*              Disable IO digital input path of the specified GPIO input pin.                             */
DrvGPIO.c (lib\src):int32_t DrvGPIO_DisableDigitalInputBit(E_DRVGPIO_PORT port, int32_t i32Bit)
DrvGPIO.c (lib\src):    volatile uint32_t u32Reg = (uint32_t)&GPIOA->OFFD + (port*PORT_OFFSET);
DrvGPIO.c (lib\src):    outpw(u32Reg, inpw(u32Reg) | (1 << (i32Bit+16)));
DrvGPIO.c (lib\src):/* Function:    DrvGPIO_EnableDebounce                                                                     */
DrvGPIO.c (lib\src):/* Parameter:        																					   */	
DrvGPIO.c (lib\src):/*	            port - [in]                                                                                */
DrvGPIO.c (lib\src):/*                  E_DRVGPIO_PORT, specify GPIO port. It could be E_GPA, E_GPB, E_GPC and E_GPD.          */
DrvGPIO.c (lib\src):/*                  Specify pin of the GPIO port. It could be 0~15.                                        */
DrvGPIO.c (lib\src):/*              E_SUCCESS										Operation successful                       */
DrvGPIO.c (lib\src):/* Description:                                                                                            */
DrvGPIO.c (lib\src):/*              Enable the debounce function of the specified GPIO input pin.                              */
DrvGPIO.c (lib\src):int32_t DrvGPIO_EnableDebounce(E_DRVGPIO_PORT port, int32_t i32Bit)
DrvGPIO.c (lib\src):    u32Reg = (uint32_t)&GPIOA->DBEN + (port*PORT_OFFSET);    
DrvGPIO.c (lib\src):    outpw(u32Reg, inpw(u32Reg) | (1<<i32Bit));
DrvGPIO.c (lib\src):	GPIO_DBNCECON->DBNCECON.ICLK_ON = 1;
DrvGPIO.c (lib\src):/* Function:    DrvGPIO_DisableDebounce                                                                    */
DrvGPIO.c (lib\src):/* Parameter:        																					   */	
DrvGPIO.c (lib\src):/*	            port - [in]                                                                                */
DrvGPIO.c (lib\src):/*                  E_DRVGPIO_PORT, specify GPIO port. It could be E_GPA, E_GPB, E_GPC and E_GPD.          */
DrvGPIO.c (lib\src):/*                  Specify pin of the GPIO port. It could be 0~15.                                        */
DrvGPIO.c (lib\src):/*              E_SUCCESS										Operation successful                       */
DrvGPIO.c (lib\src):/* Description:                                                                                            */
DrvGPIO.c (lib\src):/*              Disable the debounce function of the specified GPIO input pin.                             */
DrvGPIO.c (lib\src):int32_t DrvGPIO_DisableDebounce(E_DRVGPIO_PORT port, int32_t i32Bit)
DrvGPIO.c (lib\src):    u32Reg = (uint32_t)&GPIOA->DBEN + (port*PORT_OFFSET);
DrvGPIO.c (lib\src):    outpw(u32Reg, inpw(u32Reg) & ~(1<<i32Bit));
DrvGPIO.c (lib\src):    GPIO_DBNCECON->DBNCECON.ICLK_ON = 0;
DrvGPIO.c (lib\src):/* Function:    DrvGPIO_SetDebounceTime                                                                    */
DrvGPIO.c (lib\src):/* Parameter:        																					   */	
DrvGPIO.c (lib\src):/*                  The number of sampling cycle selection, the range of value is from 0 ~ 15.         	   */
DrvGPIO.c (lib\src):/*                 	E_DRVGPIO_DBCLKSRC, it could be DBCLKSRC_HCLK or DBCLKSRC_10K						   */                 
DrvGPIO.c (lib\src):/*              E_SUCCESS										Operation successful                       */
DrvGPIO.c (lib\src):/*              E_DRVGPIO_ARGUMENT								Incorrect argument                         */
DrvGPIO.c (lib\src):/* Description:                                                                                            */
DrvGPIO.c (lib\src):/*              Set the interrupt debounce sampling time based on the debounce counter clock source.       */
DrvGPIO.c (lib\src):/*              If the debounce clock source is from internal 10 KHz and sampling cycle selection is 4.    */
DrvGPIO.c (lib\src):/*              will sampling interrupt input once per 1600 us.          								   */
DrvGPIO.c (lib\src):int32_t DrvGPIO_SetDebounceTime(uint32_t u32CycleSelection, E_DRVGPIO_DBCLKSRC ClockSource)
DrvGPIO.c (lib\src):        return E_DRVGPIO_ARGUMENT;
DrvGPIO.c (lib\src):	GPIO_DBNCECON->DBNCECON.DBCLKSEL = u32CycleSelection ; 
DrvGPIO.c (lib\src):	GPIO_DBNCECON->DBNCECON.DBCLKSRC = ClockSource ; 
DrvGPIO.c (lib\src):/* Function:    DrvGPIO_GetDebounceSampleCycle                                                             */
DrvGPIO.c (lib\src):/* Parameter:        																					   */	
DrvGPIO.c (lib\src):/*              Number of the sampling cycle selection        	0 ~ 15                                     */
DrvGPIO.c (lib\src):/* Description:                                                                                            */
DrvGPIO.c (lib\src):/*              This function is used to get the number of debounce sampling cycle selection.              */
DrvGPIO.c (lib\src):int32_t DrvGPIO_GetDebounceSampleCycle(void)
DrvGPIO.c (lib\src):    return GPIO_DBNCECON->DBNCECON.DBCLKSEL;
DrvGPIO.c (lib\src):/* Function:    DrvGPIO_EnableInt                                                                          */
DrvGPIO.c (lib\src):/* Parameter:        																					   */	
DrvGPIO.c (lib\src):/*	            port - [in]                                                                                */
DrvGPIO.c (lib\src):/*                  E_DRVGPIO_PORT, specify GPIO port. It could be E_GPA, E_GPB, E_GPC and E_GPD.          */
DrvGPIO.c (lib\src):/*                  Specify pin of the GPIO port. It could be 0~15.                                        */
DrvGPIO.c (lib\src):/*                  But the GPB.14 and 15 are only used for external interrupt 0/1.                        */
DrvGPIO.c (lib\src):/*	            TriggerType - [in]                                                                         */
DrvGPIO.c (lib\src):/*                  E_DRVGPIO_INT_TYPE, specify the interrupt trigger type.                                */
DrvGPIO.c (lib\src):/*                  it's meaning the interrupt function enable by rising egde/high level,                  */ 
DrvGPIO.c (lib\src):/*                  If the interrupt mode is E_MODE_LEVEL and interrupt type is                            */
DrvGPIO.c (lib\src):/*                  E_BOTH_EDGE¡Athen calling this API is ignored.                                     	   */
DrvGPIO.c (lib\src):/*                  E_DRVGPIO_INT_MODE, specify the interrupt mode.                                        */
DrvGPIO.c (lib\src):/*                  It could be E_MODE_EDGE or E_MODE_LEVEL to control the interrupt is by                 */
DrvGPIO.c (lib\src):/*                  If the interrupt mode is E_MODE_LEVEL and interrupt type is                            */
DrvGPIO.c (lib\src):/*                  E_BOTH_EDGE¡Athen calling this API is ignored.                                         */
DrvGPIO.c (lib\src):/*              E_SUCCESS										Operation successful                       */
DrvGPIO.c (lib\src):/*              E_DRVGPIO_ARGUMENT								Incorrect argument                         */
DrvGPIO.c (lib\src):/* Description:                                                                                            */
DrvGPIO.c (lib\src):/*              Enable the interrupt function of the specified GPIO pin.                                   */
DrvGPIO.c (lib\src):/*              Excpet for GPB.14 and GPB.15 pins are for external interrupt used.          			   */
DrvGPIO.c (lib\src):int32_t DrvGPIO_EnableInt(E_DRVGPIO_PORT port, int32_t i32Bit, E_DRVGPIO_INT_TYPE TriggerType, E_DRVGPIO_INT_MODE Mode)
DrvGPIO.c (lib\src):    if ((TriggerType == E_IO_BOTH_EDGE) && (Mode == E_MODE_LEVEL))
DrvGPIO.c (lib\src):        return E_DRVGPIO_ARGUMENT;
DrvGPIO.c (lib\src):    if ((port == E_GPB) && ((i32Bit == 14) || (i32Bit == 15)))
DrvGPIO.c (lib\src):        /* GPB14 is EINT0, GPB15 is EINT1. Both of them can't be assigned to GPAB interrupt */
DrvGPIO.c (lib\src):        return E_DRVGPIO_ARGUMENT;    
DrvGPIO.c (lib\src):    /* Configure the interrupt to be rising/falling when edge trigger or high/low level when level trigger */
DrvGPIO.c (lib\src):    u32Reg = (uint32_t)&GPIOA->IEN + (port*PORT_OFFSET);
DrvGPIO.c (lib\src):	if (TriggerType == E_IO_RISING)
DrvGPIO.c (lib\src):		outpw(u32Reg, inpw(u32Reg) | (1<<(i32Bit+16)));	 
DrvGPIO.c (lib\src):	else if(TriggerType == E_IO_FALLING)
DrvGPIO.c (lib\src):		outpw(u32Reg, inpw(u32Reg) | (1<<i32Bit));	 
DrvGPIO.c (lib\src):	else if(TriggerType == E_IO_BOTH_EDGE)  
DrvGPIO.c (lib\src):		outpw(u32Reg, inpw(u32Reg) | (1<<i32Bit)| (1<<(i32Bit+16)));	 
DrvGPIO.c (lib\src):		return E_DRVGPIO_ARGUMENT;
DrvGPIO.c (lib\src):    u32Reg = (uint32_t)&GPIOA->IMD + (port*PORT_OFFSET);
DrvGPIO.c (lib\src):		outpw(u32Reg, inpw(u32Reg) & ~(1<<i32Bit));
DrvGPIO.c (lib\src):		outpw(u32Reg, inpw(u32Reg) | (1<<i32Bit));
DrvGPIO.c (lib\src):		return E_DRVGPIO_ARGUMENT;
DrvGPIO.c (lib\src):    /* Enable the relative interrupt of M0 */
DrvGPIO.c (lib\src):    if ((port == E_GPA) || (port == E_GPB))
DrvGPIO.c (lib\src):        NVIC_SetPriority(GPAB_IRQn, (1<<__NVIC_PRIO_BITS) - 2);
DrvGPIO.c (lib\src):        NVIC_EnableIRQ(GPAB_IRQn);
DrvGPIO.c (lib\src):    if ((port == E_GPC) || (port == E_GPD))
DrvGPIO.c (lib\src):        NVIC_SetPriority(GPCD_IRQn, (1<<__NVIC_PRIO_BITS) - 2);
DrvGPIO.c (lib\src):        NVIC_EnableIRQ(GPCD_IRQn);
DrvGPIO.c (lib\src):/* Function:    DrvGPIO_DisableInt                                                                         */
DrvGPIO.c (lib\src):/* Parameter:        																					   */	
DrvGPIO.c (lib\src):/*	            port - [in]                                                                                */
DrvGPIO.c (lib\src):/*                  E_DRVGPIO_PORT, specify GPIO port. It could be E_GPA, E_GPB, E_GPC and E_GPD.          */
DrvGPIO.c (lib\src):/*                  Specify pin of the GPIO port. It could be 0~15.                                        */
DrvGPIO.c (lib\src):/*              E_SUCCESS										Operation successful                       */
DrvGPIO.c (lib\src):/* Description:                                                                                            */
DrvGPIO.c (lib\src):/*              Disable the interrupt function of the specified GPIO pin.                                  */
DrvGPIO.c (lib\src):/*              Excpet for GPB.14 and GPB.15 pins are for external interrupt used.          			   */
DrvGPIO.c (lib\src):int32_t DrvGPIO_DisableInt(E_DRVGPIO_PORT port, int32_t i32Bit)
DrvGPIO.c (lib\src):    /* Disable both rising/falling or both high level/low level interrupts */
DrvGPIO.c (lib\src):    u32Reg = (uint32_t)&GPIOA->IEN + (port*PORT_OFFSET);
DrvGPIO.c (lib\src):    outpw(u32Reg, inpw(u32Reg) & ~((1<<i32Bit) | (1<<(i32Bit+16))));	 
DrvGPIO.c (lib\src):    /* Disable the relative interrupt of M0 */
DrvGPIO.c (lib\src):    if ((port == E_GPA) || (port == E_GPB))
DrvGPIO.c (lib\src):        NVIC_DisableIRQ(GPAB_IRQn);
DrvGPIO.c (lib\src):    if ((port == E_GPC) || (port == E_GPD))
DrvGPIO.c (lib\src):        NVIC_DisableIRQ(GPCD_IRQn);
DrvGPIO.c (lib\src):/* Function:    DrvGPIO_SetIntCallback                  		                                           */
DrvGPIO.c (lib\src):/* Parameter:        																					   */	
DrvGPIO.c (lib\src):/*	            pfGPABCallback - [in], the function pointer of GPA/GPB callback function.                  */
DrvGPIO.c (lib\src):/*              pfGPCDCallback - [in], the function pointer of GPC/GPD/GPE callback function.              */
DrvGPIO.c (lib\src):/* Description:                                                                                            */
DrvGPIO.c (lib\src):/*              Install the interrupt callback function for GPA/GPB port and GPC/GPD/GPE port.             */
DrvGPIO.c (lib\src):void DrvGPIO_SetIntCallback(GPIO_GPAB_CALLBACK pfGPABCallback, GPIO_GPCD_CALLBACK pfGPCDCallback)
DrvGPIO.c (lib\src):    _pfGPABCallback  = (void (*)(uint32_t, uint32_t))pfGPABCallback;
DrvGPIO.c (lib\src):    _pfGPCDCallback  = (void (*)(uint32_t, uint32_t))pfGPCDCallback;
DrvGPIO.c (lib\src):/* Function:    DrvGPIO_EnableEINT0                                                                        */
DrvGPIO.c (lib\src):/* Parameter:        																					   */	
DrvGPIO.c (lib\src):/*	            TriggerType - [in]                                                                         */
DrvGPIO.c (lib\src):/*                  E_DRVGPIO_INT_TYPE, specify the interrupt trigger type.                                */
DrvGPIO.c (lib\src):/*                  it's meaning the interrupt function enable by rising egde/high level,                  */ 
DrvGPIO.c (lib\src):/*                  If the interrupt mode is E_MODE_LEVEL and interrupt type is                            */
DrvGPIO.c (lib\src):/*                  E_BOTH_EDGE¡Athen calling this API is ignored.                                     	   */
DrvGPIO.c (lib\src):/*                  E_DRVGPIO_INT_MODE, specify the interrupt mode.                                        */
DrvGPIO.c (lib\src):/*                  It could be E_MODE_EDGE or E_MODE_LEVEL to control the interrupt is by                 */
DrvGPIO.c (lib\src):/*                  If the interrupt mode is E_MODE_LEVEL and interrupt type is                            */
DrvGPIO.c (lib\src):/*                  E_BOTH_EDGE¡Athen calling this API is ignored.                                         */
DrvGPIO.c (lib\src):/*	            pfEINT0Callback - [in]                                                                     */
DrvGPIO.c (lib\src):/*                  It's the function pointer of the external INT0 callback function.                      */
DrvGPIO.c (lib\src):/* Description:                                                                                            */
DrvGPIO.c (lib\src):/*              Enable the interrupt function for external GPIO interrupt from /INT0(GPB.14) pin.          */
DrvGPIO.c (lib\src):void DrvGPIO_EnableEINT0(E_DRVGPIO_INT_TYPE TriggerType, E_DRVGPIO_INT_MODE Mode, GPIO_EINT0_CALLBACK pfEINT0Callback)
DrvGPIO.c (lib\src):    if ((TriggerType == E_IO_BOTH_EDGE) && (Mode == E_MODE_LEVEL))
DrvGPIO.c (lib\src):    u32Reg = (uint32_t)&GPIOA->IEN + (E_GPB*PORT_OFFSET);
DrvGPIO.c (lib\src):	if (TriggerType == E_IO_RISING)
DrvGPIO.c (lib\src):        outpw(u32Reg, inpw(u32Reg) | (1UL<<(14+16)));	 
DrvGPIO.c (lib\src):    else if (TriggerType == E_IO_FALLING)
DrvGPIO.c (lib\src):        outpw(u32Reg, inpw(u32Reg) | (1UL<<(14)));	 
DrvGPIO.c (lib\src):    else if (TriggerType == E_IO_BOTH_EDGE)
DrvGPIO.c (lib\src):        outpw(u32Reg, inpw(u32Reg) | (1UL<<(14))|(1UL<<(14+16)));	 
DrvGPIO.c (lib\src):    u32Reg = (uint32_t)&GPIOA->IMD + (E_GPB*PORT_OFFSET);
DrvGPIO.c (lib\src):		outpw(u32Reg, inpw(u32Reg) & ~(1<<14));
DrvGPIO.c (lib\src):		outpw(u32Reg, inpw(u32Reg) | (1<<14));
DrvGPIO.c (lib\src):   _pfEINT0Callback = pfEINT0Callback;
DrvGPIO.c (lib\src):    NVIC_SetPriority(EINT0_IRQn, (1<<__NVIC_PRIO_BITS) - 2);
DrvGPIO.c (lib\src):/* Function:    DrvGPIO_DisableEINT0                                                                       */
DrvGPIO.c (lib\src):/* Parameter:        																					   */	
DrvGPIO.c (lib\src):/* Description:                                                                                            */
DrvGPIO.c (lib\src):/*              Disable the interrupt function for external GPIO interrupt from /INT0(GPB.14) pin.         */
DrvGPIO.c (lib\src):void DrvGPIO_DisableEINT0(void)
DrvGPIO.c (lib\src):    u32Reg = (uint32_t)&GPIOA->IEN + (E_GPB*PORT_OFFSET);
DrvGPIO.c (lib\src):    outpw(u32Reg, inpw(u32Reg) & ~((1UL<<(14))|(1UL<<(14+16))));	 
DrvGPIO.c (lib\src):/* Function:    DrvGPIO_EnableEINT1                                                                        */
DrvGPIO.c (lib\src):/* Parameter:        																					   */	
DrvGPIO.c (lib\src):/*	            TriggerType - [in]                                                                         */
DrvGPIO.c (lib\src):/*                  E_DRVGPIO_INT_TYPE, specify the interrupt trigger type.                                */
DrvGPIO.c (lib\src):/*                  it's meaning the interrupt function enable by rising egde/high level,                  */ 
DrvGPIO.c (lib\src):/*                  If the interrupt mode is E_MODE_LEVEL and interrupt type is                            */
DrvGPIO.c (lib\src):/*                  E_BOTH_EDGE¡Athen calling this API is ignored.                                     	   */
DrvGPIO.c (lib\src):/*                  E_DRVGPIO_INT_MODE, specify the interrupt mode.                                        */
DrvGPIO.c (lib\src):/*                  It could be E_MODE_EDGE or E_MODE_LEVEL to control the interrupt is by                 */
DrvGPIO.c (lib\src):/*                  If the interrupt mode is E_MODE_LEVEL and interrupt type is                            */
DrvGPIO.c (lib\src):/*                  E_BOTH_EDGE¡Athen calling this API is ignored.                                         */
DrvGPIO.c (lib\src):/*	            pfEINT0Callback - [in]                                                                     */
DrvGPIO.c (lib\src):/*                  It's the function pointer of the external INT0 callback function.                      */
DrvGPIO.c (lib\src):/* Description:                                                                                            */
DrvGPIO.c (lib\src):/*              Enable the interrupt function for external GPIO interrupt from /INT1(GPB.15) pin.          */
DrvGPIO.c (lib\src):void DrvGPIO_EnableEINT1(E_DRVGPIO_INT_TYPE TriggerType, E_DRVGPIO_INT_MODE Mode, GPIO_EINT1_CALLBACK pfEINT1Callback)
DrvGPIO.c (lib\src):    if ((TriggerType == E_IO_BOTH_EDGE) && (Mode == E_MODE_LEVEL))
DrvGPIO.c (lib\src):    u32Reg = (uint32_t)&GPIOA->IEN + (E_GPB*PORT_OFFSET);
DrvGPIO.c (lib\src):	if (TriggerType == E_IO_RISING)
DrvGPIO.c (lib\src):        outpw(u32Reg, inpw(u32Reg) | (1UL<<(15+16)));	 
DrvGPIO.c (lib\src):    else if (TriggerType == E_IO_FALLING)
DrvGPIO.c (lib\src):        outpw(u32Reg, inpw(u32Reg) | (1UL<<(15)));	 
DrvGPIO.c (lib\src):    else if (TriggerType == E_IO_BOTH_EDGE)
DrvGPIO.c (lib\src):        outpw(u32Reg, inpw(u32Reg) | (1UL<<(15))|(1UL<<(15+16)));	 
DrvGPIO.c (lib\src):    u32Reg = (uint32_t)&GPIOA->IMD + (E_GPB*PORT_OFFSET);
DrvGPIO.c (lib\src):		outpw(u32Reg, inpw(u32Reg) & ~(1<<15));
DrvGPIO.c (lib\src):		outpw(u32Reg, inpw(u32Reg) | (1<<15));
DrvGPIO.c (lib\src):    _pfEINT1Callback = pfEINT1Callback;
DrvGPIO.c (lib\src):    NVIC_SetPriority(EINT1_IRQn, (1<<__NVIC_PRIO_BITS) - 2);
DrvGPIO.c (lib\src):/* Function:    DrvGPIO_DisableEINT1                                                                       */
DrvGPIO.c (lib\src):/* Parameter:        																					   */	
DrvGPIO.c (lib\src):/* Description:                                                                                            */
DrvGPIO.c (lib\src):/*              Disable the interrupt function for external GPIO interrupt from /INT1(GPB.15) pin.         */
DrvGPIO.c (lib\src):void DrvGPIO_DisableEINT1(void)
DrvGPIO.c (lib\src):    u32Reg = (uint32_t)&GPIOA->IEN + (E_GPB*PORT_OFFSET);
DrvGPIO.c (lib\src):    outpw(u32Reg, inpw(u32Reg) & ~((1UL<<(15))|(1UL<<(15+16))));	 
DrvGPIO.c (lib\src):/* Function:    DrvGPIO_GetIntStatus                                                                       */
DrvGPIO.c (lib\src):/* Parameter:        																					   */	
DrvGPIO.c (lib\src):/*	            port - [in]                                                                                */
DrvGPIO.c (lib\src):/*                  E_DRVGPIO_PORT, specify GPIO port. It could be E_GPA, E_GPB, E_GPC, E_GPD and E_GPE.   */
DrvGPIO.c (lib\src):/*              The portt value of the specified register		0 ~ 0xFFFF                                 */
DrvGPIO.c (lib\src):/* Description:                                                                                            */
DrvGPIO.c (lib\src):/*              Get the port value from the specified Interrupt Trigger Source Indicator Register.	       */
DrvGPIO.c (lib\src):/*              If the corresponding bit of the return port value is 1, it's meaning the interrupt		   */ 
DrvGPIO.c (lib\src):/*				occurred at the corresponding bit. Otherwise, no interrupt occurred at that bit.           */
DrvGPIO.c (lib\src):int32_t DrvGPIO_GetIntStatus(E_DRVGPIO_PORT port)
DrvGPIO.c (lib\src):	GPIO_T * tGPIO;
DrvGPIO.c (lib\src):	tGPIO = (GPIO_T *)((uint32_t)GPIOA + (port*PORT_OFFSET));  
DrvGPIO.c (lib\src):	return tGPIO->ISRC;
DrvGPIO.c (lib\src):/* Function:    DrvGPIO_InitFunction                                                                       */
DrvGPIO.c (lib\src):/* Parameter:        																					   */	
DrvGPIO.c (lib\src):/*                  E_DRVGPIO_FUNC, specified the relative GPIO pins as special function pins.             */
DrvGPIO.c (lib\src):/*                              E_FUNC_GPIO,                                                               */
DrvGPIO.c (lib\src):/*                                  set all IO pins as GPIO pins.                                          */
DrvGPIO.c (lib\src):/*                                  GPA-10/11 as SDA1/SCL1 pins.                                           */
DrvGPIO.c (lib\src):/*                                  GPB-0~3 as UART0 RX, TX, RTS and CTS pins.                             */
DrvGPIO.c (lib\src):/*                                  GPB-0 and GPB-1 as UART0 RX and TX pins.                               */
DrvGPIO.c (lib\src):/*                                  GPB-2 and GPB-3 as UART0 RTS and CTS pins.                             */
DrvGPIO.c (lib\src):/*                                  GPB-4~7 as UART1 RX, TX, RTS and CTS pins.                             */
DrvGPIO.c (lib\src):/*                                  GPB-4 and GPB-5 as UART1 RX and TX pins.                               */
DrvGPIO.c (lib\src):/*                                  GPB-6 and GPB-7 as UART1 RTS and CTS pins.                             */
DrvGPIO.c (lib\src):/*                              E_FUNC_SPI0,                                                               */
DrvGPIO.c (lib\src):/*                                  GPC-0~3 as SPI0 SS0, CLK, MISO0, MOSI0,                                */
DrvGPIO.c (lib\src):/*                              E_FUNC_SPI0_SS1,                                                           */
DrvGPIO.c (lib\src):/*                                  GPB-10 as SPI0 SS1.                                                    */
DrvGPIO.c (lib\src):/*                              E_FUNC_SPI1,                                                               */
DrvGPIO.c (lib\src):/*                                  GPC-8~11 as SPI1 SS0, CLK, MISO0, MOSI0,                               */
DrvGPIO.c (lib\src):/*                              E_FUNC_SPI1_SS1_PB9,                                                       */
DrvGPIO.c (lib\src):/*                                  GPB-9 as SPI1 SS1.                                                     */
DrvGPIO.c (lib\src):/*                              E_FUNC_SPI1_SS1_PB4_QFN33,                                                 */
DrvGPIO.c (lib\src):/*                                  GPB-4 as SPI1 SS1 for QFN33 package.                                   */
DrvGPIO.c (lib\src):/*                                  GPB-14 and GPB-15 as external interrupt-0 and interrupt-1 pins.        */
DrvGPIO.c (lib\src):/*                                  GPB-8~10 as external counter input or toggle out pins.                 */
DrvGPIO.c (lib\src):/*                              E_FUNC_PWM01 / E_FUNC_PWM23/ E_FUNC_PWM0 / E_FUNC_PWM1                     */
DrvGPIO.c (lib\src):/*                                           / E_FUNC_PWM2 / E_FUNC_PWM3,                                  */
DrvGPIO.c (lib\src):/*                                  GPA-12~15 as PWM0~3.                                                   */
DrvGPIO.c (lib\src):/*              E_SUCCESS										Operation successful                       */
DrvGPIO.c (lib\src):/*              E_DRVGPIO_ARGUMENT								Incorrect argument                         */
DrvGPIO.c (lib\src):/* Description:                                                                                            */
DrvGPIO.c (lib\src):/*              Initialize the specified function and configure the relative pins             			   */
DrvGPIO.c (lib\src):/*              for specified function used.                											   */
DrvGPIO.c (lib\src):int32_t DrvGPIO_InitFunction(E_DRVGPIO_FUNC function)
DrvGPIO.c (lib\src):		/* GPIO                                                                                                    */
DrvGPIO.c (lib\src):		case E_FUNC_GPIO:
DrvGPIO.c (lib\src):		  	outpw(&SYS->GPAMFP, 0);
DrvGPIO.c (lib\src):			outpw(&SYS->GPBMFP, 0);
DrvGPIO.c (lib\src):			outpw(&SYS->GPCMFP, 0);
DrvGPIO.c (lib\src):			outpw(&SYS->GPDMFP, 0);
DrvGPIO.c (lib\src):            outpw(&SYS->GPAMFP, inpw(&SYS->GPAMFP) | (0x3<<10));
DrvGPIO.c (lib\src):            outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) & ~(0x1<<11));
DrvGPIO.c (lib\src):                outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0xF<<(0+u8Offset)));
DrvGPIO.c (lib\src):                    outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) & ~(0x1<<11));
DrvGPIO.c (lib\src):                    outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) & ~(0x7<<15));
DrvGPIO.c (lib\src):                outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0x3<<(0+u8Offset)));
DrvGPIO.c (lib\src):                    outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) & ~(0x1<<15));
DrvGPIO.c (lib\src):                outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0x3<<(2+u8Offset)));
DrvGPIO.c (lib\src):                    outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) & ~(0x1<<11));
DrvGPIO.c (lib\src):                    outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) & ~(0x3<<16));
DrvGPIO.c (lib\src):        /* SPI                                                                                                     */
DrvGPIO.c (lib\src):        case E_FUNC_SPI0:   
DrvGPIO.c (lib\src):            outpw(&SYS->GPCMFP, inpw(&SYS->GPCMFP) | (0xF<<0));
DrvGPIO.c (lib\src):            outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) & ~(0xF<<5));
DrvGPIO.c (lib\src):        case E_FUNC_SPI0_SS1:    
DrvGPIO.c (lib\src):            outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0x1<<10));
DrvGPIO.c (lib\src):            outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) | (0x1<<0));
DrvGPIO.c (lib\src):        case E_FUNC_SPI1:
DrvGPIO.c (lib\src):            outpw(&SYS->GPCMFP, inpw(&SYS->GPCMFP) | (0xF<<8));
DrvGPIO.c (lib\src):            outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) & ~(0xF<<16));
DrvGPIO.c (lib\src):        case E_FUNC_SPI1_SS1_PB9:
DrvGPIO.c (lib\src):            outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0x1<<9));
DrvGPIO.c (lib\src):            outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) | (0x1<<1));
DrvGPIO.c (lib\src):        case E_FUNC_SPI1_SS1_PB4_QFN33:
DrvGPIO.c (lib\src):            outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0x1<<4));
DrvGPIO.c (lib\src):            outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) | (0x1<<15));
DrvGPIO.c (lib\src):        /* External Interrupt                                                                                      */
DrvGPIO.c (lib\src):            outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0x1<<14));
DrvGPIO.c (lib\src):            outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) & ~(0x1<<3));
DrvGPIO.c (lib\src):            outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0x1<<15));
DrvGPIO.c (lib\src):            outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0x1<<8));
DrvGPIO.c (lib\src):            outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0x1<<9));
DrvGPIO.c (lib\src):            outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) & ~(0x1<<1));
DrvGPIO.c (lib\src):            outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0x1<<10));
DrvGPIO.c (lib\src):            outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) & ~(0x1<<0));
DrvGPIO.c (lib\src):        /* PWM                                                                                                     */
DrvGPIO.c (lib\src):        case E_FUNC_PWM0:
DrvGPIO.c (lib\src):        case E_FUNC_PWM1:
DrvGPIO.c (lib\src):        case E_FUNC_PWM01:
DrvGPIO.c (lib\src):            if (function == E_FUNC_PWM01)
DrvGPIO.c (lib\src):                outpw(&SYS->GPAMFP, inpw(&SYS->GPAMFP) | (0x3<<12));
DrvGPIO.c (lib\src):                outpw(&SYS->GPAMFP, inpw(&SYS->GPAMFP) | (0x1<<(12+(function-E_FUNC_PWM0))));
DrvGPIO.c (lib\src):            outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) & ~(0x1<<11));
DrvGPIO.c (lib\src):        case E_FUNC_PWM2:
DrvGPIO.c (lib\src):        case E_FUNC_PWM3:
DrvGPIO.c (lib\src):        case E_FUNC_PWM23:
DrvGPIO.c (lib\src):            if (function == E_FUNC_PWM23)
DrvGPIO.c (lib\src):                outpw(&SYS->GPAMFP, inpw(&SYS->GPAMFP) | (0x3<<14));
DrvGPIO.c (lib\src):                outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) & ~(0x1<<9));
DrvGPIO.c (lib\src):                outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) & ~(0x1<<11));
DrvGPIO.c (lib\src):                outpw(&SYS->GPAMFP, inpw(&SYS->GPAMFP) | (0x1<<(14+(function-E_FUNC_PWM2))));
DrvGPIO.c (lib\src):                if (function == E_FUNC_PWM2)
DrvGPIO.c (lib\src):                    outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) & ~(0x1<<11));
DrvGPIO.c (lib\src):                    outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) & ~(0x1<<9));
DrvGPIO.c (lib\src):            return E_DRVGPIO_ARGUMENT;
DrvGPIO.c (lib\src):/* Function:    DrvGPIO_GetVersion                                                                         */
DrvGPIO.c (lib\src):/* Parameter:        																					   */	
DrvGPIO.c (lib\src):/*              The version number of GPIO driver                                                          */
DrvGPIO.c (lib\src):/* Description:                                                                                            */
DrvGPIO.c (lib\src):/*              This function is used to return the version number of GPIO driver.                         */
DrvGPIO.c (lib\src):int32_t DrvGPIO_GetVersion(void)
DrvGPIO.c (lib\src):   return DRVGPIO_VERSION_NUM;
DrvGPIO.h (lib\inc):/* Copyright(c) 2009 Nuvoton Technology Corp. All rights reserved.                                         */
DrvGPIO.h (lib\inc):#ifndef DRVGPIO_H
DrvGPIO.h (lib\inc):#define DRVGPIO_H
DrvGPIO.h (lib\inc):#define DRVGPIO_MAJOR_NUM       1
DrvGPIO.h (lib\inc):#define DRVGPIO_MINOR_NUM       02
DrvGPIO.h (lib\inc):#define DRVGPIO_BUILD_NUM       002
DrvGPIO.h (lib\inc):#define DRVGPIO_VERSION_NUM     _SYSINFRA_VERSION(DRVGPIO_MAJOR_NUM, DRVGPIO_MINOR_NUM, DRVGPIO_BUILD_NUM)
DrvGPIO.h (lib\inc):#define E_DRVGPIO_ARGUMENT          _SYSINFRA_ERRCODE(TRUE, MODULE_ID_DRVGPIO, 1)
DrvGPIO.h (lib\inc):#define E_DRVGPIO_GROUP_PIN         _SYSINFRA_ERRCODE(TRUE, MODULE_ID_DRVGPIO, 2)
DrvGPIO.h (lib\inc):#define E_DRVGPIO_BUSY              _SYSINFRA_ERRCODE(TRUE, MODULE_ID_DRVGPIO, 3)   
DrvGPIO.h (lib\inc):typedef void (*GPIO_GPAB_CALLBACK)(uint32_t u32GPAStatus, uint32_t u32GPBStatus);
DrvGPIO.h (lib\inc):typedef void (*GPIO_GPCD_CALLBACK)(uint32_t u32GPCStatus, uint32_t u32GPDStatus);
DrvGPIO.h (lib\inc):typedef void (*GPIO_EINT0_CALLBACK)(void);
DrvGPIO.h (lib\inc):typedef void (*GPIO_EINT1_CALLBACK)(void);
DrvGPIO.h (lib\inc):/* Define GPIO[n] Pin I/O Bit Output/Input Control. */
DrvGPIO.h (lib\inc):#define _DRVGPIO_DOUT(PortNum, PinNum)      (*((volatile uint32_t *) ((GPIO_BIT_ADDR_BASE+(0x40*PortNum)) + (0x4*PinNum))))    
DrvGPIO.h (lib\inc):#define GPA_0	            _DRVGPIO_DOUT(0, 0)
DrvGPIO.h (lib\inc):#define GPA_1	            _DRVGPIO_DOUT(0, 1)
DrvGPIO.h (lib\inc):#define GPA_2	            _DRVGPIO_DOUT(0, 2)
DrvGPIO.h (lib\inc):#define GPA_3	            _DRVGPIO_DOUT(0, 3)
DrvGPIO.h (lib\inc):#define GPA_4	            _DRVGPIO_DOUT(0, 4)
DrvGPIO.h (lib\inc):#define GPA_5	            _DRVGPIO_DOUT(0, 5)
DrvGPIO.h (lib\inc):#define GPA_6	            _DRVGPIO_DOUT(0, 6)
DrvGPIO.h (lib\inc):#define GPA_7	            _DRVGPIO_DOUT(0, 7)
DrvGPIO.h (lib\inc):#define GPA_8	            _DRVGPIO_DOUT(0, 8)
DrvGPIO.h (lib\inc):#define GPA_9	            _DRVGPIO_DOUT(0, 9)
DrvGPIO.h (lib\inc):#define GPA_10	            _DRVGPIO_DOUT(0, 10)
DrvGPIO.h (lib\inc):#define GPA_11	            _DRVGPIO_DOUT(0, 11)
DrvGPIO.h (lib\inc):#define GPA_12	            _DRVGPIO_DOUT(0, 12)
DrvGPIO.h (lib\inc):#define GPA_13	            _DRVGPIO_DOUT(0, 13)
DrvGPIO.h (lib\inc):#define GPA_14	            _DRVGPIO_DOUT(0, 14)
DrvGPIO.h (lib\inc):#define GPA_15	            _DRVGPIO_DOUT(0, 15)
DrvGPIO.h (lib\inc):#define GPB_0	            _DRVGPIO_DOUT(1, 0)
DrvGPIO.h (lib\inc):#define GPB_1	            _DRVGPIO_DOUT(1, 1)
DrvGPIO.h (lib\inc):#define GPB_2	            _DRVGPIO_DOUT(1, 2)
DrvGPIO.h (lib\inc):#define GPB_3	            _DRVGPIO_DOUT(1, 3)
DrvGPIO.h (lib\inc):#define GPB_4	            _DRVGPIO_DOUT(1, 4)
DrvGPIO.h (lib\inc):#define GPB_5	            _DRVGPIO_DOUT(1, 5)
DrvGPIO.h (lib\inc):#define GPB_6	            _DRVGPIO_DOUT(1, 6)
DrvGPIO.h (lib\inc):#define GPB_7	            _DRVGPIO_DOUT(1, 7)
DrvGPIO.h (lib\inc):#define GPB_8	            _DRVGPIO_DOUT(1, 8)
DrvGPIO.h (lib\inc):#define GPB_9	            _DRVGPIO_DOUT(1, 9)
DrvGPIO.h (lib\inc):#define GPB_10	            _DRVGPIO_DOUT(1, 10)
DrvGPIO.h (lib\inc):#define GPB_11	            _DRVGPIO_DOUT(1, 11)
DrvGPIO.h (lib\inc):#define GPB_12	            _DRVGPIO_DOUT(1, 12)
DrvGPIO.h (lib\inc):#define GPB_13	            _DRVGPIO_DOUT(1, 13)
DrvGPIO.h (lib\inc):#define GPB_14	            _DRVGPIO_DOUT(1, 14)
DrvGPIO.h (lib\inc):#define GPB_15	            _DRVGPIO_DOUT(1, 15)
DrvGPIO.h (lib\inc):#define GPC_0	            _DRVGPIO_DOUT(2, 0)
DrvGPIO.h (lib\inc):#define GPC_1	            _DRVGPIO_DOUT(2, 1)
DrvGPIO.h (lib\inc):#define GPC_2	            _DRVGPIO_DOUT(2, 2)
DrvGPIO.h (lib\inc):#define GPC_3	            _DRVGPIO_DOUT(2, 3)
DrvGPIO.h (lib\inc):#define GPC_4	            _DRVGPIO_DOUT(2, 4)
DrvGPIO.h (lib\inc):#define GPC_5	            _DRVGPIO_DOUT(2, 5)
DrvGPIO.h (lib\inc):#define GPC_6	            _DRVGPIO_DOUT(2, 6)
DrvGPIO.h (lib\inc):#define GPC_7	            _DRVGPIO_DOUT(2, 7)
DrvGPIO.h (lib\inc):#define GPC_8	            _DRVGPIO_DOUT(2, 8)
DrvGPIO.h (lib\inc):#define GPC_9	            _DRVGPIO_DOUT(2, 9)
DrvGPIO.h (lib\inc):#define GPC_10	            _DRVGPIO_DOUT(2, 10)
DrvGPIO.h (lib\inc):#define GPC_11	            _DRVGPIO_DOUT(2, 11)
DrvGPIO.h (lib\inc):#define GPC_12	            _DRVGPIO_DOUT(2, 12)
DrvGPIO.h (lib\inc):#define GPC_13	            _DRVGPIO_DOUT(2, 13)
DrvGPIO.h (lib\inc):#define GPC_14	            _DRVGPIO_DOUT(2, 14)
DrvGPIO.h (lib\inc):#define GPC_15	            _DRVGPIO_DOUT(2, 15)
DrvGPIO.h (lib\inc):#define GPD_0	            _DRVGPIO_DOUT(3, 0)
DrvGPIO.h (lib\inc):#define GPD_1	            _DRVGPIO_DOUT(3, 1)
DrvGPIO.h (lib\inc):#define GPD_2	            _DRVGPIO_DOUT(3, 2)
DrvGPIO.h (lib\inc):#define GPD_3	            _DRVGPIO_DOUT(3, 3)
DrvGPIO.h (lib\inc):#define GPD_4	            _DRVGPIO_DOUT(3, 4)
DrvGPIO.h (lib\inc):#define GPD_5	            _DRVGPIO_DOUT(3, 5)
DrvGPIO.h (lib\inc):#define GPD_6	            _DRVGPIO_DOUT(3, 6)
DrvGPIO.h (lib\inc):#define GPD_7	            _DRVGPIO_DOUT(3, 7)
DrvGPIO.h (lib\inc):#define GPD_8	            _DRVGPIO_DOUT(3, 8)
DrvGPIO.h (lib\inc):#define GPD_9	            _DRVGPIO_DOUT(3, 9)
DrvGPIO.h (lib\inc):#define GPD_10	            _DRVGPIO_DOUT(3, 10)
DrvGPIO.h (lib\inc):#define GPD_11	            _DRVGPIO_DOUT(3, 11)
DrvGPIO.h (lib\inc):#define GPD_12	            _DRVGPIO_DOUT(3, 12)
DrvGPIO.h (lib\inc):#define GPD_13	            _DRVGPIO_DOUT(3, 13)
DrvGPIO.h (lib\inc):#define GPD_14	            _DRVGPIO_DOUT(3, 14)
DrvGPIO.h (lib\inc):#define GPD_15	            _DRVGPIO_DOUT(3, 15)
DrvGPIO.h (lib\inc):typedef enum 
DrvGPIO.h (lib\inc):	E_GPA = 0,
DrvGPIO.h (lib\inc):	E_GPB = 1, 
DrvGPIO.h (lib\inc):	E_GPC = 2, 
DrvGPIO.h (lib\inc):	E_GPD = 3, 
DrvGPIO.h (lib\inc):} E_DRVGPIO_PORT;
DrvGPIO.h (lib\inc):typedef enum 
DrvGPIO.h (lib\inc):    E_IO_INPUT = 0,
DrvGPIO.h (lib\inc):    E_IO_OUTPUT,
DrvGPIO.h (lib\inc):    E_IO_OPENDRAIN,
DrvGPIO.h (lib\inc):} E_DRVGPIO_IO;
DrvGPIO.h (lib\inc):typedef enum 
DrvGPIO.h (lib\inc):} E_DRVGPIO_INT_TYPE;
DrvGPIO.h (lib\inc):typedef enum
DrvGPIO.h (lib\inc):} E_DRVGPIO_INT_MODE;
DrvGPIO.h (lib\inc):typedef enum
DrvGPIO.h (lib\inc):} E_DRVGPIO_DBCLKSRC;	   
DrvGPIO.h (lib\inc):typedef enum
DrvGPIO.h (lib\inc):    E_FUNC_GPIO,    E_FUNC_I2C1,
DrvGPIO.h (lib\inc):    E_FUNC_SPI0,    E_FUNC_SPI0_SS1, 
DrvGPIO.h (lib\inc):    E_FUNC_SPI1,    E_FUNC_SPI1_SS1_PB9,  E_FUNC_SPI1_SS1_PB4_QFN33,
DrvGPIO.h (lib\inc):    E_FUNC_PWM01,   E_FUNC_PWM23,
DrvGPIO.h (lib\inc):    E_FUNC_PWM0,    E_FUNC_PWM1,    E_FUNC_PWM2,    E_FUNC_PWM3,
DrvGPIO.h (lib\inc):} E_DRVGPIO_FUNC;
DrvGPIO.h (lib\inc):/* Define GPIO functions prototype                                                                         */
DrvGPIO.h (lib\inc):int32_t DrvGPIO_Open(E_DRVGPIO_PORT port, int32_t i32Bit, E_DRVGPIO_IO mode);
DrvGPIO.h (lib\inc):int32_t DrvGPIO_Close(E_DRVGPIO_PORT port, int32_t i32Bit);
DrvGPIO.h (lib\inc):int32_t DrvGPIO_SetBit(E_DRVGPIO_PORT port, int32_t i32Bit);
DrvGPIO.h (lib\inc):int32_t DrvGPIO_GetBit(E_DRVGPIO_PORT port, int32_t i32Bit);
DrvGPIO.h (lib\inc):int32_t DrvGPIO_ClrBit(E_DRVGPIO_PORT port, int32_t i32Bit);
DrvGPIO.h (lib\inc):int32_t DrvGPIO_SetPortBits(E_DRVGPIO_PORT port, int32_t i32Data);
DrvGPIO.h (lib\inc):int32_t DrvGPIO_GetPortBits(E_DRVGPIO_PORT port);
DrvGPIO.h (lib\inc):int32_t DrvGPIO_GetDoutBit(E_DRVGPIO_PORT port, int32_t i32Bit);
DrvGPIO.h (lib\inc):int32_t DrvGPIO_GetPortDoutBits(E_DRVGPIO_PORT port);
DrvGPIO.h (lib\inc):int32_t DrvGPIO_SetBitMask(E_DRVGPIO_PORT port, int32_t i32Bit);
DrvGPIO.h (lib\inc):int32_t DrvGPIO_GetBitMask(E_DRVGPIO_PORT port, int32_t i32Bit);
DrvGPIO.h (lib\inc):int32_t DrvGPIO_ClrBitMask(E_DRVGPIO_PORT port, int32_t i32Bit);
DrvGPIO.h (lib\inc):int32_t DrvGPIO_SetPortMask(E_DRVGPIO_PORT port, int32_t i32MaskData);
DrvGPIO.h (lib\inc):int32_t DrvGPIO_GetPortMask(E_DRVGPIO_PORT port);
DrvGPIO.h (lib\inc):int32_t DrvGPIO_ClrPortMask(E_DRVGPIO_PORT port, int32_t i32MaskData);
DrvGPIO.h (lib\inc):int32_t DrvGPIO_EnableDigitalInputBit(E_DRVGPIO_PORT port, int32_t i32Bit);
DrvGPIO.h (lib\inc):int32_t DrvGPIO_DisableDigitalInputBit(E_DRVGPIO_PORT port, int32_t i32Bit);
DrvGPIO.h (lib\inc):int32_t DrvGPIO_EnableDebounce(E_DRVGPIO_PORT port, int32_t i32Bit);
DrvGPIO.h (lib\inc):int32_t DrvGPIO_DisableDebounce(E_DRVGPIO_PORT port, int32_t i32Bit);
DrvGPIO.h (lib\inc):int32_t DrvGPIO_SetDebounceTime(uint32_t u32CycleSelection, E_DRVGPIO_DBCLKSRC ClockSource);
DrvGPIO.h (lib\inc):int32_t DrvGPIO_GetDebounceSampleCycle(void);
DrvGPIO.h (lib\inc):int32_t DrvGPIO_EnableInt(E_DRVGPIO_PORT port, int32_t i32Bit, E_DRVGPIO_INT_TYPE TriggerType, E_DRVGPIO_INT_MODE Mode);
DrvGPIO.h (lib\inc):int32_t DrvGPIO_DisableInt(E_DRVGPIO_PORT port, int32_t i32Bit);
DrvGPIO.h (lib\inc):void DrvGPIO_SetIntCallback(GPIO_GPAB_CALLBACK pfGPABCallback, GPIO_GPCD_CALLBACK pfGPCDCallback);
DrvGPIO.h (lib\inc):void DrvGPIO_EnableEINT0(E_DRVGPIO_INT_TYPE TriggerType, E_DRVGPIO_INT_MODE Mode, GPIO_EINT0_CALLBACK pfEINT0Callback);
DrvGPIO.h (lib\inc):void DrvGPIO_DisableEINT0(void);
DrvGPIO.h (lib\inc):void DrvGPIO_EnableEINT1(E_DRVGPIO_INT_TYPE TriggerType, E_DRVGPIO_INT_MODE Mode, GPIO_EINT1_CALLBACK pfEINT1Callback);
DrvGPIO.h (lib\inc):void DrvGPIO_DisableEINT1(void);
DrvGPIO.h (lib\inc):int32_t DrvGPIO_GetIntStatus(E_DRVGPIO_PORT port);
DrvGPIO.h (lib\inc):int32_t DrvGPIO_InitFunction(E_DRVGPIO_FUNC function);
DrvGPIO.h (lib\inc):int32_t DrvGPIO_GetVersion(void);
DrvGPIO.h (lib\inc):void GPAB_IRQHandler(void);
DrvGPIO.h (lib\inc):void GPCD_IRQHandler(void);
DrvSYS.c (lib\src):/* Copyright(c) 2009 Nuvoton Technology Corp. All rights reserved.                                         */
DrvSYS.c (lib\src):/* Global file scope (static) variables                                                                    */
DrvSYS.c (lib\src):static PWRWU_CALLBACK PWRWU_callbackFn;
DrvSYS.c (lib\src):/* Parameters:                                                                                             */
DrvSYS.c (lib\src):/* Description:                                                                                            */
DrvSYS.c (lib\src):/* Function: DrvSYS_ReadProductID                                                                          */
DrvSYS.c (lib\src):/* Parameters:                                                                                             */
DrvSYS.c (lib\src):/*               Product ID                                                                                */
DrvSYS.c (lib\src):/* Description:                                                                                            */
DrvSYS.c (lib\src):/*               Read Product ID                                                                           */
DrvSYS.c (lib\src):uint32_t DrvSYS_ReadProductID(void)
DrvSYS.c (lib\src):    return SYS->PDID;
DrvSYS.c (lib\src):/* Function: DrvSYS_UnlockProtectedReg                                                                     */
DrvSYS.c (lib\src):/* Parameters:                                                                                             */
DrvSYS.c (lib\src):/* Description:                                                                                            */
DrvSYS.c (lib\src):/*               Unlock protected registers                                                                */
DrvSYS.c (lib\src):int32_t DrvSYS_UnlockProtectedReg(void)
DrvSYS.c (lib\src):    SYS->REGWRPROT = 0x59;
DrvSYS.c (lib\src):    SYS->REGWRPROT = 0x16;
DrvSYS.c (lib\src):    SYS->REGWRPROT = 0x88;
DrvSYS.c (lib\src):    lockbit = SYS->REGWRPROT & 0x01;
DrvSYS.c (lib\src):/* Function: DrvSYS_LockProtectedReg                                                                       */
DrvSYS.c (lib\src):/* Parameters:                                                                                             */
DrvSYS.c (lib\src):/* Description:                                                                                            */
DrvSYS.c (lib\src):/*               Re-Lock protected registers                                                               */
DrvSYS.c (lib\src):int32_t DrvSYS_LockProtectedReg(void)
DrvSYS.c (lib\src):    SYS->REGWRPROT = 0x00;
DrvSYS.c (lib\src):    lockbit = SYS->REGWRPROT & 0x01;
DrvSYS.c (lib\src):/* Function: DrvSYS_IsProtectedRegLocked                                                                   */
DrvSYS.c (lib\src):/* Parameters:                                                                                             */
DrvSYS.c (lib\src):/*               1: The protected Registers are unlocked                                                   */
DrvSYS.c (lib\src):/*               0: The protected Registers are locked                                                     */
DrvSYS.c (lib\src):/* Description:                                                                                            */
DrvSYS.c (lib\src):/*               This function is used to check the protected registers are locked or not                  */
DrvSYS.c (lib\src):int32_t DrvSYS_IsProtectedRegLocked(void)
DrvSYS.c (lib\src):    return (SYS->REGWRPROT & 0x01);
DrvSYS.c (lib\src):/* Parameters:                                                                                             */
DrvSYS.c (lib\src):/* Description:                                                                                            */
DrvSYS.c (lib\src):/*               Get reset source from last operation                                                      */
DrvSYS.c (lib\src):/* Parameters:                                                                                             */
DrvSYS.c (lib\src):/*               u32Src     - [in]    The corresponding bit of reset source                                */
DrvSYS.c (lib\src):/* Description:                                                                                            */
DrvSYS.c (lib\src):/* Function: DrvSYS_ResetIP                                                                                */
DrvSYS.c (lib\src):/* Parameters:                                                                                             */
DrvSYS.c (lib\src):/*               eIpRst  - [in]     E_SYS_GPIO_RST  / E_SYS_TMR0_RST  / E_SYS_TMR1_RST  / E_SYS_TMR2_RST   */
DrvSYS.c (lib\src):/*                                  E_SYS_TMR3_RST  / E_SYS_I2C_RST   / E_SYS_SPI0_RST  / E_SYS_SPI1_RST   */
DrvSYS.c (lib\src):/*                                  E_SYS_UART0_RST / E_SYS_UART1_RST / E_SYS_PWM03_RST / E_SYS_PS2_RST    */
DrvSYS.c (lib\src):/* Description:                                                                                            */
DrvSYS.c (lib\src):/*               Reset coresponding IP                                                                     */
DrvSYS.c (lib\src):void DrvSYS_ResetIP(E_SYS_IP_RST eIpRst)
DrvSYS.c (lib\src):    u32Reg = *((__IO uint32_t *) &SYS->IPRSTC2);
DrvSYS.c (lib\src):    *((__IO uint32_t *) &SYS->IPRSTC2) = u32Reg | (1<<eIpRst);
DrvSYS.c (lib\src):    *((__IO uint32_t *) &SYS->IPRSTC2) = u32Reg & ~(1<<eIpRst);
DrvSYS.c (lib\src):/* Function: DrvSYS_ResetCPU                                                                               */
DrvSYS.c (lib\src):/* Parameters:                                                                                             */
DrvSYS.c (lib\src):/* Description:                                                                                            */
DrvSYS.c (lib\src):/*               Reset CPU                                                                                 */
DrvSYS.c (lib\src):/*               Please make sure that Register Write-Protection Function has been disabled before using   */
DrvSYS.c (lib\src):/*               this function to reset CPU.                                                               */
DrvSYS.c (lib\src):/*               User can check the status of Register Write-Protection Function                           */
DrvSYS.c (lib\src):/*               with DrvSYS_IsProtectedRegLocked().                                                       */
DrvSYS.c (lib\src):void DrvSYS_ResetCPU(void)
DrvSYS.c (lib\src):    SYS->IPRSTC1.CPU_RST = 1;
DrvSYS.c (lib\src):/* Function: DrvSYS_ResetChip                                                                              */
DrvSYS.c (lib\src):/* Parameters:                                                                                             */
DrvSYS.c (lib\src):/* Description:                                                                                            */
DrvSYS.c (lib\src):/*               Reset whole chip                                                                          */
DrvSYS.c (lib\src):/*               Please make sure that Register Write-Protection Function has been disabled before using   */
DrvSYS.c (lib\src):/*               this function to reset whole chip .                                                       */
DrvSYS.c (lib\src):/*               User can check the status of Register Write-Protection Function                           */
DrvSYS.c (lib\src):/*               with DrvSYS_IsProtectedRegLocked().                                                       */
DrvSYS.c (lib\src):void DrvSYS_ResetChip(void)
DrvSYS.c (lib\src):    SYS->IPRSTC1.CHIP_RST = 1;
DrvSYS.c (lib\src):/* Parameters:                                                                                             */
DrvSYS.c (lib\src):/* Description:                                                                                            */
DrvSYS.c (lib\src):/*               Please make sure that Register Write-Protection Function has been disabled before using   */
DrvSYS.c (lib\src):/*               User can check the status of Register Write-Protection Function                           */
DrvSYS.c (lib\src):/*               with DrvSYS_IsProtectedRegLocked().                                                       */
DrvSYS.c (lib\src):/* Parameters:                                                                                             */
DrvSYS.c (lib\src):/*               i32Flag        - [in]    1: Enable BOD reset function / 0:Enable BOD interrupt function   */
DrvSYS.c (lib\src):/* Description:                                                                                            */
DrvSYS.c (lib\src):/*               Enable Brown-Out Detector, and select BOD reset function or interrupt function.           */
DrvSYS.c (lib\src):/*               And, install call backfunction if interrupt function is selected.                         */
DrvSYS.c (lib\src):/*               Please make sure that Register Write-Protection Function has been disabled before using   */
DrvSYS.c (lib\src):/*               User can check the status of Register Write-Protection Function                           */
DrvSYS.c (lib\src):/*               with DrvSYS_IsProtectedRegLocked().                                                       */
DrvSYS.c (lib\src):            NVIC_SetPriority(BOD_IRQn, (1<<__NVIC_PRIO_BITS) - 2);
DrvSYS.c (lib\src):/* Function: DrvSYS_EnableBODLowPowerMode                                                                  */
DrvSYS.c (lib\src):/* Parameters:                                                                                             */
DrvSYS.c (lib\src):/* Description:                                                                                            */
DrvSYS.c (lib\src):/*               Enable Brown-Out Detector low power mode                                                  */
DrvSYS.c (lib\src):/*               Please make sure that Register Write-Protection Function has been disabled before using   */
DrvSYS.c (lib\src):/*               this function to enable BOD low power mode.                                               */
DrvSYS.c (lib\src):/*               User can check the status of Register Write-Protection Function                           */
DrvSYS.c (lib\src):/*               with DrvSYS_IsProtectedRegLocked().                                                       */
DrvSYS.c (lib\src):void DrvSYS_EnableBODLowPowerMode(void)
DrvSYS.c (lib\src):    SYS->BODCR.BOD_LPM = 1;
DrvSYS.c (lib\src):/* Function: DrvSYS_DisableBODLowPowerMode                                                                 */
DrvSYS.c (lib\src):/* Parameters:                                                                                             */
DrvSYS.c (lib\src):/* Description:                                                                                            */
DrvSYS.c (lib\src):/*               Disable Brown-Out Detector low power mode                                                 */
DrvSYS.c (lib\src):/*               Please make sure that Register Write-Protection Function has been disabled before using   */
DrvSYS.c (lib\src):/*               this function to disable BOD low power mode.                                              */
DrvSYS.c (lib\src):/*               User can check the status of Register Write-Protection Function                           */
DrvSYS.c (lib\src):/*               with DrvSYS_IsProtectedRegLocked().                                                       */
DrvSYS.c (lib\src):void DrvSYS_DisableBODLowPowerMode(void)
DrvSYS.c (lib\src):    SYS->BODCR.BOD_LPM = 0;
DrvSYS.c (lib\src):/* Parameters:                                                                                             */
DrvSYS.c (lib\src):/*               BOD output status  1: the detected voltage is lower than BOD threshold voltage            */
DrvSYS.c (lib\src):/* Description:                                                                                            */
DrvSYS.c (lib\src):/* Parameters:                                                                                             */
DrvSYS.c (lib\src):/* Description:                                                                                            */
DrvSYS.c (lib\src):/*               Please make sure that Register Write-Protection Function has been disabled before using   */
DrvSYS.c (lib\src):/*               User can check the status of Register Write-Protection Function                           */
DrvSYS.c (lib\src):/*               with DrvSYS_IsProtectedRegLocked().                                                       */
DrvSYS.c (lib\src):/* Parameters:                                                                                             */
DrvSYS.c (lib\src):/* Description:                                                                                            */
DrvSYS.c (lib\src):/*               Please make sure that Register Write-Protection Function has been disabled before using   */
DrvSYS.c (lib\src):/*               User can check the status of Register Write-Protection Function                           */
DrvSYS.c (lib\src):/*               with DrvSYS_IsProtectedRegLocked().                                                       */
DrvSYS.c (lib\src):/* Function: DrvSYS_EnablePOR                                                                              */
DrvSYS.c (lib\src):/* Parameters:                                                                                             */
DrvSYS.c (lib\src):/* Description:                                                                                            */
DrvSYS.c (lib\src):/*               Enable power on reset (POR) control                                                       */
DrvSYS.c (lib\src):/*               Please make sure that Register Write-Protection Function has been disabled before using   */
DrvSYS.c (lib\src):/*               this function to enable POR control.                                                      */
DrvSYS.c (lib\src):/*               User can check the status of Register Write-Protection Function                           */
DrvSYS.c (lib\src):/*               with DrvSYS_IsProtectedRegLocked().                                                       */
DrvSYS.c (lib\src):void DrvSYS_EnablePOR(void)
DrvSYS.c (lib\src):    SYS->PORCR = 0;
DrvSYS.c (lib\src):/* Function: DrvSYS_DisablePOR                                                                             */
DrvSYS.c (lib\src):/* Parameters:                                                                                             */
DrvSYS.c (lib\src):/* Description:                                                                                            */
DrvSYS.c (lib\src):/*               Disable power on reset (POR) control                                                      */
DrvSYS.c (lib\src):/*               Please make sure that Register Write-Protection Function has been disabled before using   */
DrvSYS.c (lib\src):/*               this function to disable POR control.                                                     */
DrvSYS.c (lib\src):/*               User can check the status of Register Write-Protection Function                           */
DrvSYS.c (lib\src):/*               with DrvSYS_IsProtectedRegLocked().                                                       */
DrvSYS.c (lib\src):void DrvSYS_DisablePOR(void)
DrvSYS.c (lib\src):    SYS->PORCR = 0x5AA5;
DrvSYS.c (lib\src):/* Parameter:                                                                                              */
DrvSYS.c (lib\src):/* Description:                                                                                            */
DrvSYS.c (lib\src):/*               ISR to handle BOD interrupt event                                                         */
DrvSYS.c (lib\src):/* Function: DrvSYS_SetIPClock                                                                             */
DrvSYS.c (lib\src):/* Parameters:                                                                                             */
DrvSYS.c (lib\src):/*               eIpClk     - [in]  E_SYS_WDT_CLK   / E_SYS_RTC_CLK   / E_SYS_TMR0_CLK  / E_SYS_TMR1_CLK   */
DrvSYS.c (lib\src):/*                                  E_SYS_TMR2_CLK  / E_SYS_TMR3_CLK  / E_SYS_I2C_CLK   / E_SYS_SPI0_CLK   */
DrvSYS.c (lib\src):/*                                  E_SYS_SPI1_CLK  / E_SYS_UART0_CLK / E_SYS_UART1_CLK / E_SYS_PWM01_CLK  */
DrvSYS.c (lib\src):/*                                  E_SYS_PWM23_CLK / E_SYS_USBD_CLK  / E_SYS_PS2_CLK   / E_SYS_ISP_CLK    */
DrvSYS.c (lib\src):/* Description:                                                                                            */
DrvSYS.c (lib\src):/*               Enable/Disable coresponding IP clock                                                      */
DrvSYS.c (lib\src):/*               Please make sure that Register Write-Protection Function has been disabled before using   */
DrvSYS.c (lib\src):/*               User can check the status of Register Write-Protection Function                           */
DrvSYS.c (lib\src):/*               with DrvSYS_IsProtectedRegLocked().                                                       */
DrvSYS.c (lib\src):void DrvSYS_SetIPClock(E_SYS_IP_CLK eIpClk, int32_t i32Enable)
DrvSYS.c (lib\src):    if (eIpClk == E_SYS_ISP_CLK)
DrvSYS.c (lib\src):        SYSCLK->AHBCLK.ISP_EN = i32Enable;
DrvSYS.c (lib\src):        u32Reg = *((__IO uint32_t *) &SYSCLK->APBCLK);
DrvSYS.c (lib\src):            *((__IO uint32_t *) &SYSCLK->APBCLK) = u32Reg | (1<<eIpClk);
DrvSYS.c (lib\src):            *((__IO uint32_t *) &SYSCLK->APBCLK) = u32Reg & ~(1<<eIpClk);
DrvSYS.c (lib\src):/* Parameters:                                                                                             */
DrvSYS.c (lib\src):/*                                      2: PLL clock                                                       */
DrvSYS.c (lib\src):/* Description:                                                                                            */
DrvSYS.c (lib\src):/*               Please make sure that Register Write-Protection Function has been disabled before using   */
DrvSYS.c (lib\src):/*               User can check the status of Register Write-Protection Function                           */
DrvSYS.c (lib\src):/*               with DrvSYS_IsProtectedRegLocked().                                                       */
DrvSYS.c (lib\src):    SystemCoreClockUpdate();
DrvSYS.c (lib\src):/* Parameters:                                                                                             */
DrvSYS.c (lib\src):/* Description:                                                                                            */
DrvSYS.c (lib\src):/*               Please make sure that Register Write-Protection Function has been disabled before using   */
DrvSYS.c (lib\src):/*               User can check the status of Register Write-Protection Function                           */
DrvSYS.c (lib\src):/*               with DrvSYS_IsProtectedRegLocked().                                                       */
DrvSYS.c (lib\src):/* Function: DrvSYS_SelectIPClockSource                                                                    */
DrvSYS.c (lib\src):/* Parameters:                                                                                             */
DrvSYS.c (lib\src):/*              eIpClkSrc    - [in]     E_SYS_WDT_CLKSRC   / E_SYS_TMR0_CLKSRC  / E_SYS_TMR1_CLKSRC        */
DrvSYS.c (lib\src):/*                                      E_SYS_PWM01_CLKSRC / E_SYS_PWM23_CLKSRC                            */
DrvSYS.c (lib\src):/*              u8ClkSrcSel  - [in]     Corresponding clock source                                         */
DrvSYS.c (lib\src):/*           |      UART     | External 12M |     PLL      |   Reserved   | Internal 22M |      X       |  */
DrvSYS.c (lib\src):/*           |      PWM      | External 12M | External 32K |     HCLK     | Internal 22M |      X       |  */
DrvSYS.c (lib\src):/* Description:                                                                                            */
DrvSYS.c (lib\src):/*               This function is used to select IP clock source                                           */
DrvSYS.c (lib\src):/*               Please make sure that Register Write-Protection Function has been disabled before using   */
DrvSYS.c (lib\src):/*               User can check the status of Register Write-Protection Function                           */
DrvSYS.c (lib\src):/*               with DrvSYS_IsProtectedRegLocked().                                                       */
DrvSYS.c (lib\src):int32_t DrvSYS_SelectIPClockSource(E_SYS_IP_CLKSRC eIpClkSrc, uint8_t u8ClkSrcSel)
DrvSYS.c (lib\src):    switch(eIpClkSrc)
DrvSYS.c (lib\src):        case E_SYS_PWM23_CLKSRC:  
DrvSYS.c (lib\src):            SYSCLK->CLKSEL1.PWM23_S = u8ClkSrcSel;
DrvSYS.c (lib\src):        case E_SYS_PWM01_CLKSRC:
DrvSYS.c (lib\src):            SYSCLK->CLKSEL1.PWM01_S = u8ClkSrcSel;
DrvSYS.c (lib\src):            return E_DRVSYS_ERR_IPSRC;
DrvSYS.c (lib\src):/* Parameters:                                                                                             */
DrvSYS.c (lib\src):/*           eIpDiv  - [in] E_SYS_UART_DIV / E_SYS_USBD_DIV / E_SYS_HCLK_DIV                               */
DrvSYS.c (lib\src):/*           E_DRVSYS_ERR_IPDIV     : Incorrect IP divider selection                                       */
DrvSYS.c (lib\src):/* Description:                                                                                            */
DrvSYS.c (lib\src):/*               This function is used to set IP divider number from the corresponding clock source        */
DrvSYS.c (lib\src):int32_t DrvSYS_SetClockDivider(E_SYS_IP_DIV eIpDiv , uint8_t u8value)
DrvSYS.c (lib\src):    if (eIpDiv == E_SYS_UART_DIV)
DrvSYS.c (lib\src):    else if (eIpDiv == E_SYS_USBD_DIV)
DrvSYS.c (lib\src):    else if(eIpDiv == E_SYS_HCLK_DIV)
DrvSYS.c (lib\src):        SystemCoreClockUpdate();
DrvSYS.c (lib\src):        return E_DRVSYS_ERR_IPDIV;
DrvSYS.c (lib\src):/* Parameters:                                                                                             */
DrvSYS.c (lib\src):/* Description:                                                                                            */
DrvSYS.c (lib\src):/*               Please make sure that Register Write-Protection Function has been disabled before using   */
DrvSYS.c (lib\src):/*               User can check the status of Register Write-Protection Function                           */
DrvSYS.c (lib\src):/*               with DrvSYS_IsProtectedRegLocked().                                                       */
DrvSYS.c (lib\src):int32_t DrvSYS_SetOscCtrl(E_SYS_CHIP_CLKSRC eClkSrc, int32_t i32Enable)
DrvSYS.c (lib\src):            SYSCLK->PWRCON.XTL12M_EN = i32Enable;
DrvSYS.c (lib\src):            SYSCLK->PWRCON.XTL32K_EN = i32Enable;
DrvSYS.c (lib\src):            SYSCLK->PWRCON.OSC22M_EN = i32Enable;
DrvSYS.c (lib\src):            SYSCLK->PWRCON.OSC10K_EN = i32Enable;
DrvSYS.c (lib\src):/* Function:     <PWRWU_IRQHandler>                                                                        */
DrvSYS.c (lib\src):/* Parameter:                                                                                              */
DrvSYS.c (lib\src):/* Description:                                                                                            */
DrvSYS.c (lib\src):/*               ISR to handle Power Down Wake up interrupt event                                          */
DrvSYS.c (lib\src):void PWRWU_IRQHandler(void)
DrvSYS.c (lib\src):    SYSCLK->PWRCON.PD_WU_STS = 1;
DrvSYS.c (lib\src):    if (PWRWU_callbackFn != NULL)
DrvSYS.c (lib\src):        PWRWU_callbackFn(); 
DrvSYS.c (lib\src):/* Function: DrvSYS_SetPowerDownWakeUpInt                                                                  */
DrvSYS.c (lib\src):/* Parameters:                                                                                             */
DrvSYS.c (lib\src):/*               i32Enable      - [in]  1: Enable Power dowm Wake up interrup                              */
DrvSYS.c (lib\src):/*                                      0: Disable Power dowm Wake up interrup                             */
DrvSYS.c (lib\src):/*               pdwucallbackFn - [in]  Power Down Wake Up Call back function                              */
DrvSYS.c (lib\src):/* Description:                                                                                            */
DrvSYS.c (lib\src):/*               Enable or disable Power dowm Wake up interrupt function, and install call back function.  */
DrvSYS.c (lib\src):/*               The delayed clock cycle is 4096 clock cycles when chip work at external 4~24 MHz crystal, */
DrvSYS.c (lib\src):/*               or 256 clock cycles when chip work at internal 22.1184 MHz oscillator.                    */
DrvSYS.c (lib\src):/*               Please make sure that Register Write-Protection Function has been disabled before using   */
DrvSYS.c (lib\src):/*               User can check the status of Register Write-Protection Function                           */
DrvSYS.c (lib\src):/*               with DrvSYS_IsProtectedRegLocked().                                                       */
DrvSYS.c (lib\src):void DrvSYS_SetPowerDownWakeUpInt(int32_t i32Enable, PWRWU_CALLBACK pdwucallbackFn, int32_t i32enWUDelay)
DrvSYS.c (lib\src):    SYSCLK->PWRCON.PD_WU_INT_EN = i32Enable;
DrvSYS.c (lib\src):        SYSCLK->PWRCON.PD_WU_DLY = i32enWUDelay;
DrvSYS.c (lib\src):        PWRWU_callbackFn = pdwucallbackFn;
DrvSYS.c (lib\src):        NVIC_SetPriority(PWRWU_IRQn, (1<<__NVIC_PRIO_BITS) - 2);
DrvSYS.c (lib\src):        NVIC_EnableIRQ(PWRWU_IRQn);
DrvSYS.c (lib\src):        SYSCLK->PWRCON.PD_WU_DLY = 0;
DrvSYS.c (lib\src):        PWRWU_callbackFn = NULL;
DrvSYS.c (lib\src):        NVIC_DisableIRQ(PWRWU_IRQn);
DrvSYS.c (lib\src):/* Function: DrvSYS_EnterPowerDown                                                                         */
DrvSYS.c (lib\src):/* Parameters:                                                                                             */
DrvSYS.c (lib\src):/*               ePDType    - [in]   E_SYS_IMMEDIATE / E_SYS_WAIT_FOR_CPU                                  */
DrvSYS.c (lib\src):/* Description:                                                                                            */
DrvSYS.c (lib\src):/*               Enter power down function                                                                 */
DrvSYS.c (lib\src):/*               Please make sure that Register Write-Protection Function has been disabled before using   */
DrvSYS.c (lib\src):/*               this function to enter power down.                                                        */
DrvSYS.c (lib\src):/*               User can check the status of Register Write-Protection Function                           */
DrvSYS.c (lib\src):/*               with DrvSYS_IsProtectedRegLocked().                                                       */
DrvSYS.c (lib\src):void DrvSYS_EnterPowerDown(E_SYS_PD_TYPE ePDType)
DrvSYS.c (lib\src):    SYSCLK->PWRCON.PWR_DOWN_EN = 0;
DrvSYS.c (lib\src):    SYSCLK->PWRCON.PD_WAIT_CPU = ePDType;
DrvSYS.c (lib\src):    SYSCLK->PWRCON.PWR_DOWN_EN = 1;
DrvSYS.c (lib\src):/* Function: DrvSYS_SelectPLLSource                                                                        */
DrvSYS.c (lib\src):/* Parameters:                                                                                             */
DrvSYS.c (lib\src):/*           ePllSrc       - [in]   E_SYS_EXTERNAL_12M: External Crystal clock (4 ~ 24 MHz)                */
DrvSYS.c (lib\src):/* Description:                                                                                            */
DrvSYS.c (lib\src):/*               This function is used to select PLL clock source                                          */
DrvSYS.c (lib\src):void DrvSYS_SelectPLLSource(E_SYS_PLL_CLKSRC ePllSrc)
DrvSYS.c (lib\src):    SYSCLK->PLLCON.PLL_SRC = ePllSrc;
DrvSYS.c (lib\src):/* Function: DrvSYS_SetPLLMode                                                                             */
DrvSYS.c (lib\src):/* Parameters:                                                                                             */
DrvSYS.c (lib\src):/*               i32Flag     - [in]       1: Power down mode / 0: Normal mode                              */
DrvSYS.c (lib\src):/* Description:                                                                                            */
DrvSYS.c (lib\src):/*               Set PLL operates in power down mode or normal mode                                        */
DrvSYS.c (lib\src):void DrvSYS_SetPLLMode(int32_t i32Flag)
DrvSYS.c (lib\src):    SYSCLK->PLLCON.OE = i32Flag;
DrvSYS.c (lib\src):    SYSCLK->PLLCON.PD = i32Flag;
DrvSYS.c (lib\src):/* Parameters:                                                                                             */
DrvSYS.c (lib\src):/* Description:                                                                                            */
DrvSYS.c (lib\src):/* Function: DrvSYS_GetPLLContent                                                                          */
DrvSYS.c (lib\src):/* Parameters:                                                                                             */
DrvSYS.c (lib\src):/*      ePllSrc       - [in]  Select PLL clock source                                                      */
DrvSYS.c (lib\src):/*      u32PllClk     - [in]  The target PLL clock frequency (Hz). The value is 25~500 (MHz)               */
DrvSYS.c (lib\src):/*      The PLL register setting for the target PLL clock frequency.                                       */
DrvSYS.c (lib\src):/*      If u32PllClk is out of range, the function will return default value 0xC22E                        */
DrvSYS.c (lib\src):/* Description:                                                                                            */
DrvSYS.c (lib\src):/*      This function is used to calculate the nearest PLL frequency to fit the target PLL frequency       */
DrvSYS.c (lib\src):/*      which is defined by u32PllClk and return the relative PLL control register setting.                */
DrvSYS.c (lib\src):uint32_t DrvSYS_GetPLLContent(E_SYS_PLL_CLKSRC ePllSrc, uint32_t u32PllClk)
DrvSYS.c (lib\src):    uint32_t u32PllSrcClk = __XTAL, u32Register=0;
DrvSYS.c (lib\src):    if ( (u32PllClk < FREQ_125MHZ) && (u32PllClk >= FREQ_25MHZ) )
DrvSYS.c (lib\src):        u32PllClk = u32PllClk << 2;
DrvSYS.c (lib\src):    else if ( (u32PllClk < FREQ_250MHZ) && (u32PllClk >= FREQ_125MHZ) )
DrvSYS.c (lib\src):        u32PllClk = u32PllClk << 1;
DrvSYS.c (lib\src):    else if ( (u32PllClk <= FREQ_500MHZ) && (u32PllClk >= FREQ_250MHZ) )
DrvSYS.c (lib\src):    if (ePllSrc == E_SYS_EXTERNAL_12M)
DrvSYS.c (lib\src):        u32PllSrcClk = __XTAL;
DrvSYS.c (lib\src):    else if (ePllSrc == E_SYS_INTERNAL_22M)
DrvSYS.c (lib\src):        u32PllSrcClk = __IRC22M; 
DrvSYS.c (lib\src):    u32NF = u32PllClk / 1000000;
DrvSYS.c (lib\src):    u32NR = u32PllSrcClk / 1000000; 
DrvSYS.c (lib\src):/* Function: DrvSYS_SetPLLContent                                                                          */
DrvSYS.c (lib\src):/* Parameters:                                                                                             */
DrvSYS.c (lib\src):/*           u32PllContent       - [in]     The PLL register setting for the target PLL clock frequency    */
DrvSYS.c (lib\src):/* Description:                                                                                            */
DrvSYS.c (lib\src):/*               This function is used to set PLL settings.                                                */
DrvSYS.c (lib\src):/*               User can use DrvSYS_GetPLLContent() to get proper PLL setting.                            */
DrvSYS.c (lib\src):/*               And, User can use DrvSYS_GetPLLClockFreq() to get actual PLL clock.                       */
DrvSYS.c (lib\src):void DrvSYS_SetPLLContent(uint32_t u32PllContent)
DrvSYS.c (lib\src):    SYSCLK->PLLCON.FB_DV  = (u32PllContent & 0x01FF);
DrvSYS.c (lib\src):    SYSCLK->PLLCON.IN_DV  = (u32PllContent >> 9) & 0x1F;
DrvSYS.c (lib\src):    SYSCLK->PLLCON.OUT_DV = (u32PllContent >> 14) & 0x03;
DrvSYS.c (lib\src):/* Function: DrvSYS_GetPLLClockFreq                                                                        */
DrvSYS.c (lib\src):/* Parameters:                                                                                             */
DrvSYS.c (lib\src):/*      The PLL clock.                                                                                     */
DrvSYS.c (lib\src):/* Description:                                                                                            */
DrvSYS.c (lib\src):/*              Get PLL clock frquency. The clock UNIT is in Hz.                                           */
DrvSYS.c (lib\src):uint32_t DrvSYS_GetPLLClockFreq(void)
DrvSYS.c (lib\src):    uint32_t u32Freq =0, u32PLLSrc;
DrvSYS.c (lib\src):    uint32_t au32Map[4] = {1, 2, 2, 4};
DrvSYS.c (lib\src):    if (SYSCLK->PLLCON.PLL_SRC == 1)
DrvSYS.c (lib\src):        u32PLLSrc = __IRC22M;   
DrvSYS.c (lib\src):        u32PLLSrc = __XTAL;
DrvSYS.c (lib\src):    if (SYSCLK->PLLCON.PD ==1)  
DrvSYS.c (lib\src):        u32Freq = u32PLLSrc * (SYSCLK->PLLCON.FB_DV+2) / (SYSCLK->PLLCON.IN_DV+2) / au32Map[SYSCLK->PLLCON.OUT_DV];
DrvSYS.c (lib\src):/* Parameters:                                                                                             */
DrvSYS.c (lib\src):/* Description:                                                                                            */
DrvSYS.c (lib\src):    else if(SYSCLK->CLKSEL0.HCLK_S == 2)    /* PLL clock */
DrvSYS.c (lib\src):        u32Freqout = DrvSYS_GetPLLClockFreq();
DrvSYS.c (lib\src):/* Function: DrvSYS_Open                                                                                   */
DrvSYS.c (lib\src):/* Parameters:                                                                                             */
DrvSYS.c (lib\src):/*      E_DRVSYS_ERR_REG_PROTECTED   The Register Write Protection function is enabled                     */
DrvSYS.c (lib\src):/* Description:                                                                                            */
DrvSYS.c (lib\src):/*      This could configure the PLL according to the PLL source clock and target HCLK clock.              */
DrvSYS.c (lib\src):/*      The DrvSYS_GetPLLClockFreq() could be used to get actual PLL clock.                                */
DrvSYS.c (lib\src):/*      Please make sure that Register Write-Protection Function has been disabled before using            */
DrvSYS.c (lib\src):/*      User can check the status of Register Write-Protection Function with DrvSYS_IsProtectedRegLocked().*/
DrvSYS.c (lib\src):int32_t DrvSYS_Open(uint32_t u32Hclk)
DrvSYS.c (lib\src):    uint32_t u32PllCr;  
DrvSYS.c (lib\src):    E_SYS_PLL_CLKSRC ePllSrc = E_SYS_EXTERNAL_12M;
DrvSYS.c (lib\src):    /* Check the status of Register Write-Protection Function */
DrvSYS.c (lib\src):    if (DrvSYS_IsProtectedRegLocked() == 0)
DrvSYS.c (lib\src):        return E_DRVSYS_ERR_REG_PROTECTED;
DrvSYS.c (lib\src):    if (SYSCLK->PLLCON.PLL_SRC == 0)
DrvSYS.c (lib\src):        SYSCLK->PWRCON.XTL12M_EN = 1;
DrvSYS.c (lib\src):            ePllSrc = E_SYS_EXTERNAL_12M;
DrvSYS.c (lib\src):            /* Swtich PLL source to RC 22M */
DrvSYS.c (lib\src):            SYSCLK->PLLCON.PLL_SRC = 1;
DrvSYS.c (lib\src):            ePllSrc = E_SYS_INTERNAL_22M;
DrvSYS.c (lib\src):        SYSCLK->PWRCON.OSC22M_EN = 1;
DrvSYS.c (lib\src):        ePllSrc = E_SYS_INTERNAL_22M;
DrvSYS.c (lib\src):    u32PllCr = DrvSYS_GetPLLContent(ePllSrc, u32Hclk);
DrvSYS.c (lib\src):    DrvSYS_SetPLLContent(u32PllCr);
DrvSYS.c (lib\src):    SYSCLK->PLLCON.OE = 0;
DrvSYS.c (lib\src):    SYSCLK->PLLCON.PD = 0;
DrvSYS.c (lib\src):    /* Wait for PLL stable */
DrvSYS.c (lib\src):    while (SYSCLK->CLKSTATUS.PLL_STB == 0);
DrvSYS.c (lib\src):    /* Change HCLK clock source to be PLL. */
DrvSYS.c (lib\src):/* Function: DrvSYS_EnableHighPerformanceMode                                                              */
DrvSYS.c (lib\src):/* Parameters:                                                                                             */
DrvSYS.c (lib\src):/* Description:                                                                                            */
DrvSYS.c (lib\src):/*               Enable chip high performance mode. It can improve internal RAM and GPIO                   */
DrvSYS.c (lib\src):/*               access performance.                                                                       */
DrvSYS.c (lib\src):/*               Please make sure that Register Write-Protection Function has been disabled before using   */
DrvSYS.c (lib\src):/*               this function to enable high performance mode.                                            */
DrvSYS.c (lib\src):/*               User can check the status of Register Write-Protection Function                           */
DrvSYS.c (lib\src):/*               with DrvSYS_IsProtectedRegLocked().                                                       */
DrvSYS.c (lib\src):void DrvSYS_EnableHighPerformanceMode(void)
DrvSYS.c (lib\src):    SYS->CPR.HPE = 1;
DrvSYS.c (lib\src):/* Function: DrvSYS_DisableHighPerformanceMode                                                             */
DrvSYS.c (lib\src):/* Parameters:                                                                                             */
DrvSYS.c (lib\src):/* Description:                                                                                            */
DrvSYS.c (lib\src):/*               Disable chip high performance mode.                                                       */
DrvSYS.c (lib\src):/*               Please make sure that Register Write-Protection Function has been disabled before using   */
DrvSYS.c (lib\src):/*               this function to disable high performance mode.                                           */
DrvSYS.c (lib\src):/*               User can check the status of Register Write-Protection Function                           */
DrvSYS.c (lib\src):/*               with DrvSYS_IsProtectedRegLocked().                                                       */
DrvSYS.c (lib\src):void DrvSYS_DisableHighPerformanceMode(void)
DrvSYS.c (lib\src):    SYS->CPR.HPE = 0;
DrvSYS.c (lib\src):/* Parameters:                                                                                             */
DrvSYS.c (lib\src):/* Description:                                                                                            */
DrvSYS.c (lib\src):    SysTick->LOAD = us * CyclesPerUs;
DrvSYS.c (lib\src):/* Function: DrvSYS_GetChipClockSourceStatus                                                               */
DrvSYS.c (lib\src):/* Parameters:                                                                                             */
DrvSYS.c (lib\src):/*               eClkSrc  - [in]  E_SYS_XTL12M / E_SYS_XTL32K / E_SYS_OSC22M / E_SYS_OSC10K / E_SYS_PLL    */
DrvSYS.c (lib\src):/* Description:                                                                                            */
DrvSYS.c (lib\src):/*               This function is used to monitor if the chip clock source is stable or not                */
DrvSYS.c (lib\src):int32_t DrvSYS_GetChipClockSourceStatus(E_SYS_CHIP_CLKSRC eClkSrc)
DrvSYS.c (lib\src):        case E_SYS_PLL:
DrvSYS.c (lib\src):            status = SYSCLK->CLKSTATUS.PLL_STB;
DrvSYS.c (lib\src):/* Parameters:                                                                                             */
DrvSYS.c (lib\src):/* Description:                                                                                            */
DrvSYS.c (lib\src):/* Parameters:                                                                                             */
DrvSYS.c (lib\src):/* Description:                                                                                            */
DrvSYS.h (lib\inc):/* Copyright(c) 2009 Nuvoton Technology Corp. All rights reserved.                                         */
DrvSYS.h (lib\inc):/* Macro, type and constant definitions                                                                    */
DrvSYS.h (lib\inc)://E_DRVSYS_ERR_UNLOCK_FAIL          Unlock protected address failed
DrvSYS.h (lib\inc)://E_DRVSYS_ERR_LOCK_FAIL            Lock protected address failed
DrvSYS.h (lib\inc)://E_DRVSYS_ERR_IPSRC                Incorrect IP clock selection
DrvSYS.h (lib\inc)://E_DRVSYS_ERR_IPDIV                Incorrect IP divider selection
DrvSYS.h (lib\inc)://E_DRVSYS_ERR_REG_PROTECTED        The Register Write Protection function is enabled
DrvSYS.h (lib\inc):#define E_DRVSYS_ERR_IPSRC          _SYSINFRA_ERRCODE(TRUE, MODULE_ID_DRVSYS, 4)
DrvSYS.h (lib\inc):#define E_DRVSYS_ERR_IPDIV          _SYSINFRA_ERRCODE(TRUE, MODULE_ID_DRVSYS, 5)
DrvSYS.h (lib\inc):#define E_DRVSYS_ERR_REG_PROTECTED  _SYSINFRA_ERRCODE(TRUE, MODULE_ID_DRVSYS, 8)
DrvSYS.h (lib\inc):/*  PLL Clock Source Selector                                                                              */
DrvSYS.h (lib\inc):typedef enum 
DrvSYS.h (lib\inc):}E_SYS_PLL_CLKSRC;
DrvSYS.h (lib\inc):/*  IP reset                                                                                               */
DrvSYS.h (lib\inc):typedef enum 
DrvSYS.h (lib\inc):    E_SYS_GPIO_RST  = 1,
DrvSYS.h (lib\inc):    E_SYS_SPI0_RST  = 12,
DrvSYS.h (lib\inc):    E_SYS_SPI1_RST  = 13,
DrvSYS.h (lib\inc):    E_SYS_PWM03_RST = 20,
DrvSYS.h (lib\inc):    E_SYS_PS2_RST   = 23,
DrvSYS.h (lib\inc):}E_SYS_IP_RST;
DrvSYS.h (lib\inc):/*  SYS IP Clcok Selector                                                                                  */
DrvSYS.h (lib\inc):typedef enum 
DrvSYS.h (lib\inc):    E_SYS_SPI0_CLK  = 12,
DrvSYS.h (lib\inc):    E_SYS_SPI1_CLK  = 13,
DrvSYS.h (lib\inc):    E_SYS_PWM01_CLK = 20,
DrvSYS.h (lib\inc):    E_SYS_PWM23_CLK = 21,
DrvSYS.h (lib\inc):    E_SYS_PS2_CLK   = 31,
DrvSYS.h (lib\inc):    E_SYS_ISP_CLK   = 34
DrvSYS.h (lib\inc):}E_SYS_IP_CLK;
DrvSYS.h (lib\inc):/*  SYS IP Clcok Divider                                                                                   */
DrvSYS.h (lib\inc):typedef enum 
DrvSYS.h (lib\inc):}E_SYS_IP_DIV;
DrvSYS.h (lib\inc):/*  SYS IP Clcok Selector                                                                                  */
DrvSYS.h (lib\inc):typedef enum 
DrvSYS.h (lib\inc):    E_SYS_PWM01_CLKSRC,
DrvSYS.h (lib\inc):    E_SYS_PWM23_CLKSRC
DrvSYS.h (lib\inc):}E_SYS_IP_CLKSRC;
DrvSYS.h (lib\inc):/*  SYS Chip Clock Source                                                                                  */
DrvSYS.h (lib\inc):typedef enum 
DrvSYS.h (lib\inc):    E_SYS_PLL           /* PLL clock                       */
DrvSYS.h (lib\inc):}E_SYS_CHIP_CLKSRC;
DrvSYS.h (lib\inc):/*  Power Down Type                                                                                        */
DrvSYS.h (lib\inc):typedef enum 
DrvSYS.h (lib\inc):    E_SYS_WAIT_FOR_CPU
DrvSYS.h (lib\inc):}E_SYS_PD_TYPE;
DrvSYS.h (lib\inc):typedef void (*BOD_CALLBACK)(void);
DrvSYS.h (lib\inc):typedef void (*PWRWU_CALLBACK)(void);
DrvSYS.h (lib\inc):/* Define DrvSYS functions prototype                                                                       */
DrvSYS.h (lib\inc):void     DrvSYS_DisableBODLowPowerMode(void);
DrvSYS.h (lib\inc):void     DrvSYS_DisableHighPerformanceMode(void);
DrvSYS.h (lib\inc):void     DrvSYS_DisablePOR(void);
DrvSYS.h (lib\inc):void     DrvSYS_EnableBODLowPowerMode(void);
DrvSYS.h (lib\inc):void     DrvSYS_EnableHighPerformanceMode(void);
DrvSYS.h (lib\inc):void     DrvSYS_EnablePOR(void);
DrvSYS.h (lib\inc):void     DrvSYS_EnterPowerDown(E_SYS_PD_TYPE ePDType);
DrvSYS.h (lib\inc):int32_t  DrvSYS_GetChipClockSourceStatus(E_SYS_CHIP_CLKSRC eClkSrc);
DrvSYS.h (lib\inc):uint32_t DrvSYS_GetPLLClockFreq(void);
DrvSYS.h (lib\inc):uint32_t DrvSYS_GetPLLContent(E_SYS_PLL_CLKSRC ePllSrc, uint32_t u32PllClk);
DrvSYS.h (lib\inc):int32_t  DrvSYS_IsProtectedRegLocked(void);
DrvSYS.h (lib\inc):int32_t  DrvSYS_LockProtectedReg(void);
DrvSYS.h (lib\inc):int32_t  DrvSYS_Open(uint32_t u32Hclk);
DrvSYS.h (lib\inc):uint32_t DrvSYS_ReadProductID(void);
DrvSYS.h (lib\inc):void     DrvSYS_ResetChip(void);
DrvSYS.h (lib\inc):void     DrvSYS_ResetCPU(void);
DrvSYS.h (lib\inc):void     DrvSYS_ResetIP(E_SYS_IP_RST eIpRst);
DrvSYS.h (lib\inc):int32_t  DrvSYS_SelectIPClockSource(E_SYS_IP_CLKSRC eIpClkSrc, uint8_t u8ClkSrcSel);
DrvSYS.h (lib\inc):void     DrvSYS_SelectPLLSource(E_SYS_PLL_CLKSRC ePllSrc);
DrvSYS.h (lib\inc):int32_t  DrvSYS_SetClockDivider(E_SYS_IP_DIV eIpDiv , uint8_t u8value);
DrvSYS.h (lib\inc):void     DrvSYS_SetIPClock(E_SYS_IP_CLK eIpClk, int32_t i32Enable);
DrvSYS.h (lib\inc):int32_t  DrvSYS_SetOscCtrl(E_SYS_CHIP_CLKSRC eClkSrc, int32_t i32Enable);
DrvSYS.h (lib\inc):void     DrvSYS_SetPLLContent(uint32_t u32PllContent);
DrvSYS.h (lib\inc):void     DrvSYS_SetPLLMode(int32_t i32Flag);
DrvSYS.h (lib\inc):void     DrvSYS_SetPowerDownWakeUpInt(int32_t i32Enable, PWRWU_CALLBACK pdwucallbackFn, int32_t i32enWUDelay);
DrvSYS.h (lib\inc):int32_t  DrvSYS_UnlockProtectedReg(void);
DrvSYS.h (lib\inc):void PWRWU_IRQHandler(void);
DrvTIMER.c (lib\src):/* Copyright(c) 2009 Nuvoton Technology Corp. All rights reserved.                                         */
DrvTIMER.c (lib\src):#include "DrvGPIO.h"
DrvTIMER.c (lib\src):#include "DataType.h"
DrvTIMER.c (lib\src):/* Macro, type and constant definitions                                                                    */
DrvTIMER.c (lib\src):/* Global file scope (static) variables                                                                    */
DrvTIMER.c (lib\src):static uint32_t volatile _sys_uTimer0TickPerSecond,
DrvTIMER.c (lib\src):                         _sys_uTimer1TickPerSecond,
DrvTIMER.c (lib\src):                         _sys_uTimer2TickPerSecond, 
DrvTIMER.c (lib\src):                         _sys_uTimer3TickPerSecond;
DrvTIMER.c (lib\src):/* Parameters:                                                                                             */
DrvTIMER.c (lib\src):/* Description:                                                                                            */
DrvTIMER.c (lib\src):/*                  Get the timer clock from the specified timer channel.                                  */
DrvTIMER.c (lib\src):        u8ClockSrc = (inpw(&SYSCLK->CLKSEL1) >> (8+(ch*4))) & 0x7;
DrvTIMER.c (lib\src):            u32clk = DrvSYS_GetExtClockFreq() ;     /* Option 0: Get External Clock From DrvSYS Setting */
DrvTIMER.c (lib\src):            u32clk = __RTC_XTAL;                    /* Option 1: 32K */
DrvTIMER.c (lib\src):            u32clk = DrvSYS_GetHCLKFreq();          /* Option 2: HCLK */
DrvTIMER.c (lib\src):            u32clk = __IRC22M;                      /* Option 7: 22MHz*/
DrvTIMER.c (lib\src):/* Parameters:                                                                                             */
DrvTIMER.c (lib\src):/*                      Input the clock value of Timer                                                     */
DrvTIMER.c (lib\src):/*                  u32TicksPerSec - [in]                                                                  */
DrvTIMER.c (lib\src):/*                      Specify the ticks per second of Timer                                              */
DrvTIMER.c (lib\src):/*                          bits [ 0:23] - The Timer Compare Value(TCMPR) for Timer                        */
DrvTIMER.c (lib\src):/*                          bits [24:31] - The pre-scale value for Timer                                   */
DrvTIMER.c (lib\src):/* Description:                                                                                            */
DrvTIMER.c (lib\src):/*                  Calculate the Timer Compare Value and pre-scale value for Timer                        */
DrvTIMER.c (lib\src):static uint32_t CalTimerInitValue(uint32_t u32ClockValue, uint32_t u32TicksPerSec)
DrvTIMER.c (lib\src):    uint32_t u32PreScale;
DrvTIMER.c (lib\src):    uint32_t u32TCMPRValue;
DrvTIMER.c (lib\src):    if ((u32ClockValue < 2) || (u32TicksPerSec == 0))
DrvTIMER.c (lib\src):    for (u32PreScale=1; u32PreScale<256; u32PreScale++)
DrvTIMER.c (lib\src):        u32TCMPRValue = u32ClockValue / (u32TicksPerSec * u32PreScale);
DrvTIMER.c (lib\src):        /* The TCMPR value must > 1 */
DrvTIMER.c (lib\src):        if ((u32TCMPRValue > 1) && (u32TCMPRValue < 0x1000000))
DrvTIMER.c (lib\src):            return (((u32PreScale-1) << 24) | u32TCMPRValue);
DrvTIMER.c (lib\src):/* Parameters:                                                                                             */
DrvTIMER.c (lib\src):/* Description:                                                                                            */
DrvTIMER.c (lib\src):/*                  The TIMER0 default IRQ, declared in startup_NUC1xx.s                                   */
DrvTIMER.c (lib\src):	        (*tTime0Event[0].funPtr)(tTime0Event[0].transParam);
DrvTIMER.c (lib\src):/* Parameters:                                                                                             */
DrvTIMER.c (lib\src):/* Description:                                                                                            */
DrvTIMER.c (lib\src):/*                  The TIMER1 default IRQ, declared in startup_NUC1xx.s                                   */
DrvTIMER.c (lib\src):            (*tTime1Event[0].funPtr)(tTime1Event[0].transParam);
DrvTIMER.c (lib\src):/* Parameters:                                                                                             */
DrvTIMER.c (lib\src):/* Description:                                                                                            */
DrvTIMER.c (lib\src):/*                  The TIMER2 default IRQ, declared in startup_NUC1xx.s                                   */
DrvTIMER.c (lib\src):            (*tTime2Event[0].funPtr)(tTime2Event[0].transParam);
DrvTIMER.c (lib\src):/* Parameters:                                                                                             */
DrvTIMER.c (lib\src):/* Description:                                                                                            */
DrvTIMER.c (lib\src):/*                  The TIMER3 default IRQ, declared in startup_NUC1xx.s                                   */
DrvTIMER.c (lib\src):            (*tTime3Event[0].funPtr)(tTime3Event[0].transParam);
DrvTIMER.c (lib\src):/* Parameters:                                                                                             */
DrvTIMER.c (lib\src):/* Description:                                                                                            */
DrvTIMER.c (lib\src):/*                  User must to call this function before any timer operations after system boot up.      */
DrvTIMER.c (lib\src):/* Function:        DrvTIMER_Open                                                                          */
DrvTIMER.c (lib\src):/* Parameters:                                                                                             */
DrvTIMER.c (lib\src):/*                  uTicksPerSecond - [in]                                                                 */
DrvTIMER.c (lib\src):/*                      This value means how many timer interrupt ticks in one second                      */
DrvTIMER.c (lib\src):/*                  op_mode - [in]                                                                         */
DrvTIMER.c (lib\src):/*                      E_TIMER_OPMODE, E_ONESHOT_MODE/E_PERIODIC_MODE/E_TOGGLE_MODE/E_CONTINUOUS_MODE     */
DrvTIMER.c (lib\src):/*                  E_SUCCESS                               Operation successful                           */
DrvTIMER.c (lib\src):/* Description:                                                                                            */
DrvTIMER.c (lib\src):/*                  Open the specified timer channel with specified operation mode.                        */
DrvTIMER.c (lib\src):int32_t DrvTIMER_Open(E_TIMER_CHANNEL ch, uint32_t uTicksPerSecond, E_TIMER_OPMODE op_mode)
DrvTIMER.c (lib\src):    uint32_t uRegTcmpr, uRegTcr = 0x0;
DrvTIMER.c (lib\src):            SYSCLK->APBCLK.TMR0_EN = 1;
DrvTIMER.c (lib\src):            outpw((uint32_t)&TIMER0->TCSR, 0);                  /* disable timer */
DrvTIMER.c (lib\src):            _sys_uTimer0TickPerSecond = uTicksPerSecond;
DrvTIMER.c (lib\src):            uRegTcmpr = CalTimerInitValue(GetTimerClock(E_TMR0), uTicksPerSecond); 
DrvTIMER.c (lib\src):            if (uRegTcmpr == (uint32_t)-1)      
DrvTIMER.c (lib\src):            TIMER0->TCMPR = (uRegTcmpr << 8) >> 8;
DrvTIMER.c (lib\src):            outpw((uint32_t)&TIMER0->TCSR,  (uRegTcr|(uRegTcmpr>>24))|(op_mode<<27));               
DrvTIMER.c (lib\src):            SYSCLK->APBCLK.TMR1_EN = 1;
DrvTIMER.c (lib\src):            outpw((uint32_t)&TIMER1->TCSR, 0);                  /* disable timer */
DrvTIMER.c (lib\src):            _sys_uTimer1TickPerSecond = uTicksPerSecond;
DrvTIMER.c (lib\src):            uRegTcmpr = CalTimerInitValue(GetTimerClock(E_TMR1), uTicksPerSecond); 
DrvTIMER.c (lib\src):            if(uRegTcmpr == (uint32_t)-1)       
DrvTIMER.c (lib\src):            TIMER1->TCMPR = (uRegTcmpr << 8) >> 8;
DrvTIMER.c (lib\src):            outpw((uint32_t)&TIMER1->TCSR,  (uRegTcr|(uRegTcmpr>>24))|(op_mode<<27));   
DrvTIMER.c (lib\src):            SYSCLK->APBCLK.TMR2_EN =1;
DrvTIMER.c (lib\src):            outpw((uint32_t)&TIMER2->TCSR, 0);                  /* disable timer */
DrvTIMER.c (lib\src):            _sys_uTimer2TickPerSecond = uTicksPerSecond;
DrvTIMER.c (lib\src):            uRegTcmpr = CalTimerInitValue(GetTimerClock(E_TMR2), uTicksPerSecond); 
DrvTIMER.c (lib\src):            if(uRegTcmpr == (uint32_t)-1)       
DrvTIMER.c (lib\src):            TIMER2->TCMPR = (uRegTcmpr << 8) >> 8;  
DrvTIMER.c (lib\src):            outpw((uint32_t)&TIMER2->TCSR,  (uRegTcr|(uRegTcmpr>>24))|(op_mode<<27));   
DrvTIMER.c (lib\src):            SYSCLK->APBCLK.TMR3_EN = 1;
DrvTIMER.c (lib\src):            outpw((uint32_t)&TIMER3->TCSR, 0);                  /* disable timer */
DrvTIMER.c (lib\src):            _sys_uTimer3TickPerSecond = uTicksPerSecond;
DrvTIMER.c (lib\src):            uRegTcmpr = CalTimerInitValue(GetTimerClock(E_TMR3), uTicksPerSecond); 
DrvTIMER.c (lib\src):            if(uRegTcmpr == (uint32_t)-1)       
DrvTIMER.c (lib\src):            TIMER3->TCMPR = (uRegTcmpr << 8) >> 8;
DrvTIMER.c (lib\src):            outpw((uint32_t)&TIMER3->TCSR,  (uRegTcr|(uRegTcmpr>>24))|(op_mode<<27));    
DrvTIMER.c (lib\src):   	if (op_mode == E_TOGGLE_MODE)
DrvTIMER.c (lib\src):		    	DrvGPIO_InitFunction((E_DRVGPIO_FUNC)((uint32_t)E_FUNC_TMR0 + (uint32_t)ch));	
DrvTIMER.c (lib\src):/* Parameters:                                                                                             */
DrvTIMER.c (lib\src):/*                  E_SUCCESS                               Operation successful                           */
DrvTIMER.c (lib\src):/* Description:                                                                                            */
DrvTIMER.c (lib\src):/* Parameters:                                                                                             */
DrvTIMER.c (lib\src):/*                  uInterruptTicks - [in]                                                                 */
DrvTIMER.c (lib\src):/*                      Number of timer interrupt occurred                                                 */
DrvTIMER.c (lib\src):/*                  pTimerCallback  - [in]                                                                 */
DrvTIMER.c (lib\src):/*                      The function pointer of the interrupt callback function                            */
DrvTIMER.c (lib\src):/*                  parameter - [in]                                                                       */
DrvTIMER.c (lib\src):/*                      A parameter of the callback function                                               */
DrvTIMER.c (lib\src):/* Description:                                                                                            */
DrvTIMER.c (lib\src):/*                  Install the interrupt callback function of the specified timer channel.                */
DrvTIMER.c (lib\src):/*                  And trigger timer callback functuion when interrupt occur specified times.             */
DrvTIMER.c (lib\src):int32_t DrvTIMER_SetTimerEvent(E_TIMER_CHANNEL ch, uint32_t uInterruptTicks, TIMER_CALLBACK pTimerCallback, uint32_t parameter)
DrvTIMER.c (lib\src):                    tTime0Event[i].initTick     = uInterruptTicks;
DrvTIMER.c (lib\src):                    tTime0Event[i].curTick      = uInterruptTicks;
DrvTIMER.c (lib\src):                    tTime0Event[i].funPtr       = (TIMER_CALLBACK)pTimerCallback;
DrvTIMER.c (lib\src):                    tTime0Event[i].transParam   = parameter;
DrvTIMER.c (lib\src):                    tTime1Event[i].initTick     = uInterruptTicks;
DrvTIMER.c (lib\src):                    tTime1Event[i].curTick      = uInterruptTicks;
DrvTIMER.c (lib\src):                    tTime1Event[i].funPtr       = (TIMER_CALLBACK)pTimerCallback;
DrvTIMER.c (lib\src):                    tTime1Event[i].transParam   = parameter;
DrvTIMER.c (lib\src):                    tTime2Event[i].initTick     = uInterruptTicks;
DrvTIMER.c (lib\src):                    tTime2Event[i].curTick      = uInterruptTicks;
DrvTIMER.c (lib\src):                    tTime2Event[i].funPtr       = (TIMER_CALLBACK)pTimerCallback;
DrvTIMER.c (lib\src):                    tTime2Event[i].transParam   = parameter;
DrvTIMER.c (lib\src):                    tTime3Event[i].initTick     = uInterruptTicks;
DrvTIMER.c (lib\src):                    tTime3Event[i].curTick      = uInterruptTicks;
DrvTIMER.c (lib\src):                    tTime3Event[i].funPtr       = (TIMER_CALLBACK)pTimerCallback;
DrvTIMER.c (lib\src):                    tTime3Event[i].transParam   = parameter;
DrvTIMER.c (lib\src):/* Parameters:                                                                                             */
DrvTIMER.c (lib\src):/* Description:                                                                                            */
DrvTIMER.c (lib\src):/*                  Clear the timer event of the specified timer channel.                                  */
DrvTIMER.c (lib\src):/* Parameters:                                                                                             */
DrvTIMER.c (lib\src):/*                  E_SUCCESS                               Operation successful                           */
DrvTIMER.c (lib\src):/* Description:                                                                                            */
DrvTIMER.c (lib\src):/*                  This function is used to enable the specified timer interrupt.                         */
DrvTIMER.c (lib\src):            NVIC_SetPriority((IRQn_Type)((uint32_t)TMR0_IRQn + (uint32_t)ch), (1<<__NVIC_PRIO_BITS) - 2);
DrvTIMER.c (lib\src):			NVIC_EnableIRQ((IRQn_Type)((uint32_t)TMR0_IRQn + (uint32_t)ch)); 
DrvTIMER.c (lib\src):/* Parameters:                                                                                             */
DrvTIMER.c (lib\src):/*                  E_SUCCESS                               Operation successful                           */
DrvTIMER.c (lib\src):/* Description:                                                                                            */
DrvTIMER.c (lib\src):/*                  This function is used to disable the specified timer interrupt                         */
DrvTIMER.c (lib\src):			NVIC_DisableIRQ((IRQn_Type)((uint32_t)TMR0_IRQn + (uint32_t)ch)); 
DrvTIMER.c (lib\src):/* Parameters:                                                                                             */
DrvTIMER.c (lib\src):/*                  iIntStatus                              0:No interrupt / 1:Interrupt occurred          */
DrvTIMER.c (lib\src):/* Description:                                                                                            */
DrvTIMER.c (lib\src):/*                  Get the interrupt flag status from the specified timer channel.                        */
DrvTIMER.c (lib\src):/* Parameters:                                                                                             */
DrvTIMER.c (lib\src):/*                  E_SUCCESS                               Operation successful                           */
DrvTIMER.c (lib\src):/* Description:                                                                                            */
DrvTIMER.c (lib\src):/*                  Clear the interrupt flag of the specified timer channel.                               */
DrvTIMER.c (lib\src):/* Parameters:                                                                                             */
DrvTIMER.c (lib\src):/*                  E_SUCCESS                               Operation successful                           */
DrvTIMER.c (lib\src):/* Description:                                                                                            */
DrvTIMER.c (lib\src):/*                  Start to count the specified timer channel.                                            */
DrvTIMER.c (lib\src):/* Parameters:                                                                                             */
DrvTIMER.c (lib\src):/*                  uTimerTick                              Return the interrupt ticks                     */
DrvTIMER.c (lib\src):/* Description:                                                                                            */
DrvTIMER.c (lib\src):/*                  This function is used to get the number of interrupt occurred                          */
DrvTIMER.c (lib\src):/*                  after the timer interrupt function is enabled.                          .              */
DrvTIMER.c (lib\src):/* Parameters:                                                                                             */
DrvTIMER.c (lib\src):/*                  E_SUCCESS                               Operation successful                           */
DrvTIMER.c (lib\src):/* Description:                                                                                            */
DrvTIMER.c (lib\src):/*                  This function is used to clear interrupt ticks to 0.                                   */
DrvTIMER.c (lib\src):/* Parameters:                                                                                             */
DrvTIMER.c (lib\src):/* Description:                                                                                            */
DrvTIMER.c (lib\src):/*                  This function is used to add a delay loop by specified interrupt ticks                 */
DrvTIMER.c (lib\src):/* Function:        DrvTIMER_OpenCounter                                                                   */
DrvTIMER.c (lib\src):/* Parameters:                                                                                             */
DrvTIMER.c (lib\src):/*                      The parameter is used to determine how many counts occurred will                   */
DrvTIMER.c (lib\src):/*                      toggle once timer interrupt.                                                       */
DrvTIMER.c (lib\src):/*                  op_mode - [in]                                                                         */
DrvTIMER.c (lib\src):/*                      E_TIMER_OPMODE, E_ONESHOT_MODE/E_PERIODIC_MODE/E_CONTINUOUS_MODE                   */
DrvTIMER.c (lib\src):/*                  E_SUCCESS                               Operation successful                           */
DrvTIMER.c (lib\src):/* Description:                                                                                            */
DrvTIMER.c (lib\src):/*                  This function is used to open the timer channel with the specified operation mode.     */
DrvTIMER.c (lib\src):int32_t DrvTIMER_OpenCounter(E_TIMER_CHANNEL ch, uint32_t uCounterBoundary, E_TIMER_OPMODE op_mode)
DrvTIMER.c (lib\src):    if ((op_mode == E_TOGGLE_MODE) || (ch == E_TMR3)) 
DrvTIMER.c (lib\src): 		   	SYSCLK->APBCLK.TMR0_EN = 1;
DrvTIMER.c (lib\src):			outpw((uint32_t)&TIMER0->TCSR ,0 );	/* Disable timer */
DrvTIMER.c (lib\src): 		   	SYSCLK->APBCLK.TMR1_EN = 1;
DrvTIMER.c (lib\src):			outpw((uint32_t)&TIMER1->TCSR ,0 );	/* Disable timer */
DrvTIMER.c (lib\src): 		   	SYSCLK->APBCLK.TMR2_EN = 1;
DrvTIMER.c (lib\src):			outpw((uint32_t)&TIMER2->TCSR ,0 );	/* Disable timer */
DrvTIMER.c (lib\src):            DrvSYS_SelectIPClockSource((E_SYS_IP_CLKSRC)((uint32_t)E_SYS_TMR0_CLKSRC+(uint32_t)ch), 2);  
DrvTIMER.c (lib\src):			DrvGPIO_InitFunction((E_DRVGPIO_FUNC)((uint32_t)E_FUNC_TMR0 + (uint32_t)ch));	/* Open external Timer Counter source */
DrvTIMER.c (lib\src): 			tTMR->TCSR.MODE     = op_mode;	/* Set operation mode */
DrvTIMER.c (lib\src):			tTMR->TCMPR         = uCounterBoundary;
DrvTIMER.c (lib\src):			tTMR->TCSR.PRESCALE = 0;
DrvTIMER.c (lib\src):/* Parameters:                                                                                             */
DrvTIMER.c (lib\src):/*					E_SUCCESS								Operation successful   				           */
DrvTIMER.c (lib\src):/* Description:                                                                                            */
DrvTIMER.c (lib\src):/*                  Start counting of the specified timer channel.						                   */
DrvTIMER.c (lib\src):				tTMR->TCMPR = 0;	// If use Polling Mode, do not configure Timer Compare Register. 
DrvTIMER.c (lib\src):/* Parameters:                                                                                             */
DrvTIMER.c (lib\src):/* Description:                                                                                            */
DrvTIMER.c (lib\src):/*                  This function is used to get the current counters of the specified timer channel.      */
DrvTIMER.c (lib\src):/* Parameters:                                                                                             */
DrvTIMER.c (lib\src):/* Description:                                                                                            */
DrvTIMER.c (lib\src):/* Parameters:                                                                                             */
DrvTIMER.c (lib\src):/* Description:                                                                                            */
DrvTIMER.c (lib\src):/*                  The WatchDog Timer(WDT) default IRQ, declared in startup_NUC1xx.s                      */
DrvTIMER.c (lib\src):/*                  All bits in WDT register are write-protected. User must to check the REGWRPROT bit is  */
DrvTIMER.c (lib\src):/*                  enabled or disabled if write the specified WDT bit fail.                               */
DrvTIMER.c (lib\src):    volatile uint32_t uWakeupFlag;
DrvTIMER.c (lib\src):    uWakeupFlag = WDT->WTCR.WTWKF;  /* Stored WDT wakeup flag */
DrvTIMER.c (lib\src):        fnCallBack_WDT(uWakeupFlag);
DrvTIMER.c (lib\src):/* Function:        DrvWDT_Open                                                                            */
DrvTIMER.c (lib\src):/* Parameters:                                                                                             */
DrvTIMER.c (lib\src):/*					E_SUCCESS								Operation successful   				           */
DrvTIMER.c (lib\src):/*					E_DRVWDT_OPEN						    WDT open fail                  		           */
DrvTIMER.c (lib\src):/* Description:                                                                                            */
DrvTIMER.c (lib\src):/*                  All bits in WDT register are write-protected. User must to check the REGWRPROT bit is  */
DrvTIMER.c (lib\src):/*                  enabled or disabled if write the specified WDT bit fail.                               */
DrvTIMER.c (lib\src):int32_t DrvWDT_Open(E_WDT_INTERVAL WDTlevel)
DrvTIMER.c (lib\src):	if ((SYS->REGWRPROT & 0x01) == 0)
DrvTIMER.c (lib\src):        /* The protected Registers are locked */
DrvTIMER.c (lib\src):        return E_DRVWDT_OPEN;
DrvTIMER.c (lib\src):    SYSCLK->APBCLK.WDT_EN = 1;              /* Enable WatchDog Timer Clock */   
DrvTIMER.c (lib\src):    DrvWDT_Ioctl(E_WDT_IOC_STOP_TIMER, 0);  /* Stop WDT first */
DrvTIMER.c (lib\src):/* Parameters:                                                                                             */
DrvTIMER.c (lib\src):/* Description:                                                                                            */
DrvTIMER.c (lib\src):/*                  The function is used to stop/disable WDT relative functions.                           */
DrvTIMER.c (lib\src):/*                  All bits in WDT register are write-protected. User must to check the REGWRPROT bit is  */
DrvTIMER.c (lib\src):/*                  enabled or disabled if write the specified WDT bit fail.                               */
DrvTIMER.c (lib\src):    DrvWDT_Ioctl(E_WDT_IOC_STOP_TIMER, 0);      /* Stop WDT */
DrvTIMER.c (lib\src):    DrvWDT_Ioctl(E_WDT_IOC_DISABLE_INT, 0);     /* Disable WDT Interrupt */
DrvTIMER.c (lib\src):    DrvWDT_Ioctl(E_WDT_IOC_DISABLE_WAKEUP, 0);  /* Disable WDT wakeup fuction */              
DrvTIMER.c (lib\src):    /* Add delay loop to make sure the internal WDT status is stable then disable WDT engine clock */ 
DrvTIMER.c (lib\src):    SYSCLK->APBCLK.WDT_EN = 0;
DrvTIMER.c (lib\src):/* Parameters:                                                                                             */
DrvTIMER.c (lib\src):/*                  pvWDTISR - [in]                                                                        */
DrvTIMER.c (lib\src):/*                      The function pointer of the interrupt service routine                              */
DrvTIMER.c (lib\src):/* Description:                                                                                            */
DrvTIMER.c (lib\src):/*                  The function is used to install WDT interrupt service routine.                         */
DrvTIMER.c (lib\src):/*                  All bits in WDT register are write-protected. User must to check the REGWRPROT bit is  */
DrvTIMER.c (lib\src):/*                  enabled or disabled if write the specified WDT bit fail.                               */
DrvTIMER.c (lib\src):void DrvWDT_InstallISR(WDT_CALLBACK pvWDTISR)
DrvTIMER.c (lib\src):    fnCallBack_WDT = (WDT_CALLBACK)pvWDTISR;    
DrvTIMER.c (lib\src):/* Parameters:                                                                                             */
DrvTIMER.c (lib\src):/*                          E_WDT_IOC_STOP_TIMER,                                                          */
DrvTIMER.c (lib\src):/*                          E_WDT_IOC_ENABLE_WAKEUP,                                                       */
DrvTIMER.c (lib\src):/*                          E_WDT_IOC_DISABLE_WAKEUP,                                                      */
DrvTIMER.c (lib\src):/*                      Set the argument for the specified WDT command                                     */
DrvTIMER.c (lib\src):/*                  E_SUCCESS                               Operation successful                           */
DrvTIMER.c (lib\src):/* Description:                                                                                            */
DrvTIMER.c (lib\src):/*                  The function is used to operate more WDT applications, it could be the                 */
DrvTIMER.c (lib\src):/*                  start/stop the WDT, enable/disable WDT interrupt function, enable/disable WDT          */
DrvTIMER.c (lib\src):/*                  time-out wake up function, enable/disable system reset when WDT time-out and           */
DrvTIMER.c (lib\src):/*                  All bits in WDT register are write-protected. User must to check the REGWRPROT bit is  */
DrvTIMER.c (lib\src):/*                  enabled or disabled if write the specified WDT bit fail.                               */
DrvTIMER.c (lib\src):        case E_WDT_IOC_STOP_TIMER :
DrvTIMER.c (lib\src):            NVIC_SetPriority(WDT_IRQn, (1<<__NVIC_PRIO_BITS) - 2);
DrvTIMER.c (lib\src):        case E_WDT_IOC_ENABLE_WAKEUP :
DrvTIMER.c (lib\src):        case E_WDT_IOC_DISABLE_WAKEUP :
DrvTimer.h (lib\inc):/* Copyright(c) 2009 Nuvoton Technology Corp. All rights reserved.                                         */
DrvTimer.h (lib\inc):/* Macro, type and constant definitions                                                                    */
DrvTimer.h (lib\inc):#define E_DRVWDT_OPEN               _SYSINFRA_ERRCODE(TRUE, MODULE_ID_DRVTIMER, 6)  /* WDT open fail       */
DrvTimer.h (lib\inc):typedef void (*TIMER_CALLBACK)(uint32_t data);	/* function pointer */
DrvTimer.h (lib\inc):typedef void (*WDT_CALLBACK)(uint32_t data);	/* function pointer */
DrvTimer.h (lib\inc):typedef struct timeEvent_t
DrvTimer.h (lib\inc):    TIMER_CALLBACK       funPtr;
DrvTimer.h (lib\inc):    uint32_t             transParam;
DrvTimer.h (lib\inc):typedef enum {
DrvTimer.h (lib\inc):/* Define TIMER OPREATION MODE                                                                             */
DrvTimer.h (lib\inc):typedef enum{                   
DrvTimer.h (lib\inc):    E_PERIODIC_MODE   	= 1,
DrvTimer.h (lib\inc):} E_TIMER_OPMODE ;
DrvTimer.h (lib\inc):typedef enum {
DrvTimer.h (lib\inc):    E_WDT_IOC_STOP_TIMER        = 1,
DrvTimer.h (lib\inc):    E_WDT_IOC_ENABLE_WAKEUP     = 4, 
DrvTimer.h (lib\inc):    E_WDT_IOC_DISABLE_WAKEUP    = 5, 
DrvTimer.h (lib\inc):typedef enum{
DrvTimer.h (lib\inc):/* Define Function Prototype                                                                               */
DrvTimer.h (lib\inc):int32_t DrvTIMER_Open(E_TIMER_CHANNEL ch, uint32_t uTicksPerSecond, E_TIMER_OPMODE op_mode);
DrvTimer.h (lib\inc):int32_t DrvTIMER_SetTimerEvent(E_TIMER_CHANNEL ch, uint32_t uInterruptTicks, TIMER_CALLBACK pTimerCallback, uint32_t parameter);
DrvTimer.h (lib\inc):int32_t DrvTIMER_OpenCounter(E_TIMER_CHANNEL ch, uint32_t uCounterBoundary, E_TIMER_OPMODE op_mode);
DrvTimer.h (lib\inc):int32_t DrvWDT_Open(E_WDT_INTERVAL WDTlevel);
DrvTimer.h (lib\inc):void DrvWDT_InstallISR(WDT_CALLBACK pvWDTISR);
Function.c (src):#include "DrvGPIO.h"
Function.c (src):#include "DataType.h"
Function.c (src):volatile	uint8_t		b_oper_rep_timer;
Function.c (src):static	uint8_t		oper_chk_id;
Function.c (src):static	Type_Flags	flags;
Function.c (src):static uint32_t mem_val_max(uint32_t* p_var)
Function.c (src):		if (flash_dat_tab[i].addr==p_var)
Function.c (src):T_ERROR_OP static DataFlashAddressLocated(void)
Function.c (src):	uint32_t temp_data,temp_addr,temp_addre,temp_data_length,temp_loacted_addr;
Function.c (src):	temp_data_length=DATA_QUANTITY_MAX;
Function.c (src):	temp_addr=DATA_FLASH_ADDR_START+2*DATA_FLASH_ADDR_OFFSET;
Function.c (src):	temp_addre=DATA_FLASH_ADDR_START+2*DATA_FLASH_ADDR_OFFSET+(temp_data_length-1)*DATA_SIZE*DATA_FLASH_ADDR_OFFSET;
Function.c (src):	temp_loacted_addr=temp_addr;
Function.c (src):			error_id=DrvFMC_Read((temp_addr+((uint32_t)(temp_data_length/2))*DATA_SIZE*DATA_FLASH_ADDR_OFFSET),&temp_data);
Function.c (src):			if(error_id==E_DRVFMC_ERR_ISP_FAIL)
Function.c (src):			if(temp_data==DATA_SIZE)
Function.c (src):					temp_loacted_addr=temp_addr+((uint32_t)(temp_data_length/2))*DATA_SIZE*DATA_FLASH_ADDR_OFFSET;
Function.c (src):					temp_addr=temp_addr+((uint32_t)(temp_data_length/2))*DATA_SIZE*DATA_FLASH_ADDR_OFFSET+DATA_SIZE*DATA_FLASH_ADDR_OFFSET;
Function.c (src):					temp_addre=temp_addr+((uint32_t)(temp_data_length/2))*DATA_SIZE*DATA_FLASH_ADDR_OFFSET-DATA_SIZE*DATA_FLASH_ADDR_OFFSET;
Function.c (src):			if(temp_addr==temp_addre)
Function.c (src):			if(temp_addr>temp_addre)
Function.c (src):			temp_data_length=(uint32_t)(temp_data_length/2);
Function.c (src):	error_id=DrvFMC_Read(temp_addr,&temp_data);
Function.c (src):			if(error_id==E_DRVFMC_ERR_ISP_FAIL)
Function.c (src):	if(temp_data==DATA_SIZE)
Function.c (src):		temp_loacted_addr=temp_addr;
Function.c (src):	located_address=temp_loacted_addr;
Function.c (src):T_ERROR_OP static ReadDateLocated(void)
Function.c (src):	uint32_t temp_data,temp_addr,temp_addrn;
Function.c (src):	temp_addr=DATA_FLASH_ADDR_START+2*DATA_FLASH_ADDR_OFFSET;
Function.c (src):	temp_addrn=DATA_FLASH_ADDR_START+2*DATA_FLASH_ADDR_OFFSET;
Function.c (src):	error_id=DrvFMC_Read(DATA_FLASH_ADDR_START+DATA_FLASH_ADDR_OFFSET,&temp_data);
Function.c (src):	if(error_id==E_DRVFMC_ERR_ISP_FAIL)
Function.c (src):	if((temp_data!=DATA_FLASH_ADDR_USED) && (temp_data==0xffffffff))
Function.c (src):							error_id=DrvFMC_Read(temp_addrn,&temp_data);
Function.c (src):							if(error_id==E_DRVFMC_ERR_ISP_FAIL)
Function.c (src):							if(temp_data==DATA_SIZE)
Function.c (src):									temp_addr=temp_addrn;
Function.c (src):									temp_addrn=temp_addrn+DATA_SIZE*DATA_FLASH_ADDR_OFFSET;
Function.c (src):					while(temp_addrn<=(DATA_FLASH_ADDR_END-(DATA_SIZE*DATA_FLASH_ADDR_OFFSET)));
Function.c (src):							error_id=DrvFMC_Read(temp_addr+(i+1)*DATA_FLASH_ADDR_OFFSET,flash_dat_tab[i].addr);
Function.c (src):							if(error_id==E_DRVFMC_ERR_ISP_FAIL)
Function.c (src):							if(error_id==E_DRVFMC_ERR_ISP_FAIL)
Function.c (src):T_ERROR_OP static WriteDateLocated(void)
Function.c (src):	uint32_t i,temp_data;
Function.c (src):	static uint32_t temp_addr=0;
Function.c (src):			if(error_id==E_DRVFMC_ERR_ISP_FAIL)
Function.c (src):							DrvFMC_Erase(DATA_FLASH_ADDR_START+(i*DATA_FLASH_PAGE_SIZE));
Function.c (src):					if(error_id==E_DRVFMC_ERR_ISP_FAIL)
Function.c (src):			if(error_id==E_DRVFMC_ERR_ISP_FAIL)
Function.c (src):					if(error_id==E_DRVFMC_ERR_ISP_FAIL)
Function.c (src):			if(temp_addr==0)
Function.c (src):				temp_addr=DATA_FLASH_ADDR_START+2*DATA_FLASH_ADDR_OFFSET;
Function.c (src):					error_id=DrvFMC_Read(temp_addr,&temp_data);
Function.c (src):					if(error_id==E_DRVFMC_ERR_ISP_FAIL)
Function.c (src):					if((temp_data!=DATA_SIZE) && (temp_data==0xffffffff))
Function.c (src):							temp_addr=temp_addr+DATA_SIZE*DATA_FLASH_ADDR_OFFSET;
Function.c (src):			while(temp_addr<=(DATA_FLASH_ADDR_END-(DATA_SIZE*DATA_FLASH_ADDR_OFFSET)));
Function.c (src):							DrvFMC_Erase(DATA_FLASH_ADDR_START+(i*DATA_FLASH_PAGE_SIZE));
Function.c (src):					if(error_id==E_DRVFMC_ERR_ISP_FAIL)
Function.c (src):					temp_addr=DATA_FLASH_ADDR_START+2*DATA_FLASH_ADDR_OFFSET;
Function.c (src):			error_id=DrvFMC_Write(temp_addr,DATA_SIZE);
Function.c (src):			if(error_id==E_DRVFMC_ERR_ISP_FAIL)
Function.c (src):					error_id=DrvFMC_Write(temp_addr+(i+1)*DATA_FLASH_ADDR_OFFSET,*(flash_dat_tab[i].addr));
Function.c (src):					if(error_id==E_DRVFMC_ERR_ISP_FAIL)
Function.c (src):T_ERROR_OP static ReadDate(void)
Function.c (src):	uint32_t temp_data,temp_addr,temp_addrn;
Function.c (src):	temp_addr=DATA_FLASH_ADDR_START+2*DATA_FLASH_ADDR_OFFSET;
Function.c (src):	temp_addrn=DATA_FLASH_ADDR_START+2*DATA_FLASH_ADDR_OFFSET;
Function.c (src):	error_id=DrvFMC_Read(DATA_FLASH_ADDR_START+DATA_FLASH_ADDR_OFFSET,&temp_data);
Function.c (src):	if(error_id==E_DRVFMC_ERR_ISP_FAIL)
Function.c (src):	if((temp_data!=DATA_FLASH_ADDR_USED) && (temp_data==0xffffffff))
Function.c (src):					error_id=DrvFMC_Read(temp_addrn,&temp_data);
Function.c (src):					if(error_id==E_DRVFMC_ERR_ISP_FAIL)
Function.c (src):					if(temp_data==DATA_SIZE)
Function.c (src):							temp_addr=temp_addrn;
Function.c (src):							temp_addrn=temp_addrn+DATA_SIZE*DATA_FLASH_ADDR_OFFSET;
Function.c (src):			while(temp_addrn<=(DATA_FLASH_ADDR_END-(DATA_SIZE*DATA_FLASH_ADDR_OFFSET)));
Function.c (src):					error_id=DrvFMC_Read(temp_addr+(i+1)*DATA_FLASH_ADDR_OFFSET,flash_dat_tab[i].addr);
Function.c (src):					if(error_id==E_DRVFMC_ERR_ISP_FAIL)
Function.c (src):T_ERROR_OP static WriteDate(void)
Function.c (src):	uint32_t i,temp_data;
Function.c (src):	static uint32_t temp_addr=0;
Function.c (src):			if(error_id==E_DRVFMC_ERR_ISP_FAIL)
Function.c (src):	if(temp_addr==0)
Function.c (src):		temp_addr=DATA_FLASH_ADDR_START+2*DATA_FLASH_ADDR_OFFSET;
Function.c (src):			error_id=DrvFMC_Read(temp_addr,&temp_data);
Function.c (src):			if(error_id==E_DRVFMC_ERR_ISP_FAIL)
Function.c (src):			if((temp_data!=DATA_SIZE) && (temp_data==0xffffffff))
Function.c (src):					temp_addr=temp_addr+DATA_SIZE*DATA_FLASH_ADDR_OFFSET;
Function.c (src):	while(temp_addr<=(DATA_FLASH_ADDR_END-(DATA_SIZE*DATA_FLASH_ADDR_OFFSET)));
Function.c (src):					DrvFMC_Erase(DATA_FLASH_ADDR_START+(i*DATA_FLASH_PAGE_SIZE));
Function.c (src):			if(error_id==E_DRVFMC_ERR_ISP_FAIL)
Function.c (src):			temp_addr=DATA_FLASH_ADDR_START+2*DATA_FLASH_ADDR_OFFSET;
Function.c (src):	error_id=DrvFMC_Write(temp_addr,DATA_SIZE);
Function.c (src):	if(error_id==E_DRVFMC_ERR_ISP_FAIL)
Function.c (src):			error_id=DrvFMC_Write(temp_addr+(i+1)*DATA_FLASH_ADDR_OFFSET,*(flash_dat_tab[i].addr));
Function.c (src):			if(error_id==E_DRVFMC_ERR_ISP_FAIL)
Function.c (src):static void Led_Operation(void)
Function.c (src):	PO_LEDA(flags.led_flag.a);
Function.c (src):	PO_LEDB(flags.led_flag.b);
Function.c (src):	PO_LEDC(flags.led_flag.c);
Function.c (src):	PO_LEDD(flags.led_flag.d);
Function.c (src):	PO_LEDE(flags.led_flag.e);
Function.c (src):	PO_LEDF(flags.led_flag.f);
Function.c (src):static void Mode_Operation(int8_t para)
Function.c (src):	uint8_t temp_f=0;
Function.c (src):	if(para!=mem_mode)
Function.c (src):	    temp_f=1;
Function.c (src):	if(para==MODE_INITIAL)
Function.c (src):	else if(para==MODE_LOOP)								//È«Ñ­»·
Function.c (src):			mem_mode=para;
Function.c (src):	if(temp_f)
Function.c (src):			OperationADAU1761();
Function.c (src):	Mode_Operation(MODE_INITIAL);
Function.c (src):const struct oper_mess_type  oper_tab[]={
Function.c (src):	{	1,0xff,	KEY_PANAL_MODE,		MODE_LOOP,		Mode_Operation	},
Function.c (src):	{	0,0xff,	0x0ff,				0,				Mode_Operation	}  // end
Function.c (src):static void Operation_Exe(void)
Function.c (src):	uint8_t para;
Function.c (src):	oper_chk_id &= 0x7f;
Function.c (src):	if ( oper_chk_id < 0x070 )
Function.c (src):			para = oper_tab[oper_chk_id].para;
Function.c (src):			b_oper_rep_timer = 0;    
Function.c (src):			oper_tab[oper_chk_id].proc_entry(para);
Function.c (src):static void Check_Operation(void)
Function.c (src):	static uint8_t f_oper_dly;
Function.c (src):	uint8_t f_oper_found = 0;
Function.c (src):	oper_chk_id = 0x0ff;
Function.c (src):				if (key_code == oper_tab[i].key)
Function.c (src):						f_oper_found = 1;
Function.c (src):			}while( (oper_tab[++i].type ) );
Function.c (src):			if (f_oper_found)
Function.c (src):					switch ( oper_tab[i].type)
Function.c (src):							case	1:						//one times oper
Function.c (src):							case	4:						//power key
Function.c (src):								if ( flags.function_flag.key_rep == 0 )
Function.c (src):										oper_chk_id = i;
Function.c (src):							case	2:						//rep times oper  mode 1
Function.c (src):								if (flags.function_flag.key_rep == 0 )
Function.c (src):										f_oper_dly = 0;
Function.c (src):										oper_chk_id = i;
Function.c (src):										if ( f_oper_dly && (b_oper_rep_timer >= 10) )
Function.c (src):												oper_chk_id = i;
Function.c (src):												if ( (f_oper_dly == 0) &&  (b_oper_rep_timer >= 50) )
Function.c (src):														f_oper_dly = 1;
Function.c (src):							case	3:						//rep times oper  mode 2
Function.c (src):								if ( flags.function_flag.key_rep == 0 )
Function.c (src):										f_oper_dly = 0;
Function.c (src):										oper_chk_id = i;
Function.c (src):										if ( f_oper_dly && (b_oper_rep_timer >= 10) )
Function.c (src):												oper_chk_id = i;
Function.c (src):												if ( (f_oper_dly == 0) &&  (b_oper_rep_timer >= 50) )
Function.c (src):														f_oper_dly = 1;
Function.c (src):static void Key_Read_Operation(void)
Function.c (src):	if(!PI_KEY_MODE())
Function.c (src):static uint8_t Key_Convert_Operation(void)
Function.c (src):	Key_Read_Operation();
Function.c (src):			return KEY_PANAL_MODE;
Function.c (src):			return KEY_PANAL_NULL;
Function.c (src):static void Key_Operation(void)
Function.c (src):	uint8_t key_tmp_panal;
Function.c (src):			key_tmp_panal = Key_Convert_Operation();
Function.c (src):        		if (key_tmp_panal)
Function.c (src):					if(b_old_key_code==key_tmp_panal)
Function.c (src):							flags.function_flag.key_rep= 0;
Function.c (src):							key_code=key_tmp_panal;
Function.c (src):					b_old_key_code = key_tmp_panal;
Function.c (src):static void Status_Operation(void)
Function.c (src):			Led_Operation();
Function.c (src):void OperationCycle(void)
Function.c (src):	Key_Operation();
Function.c (src):	Check_Operation();
Function.c (src):	Operation_Exe();
Function.c (src):	Status_Operation();
Function.h (inc):#define	DATA_FLASH_PAGE_SIZE		(512)
Function.h (inc):#define	KEY_PANAL_NULL	(0)
Function.h (inc):#define	KEY_PANAL_MODE	(1)
Function.h (inc):	#define		MODE_LOOP		(0x10)
Function.h (inc):void OperationCycle(void);
Function.h (inc):T_ERROR_OP OperationADAU1761(void);
Io_define.h (inc):#ifdef __cplusplus
Io_define.h (inc):#define	PO_LEDA(a)	(GPC_1=a)
Io_define.h (inc):#define	PO_LEDB(a)	(GPC_0=a)
Io_define.h (inc):#define	PO_LEDC(a)	(GPC_11=a)
Io_define.h (inc):#define	PO_LEDD(a)	(GPC_10=a)
Io_define.h (inc):#define	PO_LEDE(a)	(GPC_13=a)
Io_define.h (inc):#define	PO_LEDF(a)	(GPC_12=a)
Io_define.h (inc):#define	PO_1761_SDA(a)	(GPA_10=a)
Io_define.h (inc):#define	PI_1761_SDA()	(GPA_10)
Io_define.h (inc):#define	PO_1761_SCL(a)	(GPA_11=a)
Io_define.h (inc):#define	PI_KEY_MODE()	(GPC_2)
Io_define.h (inc):#ifdef __cplusplus
Main.c (src):/* Copyright(c) 2009 Nuvoton Technology Corp. All rights reserved.                                         */
Main.c (src):#include "DrvGPIO.h"
Main.c (src):#include "DataType.h"
Main.c (src):static void GPIO_Initial(void)
Main.c (src):	DrvGPIO_Open(E_GPA, 10, E_IO_OPENDRAIN);	//i2c sda
Main.c (src):	DrvGPIO_Open(E_GPA, 11, E_IO_OPENDRAIN);	//i2c scl
Main.c (src):	DrvGPIO_Open(E_GPC, 10, E_IO_OUTPUT);	//led
Main.c (src):	DrvGPIO_Open(E_GPC, 11, E_IO_OUTPUT);	//led
Main.c (src):	DrvGPIO_Open(E_GPC, 12, E_IO_OUTPUT);	//led
Main.c (src):	DrvGPIO_Open(E_GPC, 13, E_IO_OUTPUT);	//led
Main.c (src):	DrvGPIO_Open(E_GPC, 0, E_IO_OUTPUT);	//led
Main.c (src):	DrvGPIO_Open(E_GPC, 1, E_IO_OUTPUT);	//led
Main.c (src):	DrvGPIO_Open(E_GPC, 2, E_IO_INPUT);		//key mode
Main.c (src):	PO_LEDA(0);
Main.c (src):	PO_LEDB(0);
Main.c (src):	PO_LEDC(0);
Main.c (src):	PO_LEDD(0);
Main.c (src):	PO_LEDE(0);
Main.c (src):	PO_LEDF(0);
Main.c (src):	DrvSYS_SelectIPClockSource(E_SYS_TMR0_CLKSRC, 0);
Main.c (src):	DrvTIMER_Open(E_TMR0, 1000, E_PERIODIC_MODE);//ÖÐ¶Ï»ù´¡Öµ¶¨Îª1ms
Main.c (src):static int32_t DrvSYS_Open_12d288m_48m(uint32_t u32Hclk)
Main.c (src):    //uint32_t u32PllCr;  
Main.c (src):    E_SYS_PLL_CLKSRC ePllSrc = E_SYS_EXTERNAL_12M;
Main.c (src):    /* Check the status of Register Write-Protection Function */
Main.c (src):    if (DrvSYS_IsProtectedRegLocked() == 0)
Main.c (src):        return E_DRVSYS_ERR_REG_PROTECTED;
Main.c (src):    if (SYSCLK->PLLCON.PLL_SRC == 0)
Main.c (src):        SYSCLK->PWRCON.XTL12M_EN = 1;
Main.c (src):            ePllSrc = E_SYS_EXTERNAL_12M;
Main.c (src):            /* Swtich PLL source to RC 22M */
Main.c (src):            SYSCLK->PLLCON.PLL_SRC = 1;
Main.c (src):            ePllSrc = E_SYS_INTERNAL_22M;
Main.c (src):        SYSCLK->PWRCON.OSC22M_EN = 1;
Main.c (src):        ePllSrc = E_SYS_INTERNAL_22M;
Main.c (src):    //u32PllCr = DrvSYS_GetPLLContent(ePllSrc, u32Hclk);
Main.c (src):    //DrvSYS_SetPLLContent(u32PllCr);
Main.c (src):    DrvSYS_SetPLLContent(0x5c7b);//12.288M to 40M
Main.c (src):    SYSCLK->PLLCON.OE = 0;
Main.c (src):    SYSCLK->PLLCON.PD = 0;
Main.c (src):    /* Wait for PLL stable */
Main.c (src):    while (SYSCLK->CLKSTATUS.PLL_STB == 0);
Main.c (src):    /* Change HCLK clock source to be PLL. */
Main.c (src):	SYSCLK->PWRCON.OSC10K_EN = 1;
Main.c (src):	while (DrvSYS_GetChipClockSourceStatus(E_SYS_XTL12M) != 1);
Main.c (src):	/* Configure PLL clock */
Main.c (src):	DrvSYS_SelectPLLSource(E_SYS_EXTERNAL_12M);
Main.c (src):	DrvSYS_Open_12d288m_48m(48000000);
Main.c (src):	/* Get PLL clock frequency */
Main.c (src):	//printf("PLL clock %d Hz\n", DrvSYS_GetPLLClockFreq());
Main.c (src):	GPIO_Initial();
Main.c (src):	DrvFMC_EnableISP();
Main.c (src):		OperationCycle();
Main.c (src):	//DrvGPIO_Close(E_GPA, 10);
Main.c (src):	//DrvGPIO_Close(E_GPB, 9);
ModuleID.h (lib\inc):/* Copyright (c) Nuvoton Technology Corp. All rights reserved.                                             */
ModuleID.h (lib\inc):typedef enum
ModuleID.h (lib\inc):    MODULE_ID_DRVPROTECT        = 0,        /* DrvProtect */
ModuleID.h (lib\inc):    MODULE_ID_DRVAPU            = 6,        /* DrvAPU  */
ModuleID.h (lib\inc):    MODULE_ID_DRVGPIO           = 18,       /* DrvGPIO */
ModuleID.h (lib\inc):    MODULE_ID_DRVGPU            = 20,       /* DrvGPU */
ModuleID.h (lib\inc):    MODULE_ID_DRVMPU            = 28,       /* DrvMPU */
ModuleID.h (lib\inc):    MODULE_ID_DRVPDMA           = 33,       /* DrvPDMA */
ModuleID.h (lib\inc):    MODULE_ID_DRVPWM            = 34,       /* DrvPWM */
ModuleID.h (lib\inc):    MODULE_ID_DRVPS2            = 35,       /* DrvPS2 */
ModuleID.h (lib\inc):    MODULE_ID_DRVSPI            = 40,       /* DrvSPI */
ModuleID.h (lib\inc):    MODULE_ID_DRVSPIMS          = 41,       /* DrvSPIMS */
ModuleID.h (lib\inc):    MODULE_ID_DRVSPIFLASH       = 42,       /* DrvSPIFlash */
ModuleID.h (lib\inc):    MODULE_ID_DRVSPIM           = 43,       /* DrvSPIM */
ModuleID.h (lib\inc):    MODULE_ID_DRVSPU            = 45,       /* DrvSPU */
ModuleID.h (lib\inc):    MODULE_ID_DRVVPOST          = 58,       /* DrvVPOST */
ModuleID.h (lib\inc):    MODULE_ID_DRVJPEG           = 68,       /* DrvJPEG */
ModuleID.h (lib\inc):    MODULE_ID_G726ADPCM         = 85,       /* G726ADPCM  */
ModuleID.h (lib\inc):    MODULE_ID_IMAADPCM          = 86,       /* IMAAdpcmCodec */
ModuleID.h (lib\inc):    MODULE_ID_MP3DEC            = 88,       /* MP3Decoder */
ModuleID.h (lib\inc):    MODULE_ID_PITCHCHANGE       = 90,       /* PitchChanger */
ModuleID.h (lib\inc):    MODULE_ID_MP3ENC            = 112,      /* MP3Encoder */
ModuleID.h (lib\inc):    MODULE_ID_ULSPEECHDEC       = 115,      /* UltraLowSpeechDec */
ModuleID.h (lib\inc):    MODULE_ID_USPEECHDEC        = 116,      /* UltraSpeechDec */
ModuleID.h (lib\inc):    MODULE_ID_SPEECHRECOG       = 118,      /* SpeechRecog */
ModuleID.h (lib\inc):    MODULE_ID_KEYPAD            = 130,      /* Keypad  */
ModuleID.h (lib\inc):    MODULE_ID_LWIP              = 132,      /* LwIP   */
ModuleID.h (lib\inc):    MODULE_ID_HTTPD             = 136,      /* HTTPD   */
ModuleID.h (lib\inc):    /* Graphics: Module ID                  Module Name */
ModuleID.h (lib\inc):    MODULE_ID_GFXRESLDR         = 140,      /* GraphicsResLoader */
ModuleID.h (lib\inc):    MODULE_ID_GFXLIB            = 141,      /* GraphicsLib */
ModuleID.h (lib\inc):    MODULE_ID_IMGPROC           = 142,      /* ImageProcess */
ModuleID.h (lib\inc):    MODULE_ID_JPEG              = 144,      /* JPEGCodec */
ModuleID.h (lib\inc):    MODULE_ID_PNGDEC            = 146,      /* PNGCodec */
ModuleID.h (lib\inc):    MODULE_ID_PTNRECOG          = 150,      /* PtnRecog */
ModuleID.h (lib\inc):    MODULE_ID_SPIFLASH          = 163,      /* SPIFlash */
ModuleID.h (lib\inc):    MODULE_ID_INTMGR            = 180,      /* InterruptManager */
ModuleID.h (lib\inc):    MODULE_ID_PROF              = 184,      /* Profiling  */
ModuleID.h (lib\inc):    MODULE_ID_PROGLDR           = 186,      /* ProgramLoader */
ModuleID.h (lib\inc):    MODULE_ID_CONPROGLDR        = 194,      /* ConsoleProgramLoader */
ModuleID.h (lib\inc):    MODULE_ID_MTP               = 230,      /* MTP */
ModuleID.h (lib\inc):    MODULE_ID_MSDRMPD           = 228,      /* MsDrmPd */
ModuleID.h (lib\inc):    MODULE_ID_MJPEG             = 242,      /* MJpegCodec  */
ModuleID.h (lib\inc):    MODULE_ID_WTDISPLAY         = 172,      /* WTDisplay */
ModuleID.h (lib\inc):    MODULE_ID_WTTRANS           = 178,      /* WTTransport */
NUC122.h (lib\inc):/* Copyright (c) Nuvoton Technology Corp. All rights reserved.                                             */
NUC122.h (lib\inc): * ---------- Interrupt Number Definition -----------------------------------
NUC122.h (lib\inc):typedef enum IRQn
NUC122.h (lib\inc):/******  Cortex-M0 Processor Exceptions Numbers ***************************************************/
NUC122.h (lib\inc):  NonMaskableInt_IRQn       = -14,    /*!< 2 Non Maskable Interrupt                               */
NUC122.h (lib\inc):  HardFault_IRQn            = -13,    /*!< 3 Cortex-M0 Hard Fault Interrupt                       */
NUC122.h (lib\inc):  SVCall_IRQn               = -5,     /*!< 11 Cortex-M0 SV Call Interrupt                         */
NUC122.h (lib\inc):  PendSV_IRQn               = -2,     /*!< 14 Cortex-M0 Pend SV Interrupt                         */
NUC122.h (lib\inc):  SysTick_IRQn              = -1,     /*!< 15 Cortex-M0 System Tick Interrupt                     */
NUC122.h (lib\inc):/************************ NUC102 Interrupt Numbers ************************************************/
NUC122.h (lib\inc):  GPAB_IRQn                 = 4,
NUC122.h (lib\inc):  GPCD_IRQn                 = 5,
NUC122.h (lib\inc):  PWMA_IRQn                 = 6,
NUC122.h (lib\inc):  PWMB_IRQn                 = 7,
NUC122.h (lib\inc):  SPI0_IRQn                 = 14,
NUC122.h (lib\inc):  SPI1_IRQn                 = 15,
NUC122.h (lib\inc):  SPI2_IRQn                 = 16,
NUC122.h (lib\inc):  SPI3_IRQn                 = 17,
NUC122.h (lib\inc):  PS2_IRQn                  = 24,
NUC122.h (lib\inc):  ACMP_IRQn                 = 25,
NUC122.h (lib\inc):  PDMA_IRQn                 = 26,
NUC122.h (lib\inc):  PWRWU_IRQn                = 28,
NUC122.h (lib\inc):} IRQn_Type;
NUC122.h (lib\inc): * ----------- Processor and Core Peripheral Section ------------------------
NUC122.h (lib\inc):/* Configuration of the Cortex-M0 Processor and Core Peripherals */
NUC122.h (lib\inc):#define __MPU_PRESENT           0       /*!< armikcmu does not provide a MPU present or not       */
NUC122.h (lib\inc):#define __NVIC_PRIO_BITS        2       /*!< armikcmu Supports 2 Bits for the Priority Levels     */
NUC122.h (lib\inc):#pragma anon_unions
NUC122.h (lib\inc):#include "core_cm0.h"                   /* Cortex-M0 processor and core peripherals               */
NUC122.h (lib\inc):/*                Device Specific Peripheral registers structures             */
NUC122.h (lib\inc):/*--------------------- General Purpose Input and Ouptut ---------------------*/
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):    __IO uint32_t PMD0:2;
NUC122.h (lib\inc):    __IO uint32_t PMD1:2;
NUC122.h (lib\inc):    __IO uint32_t PMD2:2;
NUC122.h (lib\inc):    __IO uint32_t PMD3:2;
NUC122.h (lib\inc):    __IO uint32_t PMD4:2;
NUC122.h (lib\inc):    __IO uint32_t PMD5:2;
NUC122.h (lib\inc):    __IO uint32_t PMD6:2;
NUC122.h (lib\inc):    __IO uint32_t PMD7:2;
NUC122.h (lib\inc):    __IO uint32_t PMD8:2;
NUC122.h (lib\inc):    __IO uint32_t PMD9:2;
NUC122.h (lib\inc):    __IO uint32_t PMD10:2;
NUC122.h (lib\inc):    __IO uint32_t PMD11:2;
NUC122.h (lib\inc):    __IO uint32_t PMD12:2;
NUC122.h (lib\inc):    __IO uint32_t PMD13:2;
NUC122.h (lib\inc):    __IO uint32_t PMD14:2;
NUC122.h (lib\inc):    __IO uint32_t PMD15:2;
NUC122.h (lib\inc):} GPIO_PMD_T;
NUC122.h (lib\inc):typedef __IO uint32_t GPIO_OFFD_T;
NUC122.h (lib\inc):typedef __IO uint32_t GPIO_DOUT_T;
NUC122.h (lib\inc):typedef __IO uint32_t GPIO_DMASK_T;
NUC122.h (lib\inc):typedef __IO uint32_t GPIO_PIN_T;
NUC122.h (lib\inc):typedef __IO uint32_t GPIO_DBEN_T;
NUC122.h (lib\inc):typedef __IO uint32_t GPIO_IMD_T;
NUC122.h (lib\inc):typedef __IO uint32_t GPIO_IEN_T;
NUC122.h (lib\inc):typedef __IO uint32_t GPIO_ISRC_T;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):        __IO uint32_t u32PMD;
NUC122.h (lib\inc):            __IO uint32_t PMD0:2;
NUC122.h (lib\inc):            __IO uint32_t PMD1:2;
NUC122.h (lib\inc):            __IO uint32_t PMD2:2;
NUC122.h (lib\inc):            __IO uint32_t PMD3:2;
NUC122.h (lib\inc):            __IO uint32_t PMD4:2;
NUC122.h (lib\inc):            __IO uint32_t PMD5:2;
NUC122.h (lib\inc):            __IO uint32_t PMD6:2;
NUC122.h (lib\inc):            __IO uint32_t PMD7:2;
NUC122.h (lib\inc):            __IO uint32_t PMD8:2;
NUC122.h (lib\inc):            __IO uint32_t PMD9:2;
NUC122.h (lib\inc):            __IO uint32_t PMD10:2;
NUC122.h (lib\inc):            __IO uint32_t PMD11:2;
NUC122.h (lib\inc):            __IO uint32_t PMD12:2;
NUC122.h (lib\inc):            __IO uint32_t PMD13:2;
NUC122.h (lib\inc):            __IO uint32_t PMD14:2;
NUC122.h (lib\inc):            __IO uint32_t PMD15:2;
NUC122.h (lib\inc):        } PMD;
NUC122.h (lib\inc):        __IO uint32_t u32PIN;
NUC122.h (lib\inc):        __IO uint32_t PIN;
NUC122.h (lib\inc):} GPIO_T;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):} GPIO_DBNCECON_T;
NUC122.h (lib\inc):/* GPIO PMD Bit Field Definitions */
NUC122.h (lib\inc):#define GPIO_PMD_PMD15_Pos          30
NUC122.h (lib\inc):#define GPIO_PMD_PMD15_Msk          (0x3ul << GPIO_PMD_PMD15_Pos)
NUC122.h (lib\inc):#define GPIO_PMD_PMD14_Pos          28
NUC122.h (lib\inc):#define GPIO_PMD_PMD14_Msk          (0x3ul << GPIO_PMD_PMD14_Pos)
NUC122.h (lib\inc):#define GPIO_PMD_PMD13_Pos          26
NUC122.h (lib\inc):#define GPIO_PMD_PMD13_Msk          (0x3ul << GPIO_PMD_PMD13_Pos)
NUC122.h (lib\inc):#define GPIO_PMD_PMD12_Pos          24
NUC122.h (lib\inc):#define GPIO_PMD_PMD12_Msk          (0x3ul << GPIO_PMD_PMD12_Pos)
NUC122.h (lib\inc):#define GPIO_PMD_PMD11_Pos          22
NUC122.h (lib\inc):#define GPIO_PMD_PMD11_Msk          (0x3ul << GPIO_PMD_PMD11_Pos)
NUC122.h (lib\inc):#define GPIO_PMD_PMD10_Pos          20
NUC122.h (lib\inc):#define GPIO_PMD_PMD10_Msk          (0x3ul << GPIO_PMD_PMD10_Pos)
NUC122.h (lib\inc):#define GPIO_PMD_PMD9_Pos           18
NUC122.h (lib\inc):#define GPIO_PMD_PMD9_Msk           (0x3ul << GPIO_PMD_PMD9_Pos)
NUC122.h (lib\inc):#define GPIO_PMD_PMD8_Pos           16
NUC122.h (lib\inc):#define GPIO_PMD_PMD8_Msk           (0x3ul << GPIO_PMD_PMD8_Pos)
NUC122.h (lib\inc):#define GPIO_PMD_PMD7_Pos           14
NUC122.h (lib\inc):#define GPIO_PMD_PMD7_Msk           (0x3ul << GPIO_PMD_PMD7_Pos)
NUC122.h (lib\inc):#define GPIO_PMD_PMD6_Pos           12
NUC122.h (lib\inc):#define GPIO_PMD_PMD6_Msk           (0x3ul << GPIO_PMD_PMD6_Pos)
NUC122.h (lib\inc):#define GPIO_PMD_PMD5_Pos           10
NUC122.h (lib\inc):#define GPIO_PMD_PMD5_Msk           (0x3ul << GPIO_PMD_PMD5_Pos)
NUC122.h (lib\inc):#define GPIO_PMD_PMD4_Pos           8
NUC122.h (lib\inc):#define GPIO_PMD_PMD4_Msk           (0x3ul << GPIO_PMD_PMD4_Pos)
NUC122.h (lib\inc):#define GPIO_PMD_PMD3_Pos           6
NUC122.h (lib\inc):#define GPIO_PMD_PMD3_Msk           (0x3ul << GPIO_PMD_PMD3_Pos)
NUC122.h (lib\inc):#define GPIO_PMD_PMD2_Pos           4
NUC122.h (lib\inc):#define GPIO_PMD_PMD2_Msk           (0x3ul << GPIO_PMD_PMD2_Pos)
NUC122.h (lib\inc):#define GPIO_PMD_PMD1_Pos           2
NUC122.h (lib\inc):#define GPIO_PMD_PMD1_Msk           (0x3ul << GPIO_PMD_PMD1_Pos)
NUC122.h (lib\inc):#define GPIO_PMD_PMD0_Pos           0
NUC122.h (lib\inc):#define GPIO_PMD_PMD0_Msk           (0x3ul << GPIO_PMD_PMD0_Pos)
NUC122.h (lib\inc):/* GPIO OFFD Bit Field Definitions */
NUC122.h (lib\inc):#define GPIO_OFFD_Pos               16
NUC122.h (lib\inc):#define GPIO_OFFD_Msk               (0xFFFFul << GPIO_OFFD_Pos)
NUC122.h (lib\inc):/* GPIO DOUT Bit Field Definitions */
NUC122.h (lib\inc):#define GPIO_DOUT_Pos               0
NUC122.h (lib\inc):#define GPIO_DOUT_Msk               (0xFFFFul << GPIO_DOUT_Pos)
NUC122.h (lib\inc):/* GPIO DMASK Bit Field Definitions */
NUC122.h (lib\inc):#define GPIO_DMASK_Pos              0
NUC122.h (lib\inc):#define GPIO_DMASK_Msk              (0xFFFFul << GPIO_DMASK_Pos)
NUC122.h (lib\inc):/* GPIO PIN Bit Field Definitions */
NUC122.h (lib\inc):#define GPIO_PIN_Pos                0
NUC122.h (lib\inc):#define GPIO_PIN_Msk                (0xFFFFul << GPIO_PIN_Pos)
NUC122.h (lib\inc):/* GPIO DBEN Bit Field Definitions */
NUC122.h (lib\inc):#define GPIO_DBEN_Pos               0
NUC122.h (lib\inc):#define GPIO_DBEN_Msk               (0xFFFFul << GPIO_DBEN_Pos)
NUC122.h (lib\inc):/* GPIO IMD Bit Field Definitions */
NUC122.h (lib\inc):#define GPIO_IMD_Pos                0
NUC122.h (lib\inc):#define GPIO_IMD_Msk                (0xFFFFul << GPIO_IMD_Pos)
NUC122.h (lib\inc):/* GPIO IEN Bit Field Definitions */
NUC122.h (lib\inc):#define GPIO_IEN_IR_EN_Pos          16
NUC122.h (lib\inc):#define GPIO_IEN_IR_EN_Msk          (0xFFFFul << GPIO_IEN_IR_EN_Pos)
NUC122.h (lib\inc):#define GPIO_IEN_IF_EN_Pos          0
NUC122.h (lib\inc):#define GPIO_IEN_IF_EN_Msk          (0xFFFFul << GPIO_IEN_IF_EN_Pos)
NUC122.h (lib\inc):/* GPIO ISRC Bit Field Definitions */
NUC122.h (lib\inc):#define GPIO_ISRC_Pos               0
NUC122.h (lib\inc):#define GPIO_ISRC_Msk               (0xFFFFul << GPIO_ISRC_Pos)
NUC122.h (lib\inc):/* GPIO DBNCECON Bit Field Definitions */
NUC122.h (lib\inc):#define GPIO_DBNCECON_ICLK_ON_Pos   5
NUC122.h (lib\inc):#define GPIO_DBNCECON_ICLK_ON_Msk   (1ul << GPIO_DBNCECON_ICLK_ON_Pos)
NUC122.h (lib\inc):#define GPIO_DBNCECON_DBCLKSRC_Pos  4
NUC122.h (lib\inc):#define GPIO_DBNCECON_DBCLKSRC_Msk  (1ul << GPIO_DBNCECON_DBCLKSRC_Pos)
NUC122.h (lib\inc):#define GPIO_DBNCECON_DBCLKSEL_Pos  0
NUC122.h (lib\inc):#define GPIO_DBNCECON_DBCLKSEL_Msk  (0xFul << GPIO_DBNCECON_DBCLKSEL_Pos)
NUC122.h (lib\inc):/* GPIO Port[x] Pin I/O Bit Output/Input Control Bit Field Definitions */
NUC122.h (lib\inc):#define GPIO_GPIOx_DOUT_Pos         0
NUC122.h (lib\inc):#define GPIO_GPIOx_DOUT_Msk         (1ul << GPIO_GPIOx_DOUT_Pos)
NUC122.h (lib\inc):typedef __IO uint32_t UART_DATA_T;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):    __IO uint32_t  RFITL:4;             /* Rx FIFO Interrupt Trigger Level */
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):    __IO uint32_t  NSB:1;               /* Number of STOP bit */
NUC122.h (lib\inc):    __IO uint32_t  PBE:1;               /* Parity bit enable  */
NUC122.h (lib\inc):    __IO uint32_t  EPE:1;               /* Even parity enable */
NUC122.h (lib\inc):    __IO uint32_t  SPE:1;               /* Stick parity enable*/
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):    __IO uint32_t  PEF:1;
NUC122.h (lib\inc):    __I  uint32_t  RX_POINTER:6;
NUC122.h (lib\inc):    __I  uint32_t  RX_EMPTY:1;
NUC122.h (lib\inc):    __I  uint32_t  TX_POINTER:6;
NUC122.h (lib\inc):    __I  uint32_t  TX_EMPTY:1;
NUC122.h (lib\inc):    __I  uint32_t  TE_FLAG:1;           /* Transmitter empty flag */
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):            __IO uint32_t  PBE:1;
NUC122.h (lib\inc):            __IO uint32_t  EPE:1;
NUC122.h (lib\inc):            __IO uint32_t  SPE:1;          
NUC122.h (lib\inc):            __IO uint32_t  PEF:1;
NUC122.h (lib\inc):            __IO uint32_t  RX_POINTER:6;
NUC122.h (lib\inc):            __IO uint32_t  RX_EMPTY:1;
NUC122.h (lib\inc):            __IO uint32_t  TX_POINTER:6;
NUC122.h (lib\inc):            __IO uint32_t  TX_EMPTY:1;
NUC122.h (lib\inc):#define UART_THR_THR_Pos         0
NUC122.h (lib\inc):#define UART_THR_THR_Msk        (0xFul << UART_THR_THR_Pos)
NUC122.h (lib\inc):#define UART_RBR_RBR_Pos         0
NUC122.h (lib\inc):#define UART_RBR_RBR_Msk        (0xFul << UART_RBR_RBR_Pos)
NUC122.h (lib\inc):#define UART_IER_AUTO_CTS_EN_Pos    13
NUC122.h (lib\inc):#define UART_IER_AUTO_CTS_EN_Msk    (1ul << UART_IER_AUTO_CTS_EN_Pos)
NUC122.h (lib\inc):#define UART_IER_AUTO_RTS_EN_Pos    12
NUC122.h (lib\inc):#define UART_IER_AUTO_RTS_EN_Msk    (1ul << UART_IER_AUTO_RTS_EN_Pos)
NUC122.h (lib\inc):#define UART_IER_TIME_OUT_EN_Pos    11
NUC122.h (lib\inc):#define UART_IER_TIME_OUT_EN_Msk    (1ul << UART_IER_TIME_OUT_EN_Pos)
NUC122.h (lib\inc):#define UART_IER_WAKE_EN_Pos        6
NUC122.h (lib\inc):#define UART_IER_WAKE_EN_Msk        (1ul << UART_IER_WAKE_EN_Pos)
NUC122.h (lib\inc):#define UART_IER_BUF_ERR_IEN_Pos    5
NUC122.h (lib\inc):#define UART_IER_BUF_ERR_IEN_Msk    (1ul << UART_IER_BUF_ERR_IEN_Pos)
NUC122.h (lib\inc):#define UART_IER_RTO_IEN_Pos        4
NUC122.h (lib\inc):#define UART_IER_RTO_IEN_Msk        (1ul << UART_IER_RTO_IEN_Pos)
NUC122.h (lib\inc):#define UART_IER_MODEM_IEN_Pos      3
NUC122.h (lib\inc):#define UART_IER_MODEM_IEN_Msk      (1ul << UART_IER_MODEM_IEN_Pos)
NUC122.h (lib\inc):#define UART_IER_RLS_IEN_Pos        2
NUC122.h (lib\inc):#define UART_IER_RLS_IEN_Msk        (1ul << UART_IER_RLS_IENN_Pos)
NUC122.h (lib\inc):#define UART_IER_THRE_IEN_Pos       1
NUC122.h (lib\inc):#define UART_IER_THRE_IEN_Msk       (1ul << UART_IER_THRE_IEN_Pos)
NUC122.h (lib\inc):#define UART_IER_RDA_IEN_Pos        0
NUC122.h (lib\inc):#define UART_IER_RDA_IEN_Msk        (1ul << UART_IER_RDA_IEN_Pos)
NUC122.h (lib\inc):#define UART_FCR_RTS_TRI_LEV_Pos    16
NUC122.h (lib\inc):#define UART_FCR_RTS_TRI_LEV_Msk    (0xFul << UART_FCR_RTS_TRI_LEV_Pos)
NUC122.h (lib\inc):#define UART_FCR_RX_DIS_Pos         8
NUC122.h (lib\inc):#define UART_FCR_RX_DIS_Msk         (1ul << UART_FCR_RX_DIS_Pos)
NUC122.h (lib\inc):#define UART_FCR_RFITL_Pos          4
NUC122.h (lib\inc):#define UART_FCR_RFITL_Msk          (0xFul << UART_FCR_RFITL_Pos)
NUC122.h (lib\inc):#define UART_FCR_TFR_Pos            2
NUC122.h (lib\inc):#define UART_FCR_TFR_Msk            (1ul << UART_FCR_TFR_Pos)
NUC122.h (lib\inc):#define UART_FCR_RFR_Pos            1
NUC122.h (lib\inc):#define UART_FCR_RFR_Msk            (1ul << UART_FCR_RFR_Pos)
NUC122.h (lib\inc):#define UART_LCR_BCB_Pos            6
NUC122.h (lib\inc):#define UART_LCR_BCB_Msk            (1ul << UART_LCR_BCB_Pos)
NUC122.h (lib\inc):#define UART_LCR_SPE_Pos            5
NUC122.h (lib\inc):#define UART_LCR_SPE_Msk            (1ul << UART_LCR_SPE_Pos)
NUC122.h (lib\inc):#define UART_LCR_EPE_Pos            4
NUC122.h (lib\inc):#define UART_LCR_EPE_Msk            (1ul << UART_LCR_EPE_Pos)
NUC122.h (lib\inc):#define UART_LCR_PBE_Pos            3
NUC122.h (lib\inc):#define UART_LCR_PBE_Msk            (1ul << UART_LCR_PBE_Pos)
NUC122.h (lib\inc):#define UART_LCR_NSB_Pos            2
NUC122.h (lib\inc):#define UART_LCR_NSB_Msk            (1ul << UART_LCR_NSB_Pos)
NUC122.h (lib\inc):#define UART_LCR_WLS_Pos            0
NUC122.h (lib\inc):#define UART_LCR_WLS_Msk            (0x3ul << UART_LCR_WLS_Pos)
NUC122.h (lib\inc):#define UART_MCR_RTS_ST_Pos         13
NUC122.h (lib\inc):#define UART_MCR_RTS_ST_Msk         (1ul << UART_MCR_RTS_ST_Pos)
NUC122.h (lib\inc):#define UART_MCR_LEV_RTS_Pos        9
NUC122.h (lib\inc):#define UART_MCR_LEV_RTS_Msk        (1ul << UART_MCR_LEV_RTS_Pos)
NUC122.h (lib\inc):#define UART_MCR_RTS_Pos            1
NUC122.h (lib\inc):#define UART_MCR_RTS_Msk            (1ul << UART_MCR_RTS_Pos)
NUC122.h (lib\inc):#define UART_MSR_LEV_CTS_Pos        8
NUC122.h (lib\inc):#define UART_MSR_LEV_CTS_Msk        (1ul << UART_MSR_LEV_CTS_Pos)
NUC122.h (lib\inc):#define UART_MSR_CTS_ST_Pos         4
NUC122.h (lib\inc):#define UART_MSR_CTS_ST_Msk         (1ul << UART_MSR_CTS_ST_Pos)
NUC122.h (lib\inc):#define UART_MSR_DCTSF_Pos          0
NUC122.h (lib\inc):#define UART_MSR_DCTSF_Msk          (1ul << UART_MSR_DCTSF_Pos)
NUC122.h (lib\inc):#define UART_FSR_TE_FLAG_Pos        28
NUC122.h (lib\inc):#define UART_FSR_TE_FLAG_Msk        (1ul << UART_FSR_TE_FLAG_Pos)
NUC122.h (lib\inc):#define UART_FSR_TX_OVER_IF_Pos     24
NUC122.h (lib\inc):#define UART_FSR_TX_OVER_IF_Msk     (1ul << UART_FSR_TX_OVER_IF_Pos)
NUC122.h (lib\inc):#define UART_FSR_TX_FULL_Pos        23
NUC122.h (lib\inc):#define UART_FSR_TX_FULL_Msk        (1ul << UART_FSR_TX_FULL_Pos)
NUC122.h (lib\inc):#define UART_FSR_TX_EMPTY_Pos       22
NUC122.h (lib\inc):#define UART_FSR_TX_EMPTY_Msk       (1ul << UART_FSR_TX_EMPTY_Pos)
NUC122.h (lib\inc):#define UART_FSR_TX_POINTER_Pos     16
NUC122.h (lib\inc):#define UART_FSR_TX_POINTER_Msk     (0x3Ful << UART_FSR_TX_POINTER_Pos)
NUC122.h (lib\inc):#define UART_FSR_RX_FULL_Pos        15
NUC122.h (lib\inc):#define UART_FSR_RX_FULL_Msk        (1ul << UART_FSR_RX_FULL_Pos)
NUC122.h (lib\inc):#define UART_FSR_RX_EMPTY_Pos       14
NUC122.h (lib\inc):#define UART_FSR_RX_EMPTY_Msk       (1ul << UART_FSR_RX_EMPTY_Pos)
NUC122.h (lib\inc):#define UART_FSR_RX_POINTER_Pos     8
NUC122.h (lib\inc):#define UART_FSR_RX_POINTER_Msk     (0x3Ful << UART_FSR_RX_POINTER_Pos)
NUC122.h (lib\inc):#define UART_FSR_BIF_Pos            6
NUC122.h (lib\inc):#define UART_FSR_BIF_Msk            (1ul << UART_FSR_BIF_Pos)
NUC122.h (lib\inc):#define UART_FSR_FEF_Pos            5
NUC122.h (lib\inc):#define UART_FSR_FEF_Msk            (1ul << UART_FSR_FEF_Pos)
NUC122.h (lib\inc):#define UART_FSR_PEF_Pos            4
NUC122.h (lib\inc):#define UART_FSR_PEF_Msk            (1ul << UART_FSR_PEF_Pos)
NUC122.h (lib\inc):#define UART_FSR_RS485_ADD_DETF_Pos 3
NUC122.h (lib\inc):#define UART_FSR_RS485_ADD_DETF_Msk (1ul << UART_FSR_RS485_ADD_DETF_Pos)
NUC122.h (lib\inc):#define UART_FSR_RX_OVER_IF_Pos     0
NUC122.h (lib\inc):#define UART_FSR_RX_OVER_IF_Msk     (1ul << UART_FSR_RX_OVER_IF_Pos)
NUC122.h (lib\inc):#define UART_ISR_BUF_ERR_INT_Pos           13
NUC122.h (lib\inc):#define UART_ISR_BUF_ERR_INT_Msk           (1ul << UART_ISR_BUF_ERR_INT_Pos)
NUC122.h (lib\inc):#define UART_ISR_TOUT_INT_Pos              12
NUC122.h (lib\inc):#define UART_ISR_TOUT_INT_Msk              (1ul << UART_ISR_TOUT_INT_Pos)
NUC122.h (lib\inc):#define UART_ISR_MODEM_INT_Pos             11    
NUC122.h (lib\inc):#define UART_ISR_MODEM_INT_Msk             (1ul << UART_ISR_MODEM_INT_Pos)
NUC122.h (lib\inc):#define UART_ISR_RLS_INT_Pos               10    
NUC122.h (lib\inc):#define UART_ISR_RLS_INT_Msk               (1ul << UART_ISR_RLS_INT_Pos)
NUC122.h (lib\inc):#define UART_ISR_THRE_INT_Pos              9    
NUC122.h (lib\inc):#define UART_ISR_THRE_INT_Msk              (1ul << UART_ISR_THRE_INT_Pos)
NUC122.h (lib\inc):#define UART_ISR_RDA_INT_Pos               8    
NUC122.h (lib\inc):#define UART_ISR_RDA_INT_Msk               (1ul << UART_ISR_RDA_INT_Pos)
NUC122.h (lib\inc):#define UART_ISR_BUF_ERR_IF_Pos            5    
NUC122.h (lib\inc):#define UART_ISR_BUF_ERR_IF_Msk            (1ul << UART_ISR_BUF_ERR_IF_Pos)
NUC122.h (lib\inc):#define UART_ISR_TOUT_IF_Pos               4    
NUC122.h (lib\inc):#define UART_ISR_TOUT_IF_Msk               (1ul << UART_ISR_TOUT_IF_Pos)
NUC122.h (lib\inc):#define UART_ISR_MODEM_IF_Pos              3    
NUC122.h (lib\inc):#define UART_ISR_MODEM_IF_Msk              (1ul << UART_ISR_MODEM_IF_Pos)
NUC122.h (lib\inc):#define UART_ISR_RLS_IF_Pos                2    
NUC122.h (lib\inc):#define UART_ISR_RLS_IF_Msk                (1ul << UART_ISR_RLS_IF_Pos)
NUC122.h (lib\inc):#define UART_ISR_THRE_IF_Pos               1    
NUC122.h (lib\inc):#define UART_ISR_THRE_IF_Msk               (1ul << UART_ISR_THRE_IF_Pos)
NUC122.h (lib\inc):#define UART_ISR_RDA_IF_Pos                0    
NUC122.h (lib\inc):#define UART_ISR_RDA_IF_Msk                (1ul << UART_ISR_RDA_IF_Pos)
NUC122.h (lib\inc):#define UART_TOR_DLY_Pos   8
NUC122.h (lib\inc):#define UART_TOR_DLY_Msk   (0xFFul << UART_TOR_DLY_Pos)
NUC122.h (lib\inc):#define UART_TOR_TOIC_Pos  0  
NUC122.h (lib\inc):#define UART_TOR_TOIC_Msk  (0xFFul << UART_TOR_TOIC_Pos)
NUC122.h (lib\inc):#define UART_BAUD_DIV_X_EN_Pos    29
NUC122.h (lib\inc):#define UART_BAUD_DIV_X_EN_Msk    (1ul << UART_BAUD_DIV_X_EN_Pos)
NUC122.h (lib\inc):#define UART_BAUD_DIV_X_ONE_Pos   28
NUC122.h (lib\inc):#define UART_BAUD_DIV_X_ONE_Msk   (1ul << UART_BAUD_DIV_X_ONE_Pos)
NUC122.h (lib\inc):#define UART_BAUD_DIVIDER_X_Pos   24
NUC122.h (lib\inc):#define UART_BAUD_DIVIDER_X_Msk   (0xFul << UART_BAUD_DIVIDER_X_Pos)
NUC122.h (lib\inc):#define UART_BAUD_BRD_Pos         0
NUC122.h (lib\inc):#define UART_BAUD_BRD_Msk         (0xFFul << UART_BAUD_BRD_Pos)
NUC122.h (lib\inc):#define UART_IRCR_INV_RX_Pos      6
NUC122.h (lib\inc):#define UART_IRCR_INV_RX_Msk     (1ul << UART_IRCR_INV_RX_Pos)
NUC122.h (lib\inc):#define UART_IRCR_INV_TX_Pos      5
NUC122.h (lib\inc):#define UART_IRCR_INV_TX_Msk     (1ul << UART_IRCR_INV_TX_Pos)
NUC122.h (lib\inc):#define UART_IRCR_TX_SELECT_Pos   1
NUC122.h (lib\inc):#define UART_IRCR_TX_SELECT_Msk   (1ul << UART_IRCR_TX_SELECT_Pos)
NUC122.h (lib\inc):#define UART_ALT_CSR_ADDR_MATCH_Pos      24
NUC122.h (lib\inc):#define UART_ALT_CSR_ADDR_MATCH_Msk     (0xFFul << UART_ALT_CSR_ADDR_MATCH_Pos)
NUC122.h (lib\inc):#define UART_ALT_CSR_RS485_ADD_EN_Pos   15
NUC122.h (lib\inc):#define UART_ALT_CSR_RS485_ADD_EN_Msk   (1ul << UART_ALT_CSR_RS485_ADD_EN_Pos)
NUC122.h (lib\inc):#define UART_ALT_CSR_RS485_AUD_Pos      10
NUC122.h (lib\inc):#define UART_ALT_CSR_RS485_AUD_Msk      (1ul << UART_ALT_CSR_RS485_AUD_Pos)
NUC122.h (lib\inc):#define UART_ALT_CSR_RS485_AAD_Pos      9
NUC122.h (lib\inc):#define UART_ALT_CSR_RS485_AAD_Msk      (1ul << UART_ALT_CSR_RS485_AAD_Pos)
NUC122.h (lib\inc):#define UART_ALT_CSR_RS485_NMM_Pos      8
NUC122.h (lib\inc):#define UART_ALT_CSR_RS485_NMM_Msk      (1ul << UART_ALT_CSR_RS485_NMM_Pos)
NUC122.h (lib\inc):#define UART_FUN_SEL_FUN_SEL_Pos        0
NUC122.h (lib\inc):#define UART_FUN_SEL_FUN_SEL_Msk       (0x3ul << UART_FUN_SEL_FUN_SEL_Pos)
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):    __IO uint32_t  PRESCALE:8;
NUC122.h (lib\inc):typedef __IO uint32_t TIMER_TCMPR_T;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):typedef __IO uint32_t TIMER_TDR_T;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):            __IO uint32_t  PRESCALE:8;
NUC122.h (lib\inc):        __IO uint32_t u32TCMPR;
NUC122.h (lib\inc):        __IO uint32_t TCMPR;
NUC122.h (lib\inc):#define TIMER_TCSR_DBGACK_TMR_Pos   31
NUC122.h (lib\inc):#define TIMER_TCSR_DBGACK_TMR_Msk   (1ul << TIMER_TCSR_DBGACK_TMR_Pos)
NUC122.h (lib\inc):#define TIMER_TCSR_CEN_Pos          30
NUC122.h (lib\inc):#define TIMER_TCSR_CEN_Msk          (1ul << TIMER_TCSR_CEN_Pos)
NUC122.h (lib\inc):#define TIMER_TCSR_IE_Pos           29
NUC122.h (lib\inc):#define TIMER_TCSR_IE_Msk           (1ul << TIMER_TCSR_IE_Pos)
NUC122.h (lib\inc):#define TIMER_TCSR_MODE_Pos         27
NUC122.h (lib\inc):#define TIMER_TCSR_MODE_Msk         (0x3ul << TIMER_TCSR_MODE_Pos)
NUC122.h (lib\inc):#define TIMER_TCSR_CRST_Pos         26
NUC122.h (lib\inc):#define TIMER_TCSR_CRST_Msk         (1ul << TIMER_TCSR_CRST_Pos)
NUC122.h (lib\inc):#define TIMER_TCSR_CACT_Pos         25
NUC122.h (lib\inc):#define TIMER_TCSR_CACT_Msk         (1ul << TIMER_TCSR_CACT_Pos)
NUC122.h (lib\inc):#define TIMER_TCSR_CTB_Pos          24
NUC122.h (lib\inc):#define TIMER_TCSR_CTB_Msk          (1ul << TIMER_TCSR_CTB_Pos)
NUC122.h (lib\inc):#define TIMER_TCSR_TDR_EN_Pos       16
NUC122.h (lib\inc):#define TIMER_TCSR_TDR_EN_Msk       (1ul << TIMER_TCSR_TDR_EN_Pos)
NUC122.h (lib\inc):#define TIMER_TCSR_PRESCALE_Pos     0
NUC122.h (lib\inc):#define TIMER_TCSR_PRESCALE_Msk     (0xFFul << TIMER_TCSR_PRESCALE_Pos)
NUC122.h (lib\inc):/* Timer TCMPR Bit Field Definitions */
NUC122.h (lib\inc):#define TIMER_TCMP_Pos              0
NUC122.h (lib\inc):#define TIMER_TCMP_Msk              (0xFFFFFFul << TIMER_TCMP_Pos)
NUC122.h (lib\inc):#define TIMER_TISR_TIF_Pos          0
NUC122.h (lib\inc):#define TIMER_TISR_TIF_Msk          (1ul << TIMER_TISR_TIF_Pos)
NUC122.h (lib\inc):#define TIMER_TDR_Pos               0
NUC122.h (lib\inc):#define TIMER_TDR_Msk               (0xFFFFFFul << TIMER_TDR_Pos)
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):#define WDT_WTCR_DBGACK_WDT_Pos 31
NUC122.h (lib\inc):#define WDT_WTCR_DBGACK_WDT_Msk (1ul << WDT_WTCR_DBGACK_WDT_Pos)
NUC122.h (lib\inc):#define WDT_WTCR_WTIS_Pos       8  
NUC122.h (lib\inc):#define WDT_WTCR_WTIS_Msk       (0x3ul << WDT_WTCR_WTIS_Pos)
NUC122.h (lib\inc):#define WDT_WTCR_WTE_Pos        7  
NUC122.h (lib\inc):#define WDT_WTCR_WTE_Msk        (1ul << WDT_WTCR_WTE_Pos)
NUC122.h (lib\inc):#define WDT_WTCR_WTIE_Pos       6  
NUC122.h (lib\inc):#define WDT_WTCR_WTIE_Msk       (1ul << WDT_WTCR_WTIE_Pos)
NUC122.h (lib\inc):#define WDT_WTCR_WTWKF_Pos      5  
NUC122.h (lib\inc):#define WDT_WTCR_WTWKF_Msk      (1ul << WDT_WTCR_WTWKF_Pos)
NUC122.h (lib\inc):#define WDT_WTCR_WTWKE_Pos      4  
NUC122.h (lib\inc):#define WDT_WTCR_WTWKE_Msk      (1ul << WDT_WTCR_WTWKE_Pos)
NUC122.h (lib\inc):#define WDT_WTCR_WTIF_Pos       3  
NUC122.h (lib\inc):#define WDT_WTCR_WTIF_Msk       (1ul << WDT_WTCR_WTIF_Pos)
NUC122.h (lib\inc):#define WDT_WTCR_WTRF_Pos       2  
NUC122.h (lib\inc):#define WDT_WTCR_WTRF_Msk       (1ul << WDT_WTCR_WTRF_Pos)
NUC122.h (lib\inc):#define WDT_WTCR_WTRE_Pos       1  
NUC122.h (lib\inc):#define WDT_WTCR_WTRE_Msk       (1ul << WDT_WTCR_WTRE_Pos)
NUC122.h (lib\inc):#define WDT_WTCR_WTR_Pos        0  
NUC122.h (lib\inc):#define WDT_WTCR_WTR_Msk        (1ul << WDT_WTCR_WTR_Pos)
NUC122.h (lib\inc):/*------------------------- SPI Interface Controller -------------------------*/
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):    __IO uint32_t  CLKP:1;
NUC122.h (lib\inc):    __IO uint32_t  SP_CYCLE:4;
NUC122.h (lib\inc):    __I  uint32_t  RX_EMPTY:1;
NUC122.h (lib\inc):    __I  uint32_t  TX_EMPTY:1;
NUC122.h (lib\inc):} SPI_CNTRL_T;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):} SPI_DIVIDER_T;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):} SPI_SSR_T;
NUC122.h (lib\inc):typedef __I  uint32_t   SPI_RX_T;
NUC122.h (lib\inc):typedef __O  uint32_t   SPI_TX_T;
NUC122.h (lib\inc):typedef __IO uint32_t   SPI_VARCLK_T;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):            __IO uint32_t  CLKP:1;
NUC122.h (lib\inc):            __IO uint32_t  SP_CYCLE:4;
NUC122.h (lib\inc):            __I  uint32_t  RX_EMPTY:1;
NUC122.h (lib\inc):            __I  uint32_t  TX_EMPTY:1;
NUC122.h (lib\inc):} SPI_T;
NUC122.h (lib\inc):/* SPI_CNTRL Bit Field Definitions */
NUC122.h (lib\inc):#define SPI_CNTRL_TX_FULL_Pos      27
NUC122.h (lib\inc):#define SPI_CNTRL_TX_FULL_Msk      (1ul << SPI_CNTRL_TX_FULL_Pos)
NUC122.h (lib\inc):#define SPI_CNTRL_TX_EMPTY_Pos     26
NUC122.h (lib\inc):#define SPI_CNTRL_TX_EMPTY_Msk     (1ul << SPI_CNTRL_TX_EMPTY_Pos)
NUC122.h (lib\inc):#define SPI_CNTRL_RX_FULL_Pos      25
NUC122.h (lib\inc):#define SPI_CNTRL_RX_FULL_Msk      (1ul << SPI_CNTRL_RX_FULL_Pos)
NUC122.h (lib\inc):#define SPI_CNTRL_RX_EMPTY_Pos     24
NUC122.h (lib\inc):#define SPI_CNTRL_RX_EMPTY_Msk     (1ul << SPI_CNTRL_RX_EMPTY_Pos)
NUC122.h (lib\inc):#define SPI_CNTRL_VARCLK_EN_Pos    23
NUC122.h (lib\inc):#define SPI_CNTRL_VARCLK_EN_Msk    (1ul << SPI_CNTRL_VARCLK_EN_Pos)
NUC122.h (lib\inc):#define SPI_CNTRL_FIFO_Pos         21
NUC122.h (lib\inc):#define SPI_CNTRL_FIFO_Msk         (1ul << SPI_CNTRL_FIFO_Pos)
NUC122.h (lib\inc):#define SPI_CNTRL_REORDER_Pos      19
NUC122.h (lib\inc):#define SPI_CNTRL_REORDER_Msk      (3ul << SPI_CNTRL_REORDER_Pos)
NUC122.h (lib\inc):#define SPI_CNTRL_SLAVE_Pos        18
NUC122.h (lib\inc):#define SPI_CNTRL_SLAVE_Msk        (1ul << SPI_CNTRL_SLAVE_Pos)
NUC122.h (lib\inc):#define SPI_CNTRL_IE_Pos           17
NUC122.h (lib\inc):#define SPI_CNTRL_IE_Msk           (1ul << SPI_CNTRL_IE_Pos)
NUC122.h (lib\inc):#define SPI_CNTRL_IF_Pos           16
NUC122.h (lib\inc):#define SPI_CNTRL_IF_Msk           (1ul << SPI_CNTRL_IF_Pos)
NUC122.h (lib\inc):#define SPI_CNTRL_SP_CYCLE_Pos     12
NUC122.h (lib\inc):#define SPI_CNTRL_SP_CYCLE_Msk     (0xFul << SPI_CNTRL_SP_CYCLE_Pos)
NUC122.h (lib\inc):#define SPI_CNTRL_CLKP_Pos         11
NUC122.h (lib\inc):#define SPI_CNTRL_CLKP_Msk         (1ul << SPI_CNTRL_CLKP_Pos)
NUC122.h (lib\inc):#define SPI_CNTRL_LSB_Pos          10
NUC122.h (lib\inc):#define SPI_CNTRL_LSB_Msk          (1ul << SPI_CNTRL_LSB_Pos)
NUC122.h (lib\inc):#define SPI_CNTRL_TX_NUM_Pos       8
NUC122.h (lib\inc):#define SPI_CNTRL_TX_NUM_Msk       (3ul << SPI_CNTRL_TX_NUM_Pos)
NUC122.h (lib\inc):#define SPI_CNTRL_TX_BIT_LEN_Pos   3
NUC122.h (lib\inc):#define SPI_CNTRL_TX_BIT_LEN_Msk   (0x1Ful << SPI_CNTRL_TX_BIT_LEN_Pos)
NUC122.h (lib\inc):#define SPI_CNTRL_TX_NEG_Pos       2
NUC122.h (lib\inc):#define SPI_CNTRL_TX_NEG_Msk       (1ul << SPI_CNTRL_TX_NEG_Pos)
NUC122.h (lib\inc):#define SPI_CNTRL_RX_NEG_Pos       1
NUC122.h (lib\inc):#define SPI_CNTRL_RX_NEG_Msk       (1ul << SPI_CNTRL_RX_NEG_Pos)
NUC122.h (lib\inc):#define SPI_CNTRL_GO_BUSY_Pos      0
NUC122.h (lib\inc):#define SPI_CNTRL_GO_BUSY_Msk      (1ul << SPI_CNTRL_GO_BUSY_Pos)
NUC122.h (lib\inc):/* SPI_DIVIDER Bit Field Definitions */
NUC122.h (lib\inc):#define SPI_DIVIDER_DIVIDER2_Pos   16
NUC122.h (lib\inc):#define SPI_DIVIDER_DIVIDER2_Msk   (0xFFFFul << SPI_DIVIDER_DIVIDER2_Pos)
NUC122.h (lib\inc):#define SPI_DIVIDER_DIVIDER_Pos    0
NUC122.h (lib\inc):#define SPI_DIVIDER_DIVIDER_Msk    (0xFFFFul << SPI_DIVIDER_DIVIDER_Pos)
NUC122.h (lib\inc):/* SPI_SSR Bit Field Definitions */
NUC122.h (lib\inc):#define SPI_SSR_LTRIG_FLAG_Pos     5
NUC122.h (lib\inc):#define SPI_SSR_LTRIG_FLAG_Msk     (1ul << SPI_SSR_LTRIG_FLAG_Pos)
NUC122.h (lib\inc):#define SPI_SSR_SS_LTRIG_Pos       4
NUC122.h (lib\inc):#define SPI_SSR_SS_LTRIG_Msk       (1ul << SPI_SSR_SS_LTRIG_Pos)
NUC122.h (lib\inc):#define SPI_SSR_AUTOSS_Pos         3
NUC122.h (lib\inc):#define SPI_SSR_AUTOSS_Msk         (1ul << SPI_SSR_AUTOSS_Pos)
NUC122.h (lib\inc):#define SPI_SSR_SS_LVL_Pos         2
NUC122.h (lib\inc):#define SPI_SSR_SS_LVL_Msk         (1ul << SPI_SSR_SS_LVL_Pos)
NUC122.h (lib\inc):#define SPI_SSR_SSR_Pos            0
NUC122.h (lib\inc):#define SPI_SSR_SSR_Msk            (3ul << SPI_SSR_SSR_Pos)
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):typedef __IO uint32_t I2C_I2CDAT_T;
NUC122.h (lib\inc):typedef __I  uint32_t I2C_I2CSTATUS_T;
NUC122.h (lib\inc):typedef __IO uint32_t I2C_I2CLK_T;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):#define I2C_I2CON_EI_Pos                        7
NUC122.h (lib\inc):#define I2C_I2CON_EI_Msk                        (1ul << I2C_I2CON_EI_Pos)
NUC122.h (lib\inc):#define I2C_I2CON_ENS1_Pos                      6
NUC122.h (lib\inc):#define I2C_I2CON_ENS1_Msk                      (1ul << I2C_I2CON_ENS1_Pos)
NUC122.h (lib\inc):#define I2C_I2CON_STA_Pos                       5
NUC122.h (lib\inc):#define I2C_I2CON_STA_Msk                       (1ul << I2C_I2CON_STA_Pos)
NUC122.h (lib\inc):#define I2C_I2CON_STO_Pos                       4
NUC122.h (lib\inc):#define I2C_I2CON_STO_Msk                       (1ul << I2C_I2CON_STO_Pos)
NUC122.h (lib\inc):#define I2C_I2CON_SI_Pos                        3
NUC122.h (lib\inc):#define I2C_I2CON_SI_Msk                        (1ul << I2C_I2CON_SI_Pos)
NUC122.h (lib\inc):#define I2C_I2CON_AA_Pos                        2
NUC122.h (lib\inc):#define I2C_I2CON_AA_Msk                        (1ul << I2C_I2CON_AA_Pos)
NUC122.h (lib\inc):#define I2C_I2CADDR_I2CADDR_Pos                 1
NUC122.h (lib\inc):#define I2C_I2CADDR_I2CADDR_Msk                 (0x7Ful << I2C_I2CADDR_I2CADDR_Pos)
NUC122.h (lib\inc):#define I2C_I2CADDR_GC_Pos                      0
NUC122.h (lib\inc):#define I2C_I2CADDR_GC_Msk                      (1ul << I2C_I2CADDR_GC_Pos)
NUC122.h (lib\inc):#define I2C_I2CDAT_I2CDAT_Pos                   0
NUC122.h (lib\inc):#define I2C_I2CDAT_I2CDAT_Msk                   (0xFFul << I2C_I2CDAT_I2CDAT_Pos)
NUC122.h (lib\inc):#define I2C_I2CSTATUS_I2CSTATUS_Pos             0
NUC122.h (lib\inc):#define I2C_I2CSTATUS_I2CSTATUS_Msk             (0xFFul << I2C_I2CSTATUS_I2CSTATUS_Pos)
NUC122.h (lib\inc):#define I2C_I2CLK_I2CLK_Pos                     0
NUC122.h (lib\inc):#define I2C_I2CLK_I2CLK_Msk                     (0xFFul << I2C_I2CLK_I2CLK_Pos)
NUC122.h (lib\inc):#define I2C_I2CTOC_ENTI_Pos                     2
NUC122.h (lib\inc):#define I2C_I2CTOC_ENTI_Msk                     (1ul << I2C_I2CTOC_ENTI_Pos)
NUC122.h (lib\inc):#define I2C_I2CTOC_DIV4_Pos                     1
NUC122.h (lib\inc):#define I2C_I2CTOC_DIV4_Msk                     (1ul << I2C_I2CTOC_DIV4_Pos)
NUC122.h (lib\inc):#define I2C_I2CTOC_TIF_Pos                      0
NUC122.h (lib\inc):#define I2C_I2CTOC_TIF_Msk                      (1ul << I2C_I2CTOC_TIF_Pos)
NUC122.h (lib\inc):#define I2C_I2CADM_I2CADM_Pos                   1
NUC122.h (lib\inc):#define I2C_I2CADM_I2CADM_Msk                   (0x7Ful << I2C_I2CADM_I2CADM_Pos)
NUC122.h (lib\inc):typedef __IO uint32_t RTC_INIR_T;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):typedef RTC_TLR_T   RTC_TAR_T;
NUC122.h (lib\inc):typedef RTC_CLR_T   RTC_CAR_T;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):#define RTC_INIR_INIR_Pos       0  
NUC122.h (lib\inc):#define RTC_INIR_INIR_Msk       (0xFFFFFFFFul << RTC_INIR_INIR_Pos)
NUC122.h (lib\inc):#define RTC_INIR_ACTIVE_Pos     0  
NUC122.h (lib\inc):#define RTC_INIR_ACTIVE_Msk     (1ul << RTC_INIR_ACTIVE_Pos)
NUC122.h (lib\inc):#define RTC_AER_ENF_Pos         16  
NUC122.h (lib\inc):#define RTC_AER_ENF_Msk         (1ul << RTC_AER_ENF_Pos)
NUC122.h (lib\inc):#define RTC_AER_AER_Pos         0  
NUC122.h (lib\inc):#define RTC_AER_AER_Msk         (0xFFFFul << RTC_AER_AER_Pos)
NUC122.h (lib\inc):#define RTC_FCR_INTEGER_Pos     8  
NUC122.h (lib\inc):#define RTC_FCR_INTEGER_Msk     (0xFul << RTC_FCR_INTEGER_Pos)
NUC122.h (lib\inc):#define RTC_FCR_FRACTION_Pos    0  
NUC122.h (lib\inc):#define RTC_FCR_FRACTION_Msk    (0x3Ful << RTC_FCR_FRACTION_Pos)
NUC122.h (lib\inc):#define RTC_TLR_10HR_Pos        20  
NUC122.h (lib\inc):#define RTC_TLR_10HR_Msk        (0x3ul << RTC_TLR_10HR_Pos)
NUC122.h (lib\inc):#define RTC_TLR_1HR_Pos         16  
NUC122.h (lib\inc):#define RTC_TLR_1HR_Msk         (0xFul << RTC_TLR_1HR_Pos)
NUC122.h (lib\inc):#define RTC_TLR_10MIN_Pos       12  
NUC122.h (lib\inc):#define RTC_TLR_10MIN_Msk       (0x7ul << RTC_TLR_10MIN_Pos)
NUC122.h (lib\inc):#define RTC_TLR_1MIN_Pos        8  
NUC122.h (lib\inc):#define RTC_TLR_1MIN_Msk        (0xFul << RTC_TLR_1MIN_Pos)
NUC122.h (lib\inc):#define RTC_TLR_10SEC_Pos       4  
NUC122.h (lib\inc):#define RTC_TLR_10SEC_Msk       (0x7ul << RTC_TLR_10SEC_Pos)
NUC122.h (lib\inc):#define RTC_TLR_1SEC_Pos        0  
NUC122.h (lib\inc):#define RTC_TLR_1SEC_Msk        (0xFul << RTC_TLR_1SEC_Pos)
NUC122.h (lib\inc):#define RTC_CLR_10YEAR_Pos      20  
NUC122.h (lib\inc):#define RTC_CLR_10YEAR_Msk      (0xFul << RTC_CLR_10YEAR_Pos)
NUC122.h (lib\inc):#define RTC_CLR_1YEAR_Pos       16  
NUC122.h (lib\inc):#define RTC_CLR_1YEAR_Msk       (0xFul << RTC_CLR_1YEAR_Pos)
NUC122.h (lib\inc):#define RTC_CLR_10MON_Pos       12  
NUC122.h (lib\inc):#define RTC_CLR_10MON_Msk       (1ul << RTC_CLR_10MON_Pos)
NUC122.h (lib\inc):#define RTC_CLR_1MON_Pos        8  
NUC122.h (lib\inc):#define RTC_CLR_1MON_Msk        (0xFul << RTC_CLR_1MON_Pos)
NUC122.h (lib\inc):#define RTC_CLR_10DAY_Pos       4  
NUC122.h (lib\inc):#define RTC_CLR_10DAY_Msk       (0x3ul << RTC_CLR_10DAY_Pos)
NUC122.h (lib\inc):#define RTC_CLR_1DAY_Pos        0  
NUC122.h (lib\inc):#define RTC_CLR_1DAY_Msk        (0xFul << RTC_CLR_1DAY_Pos)
NUC122.h (lib\inc):#define RTC_TSSR_24H_12H_Pos    0  
NUC122.h (lib\inc):#define RTC_TSSR_24H_12H_Msk    (1ul << RTC_TSSR_24H_12H_Pos)
NUC122.h (lib\inc):#define RTC_DWR_DWR_Pos         0  
NUC122.h (lib\inc):#define RTC_DWR_DWR_Msk         (0x7ul << RTC_DWR_DWR_Pos)
NUC122.h (lib\inc):#define RTC_TAR_10HR_Pos        20  
NUC122.h (lib\inc):#define RTC_TAR_10HR_Msk        (0x3ul << RTC_TAR_10HR_Pos)
NUC122.h (lib\inc):#define RTC_TAR_1HR_Pos         16  
NUC122.h (lib\inc):#define RTC_TAR_1HR_Msk         (0xFul << RTC_TAR_1HR_Pos)
NUC122.h (lib\inc):#define RTC_TAR_10MIN_Pos       12  
NUC122.h (lib\inc):#define RTC_TAR_10MIN_Msk       (0x7ul << RTC_TAR_10MIN_Pos)
NUC122.h (lib\inc):#define RTC_TAR_1MIN_Pos        8  
NUC122.h (lib\inc):#define RTC_TAR_1MIN_Msk        (0xFul << RTC_TAR_1MIN_Pos)
NUC122.h (lib\inc):#define RTC_TAR_10SEC_Pos       4  
NUC122.h (lib\inc):#define RTC_TAR_10SEC_Msk       (0x7ul << RTC_TAR_10SEC_Pos)
NUC122.h (lib\inc):#define RTC_TAR_1SEC_Pos        0  
NUC122.h (lib\inc):#define RTC_TAR_1SEC_Msk        (0xFul << RTC_TAR_1SEC_Pos)
NUC122.h (lib\inc):#define RTC_CAR_10YEAR_Pos      20  
NUC122.h (lib\inc):#define RTC_CAR_10YEAR_Msk      (0xFul << RTC_CAR_10YEAR_Pos)
NUC122.h (lib\inc):#define RTC_CAR_1YEAR_Pos       16  
NUC122.h (lib\inc):#define RTC_CAR_1YEAR_Msk       (0xFul << RTC_CAR_1YEAR_Pos)
NUC122.h (lib\inc):#define RTC_CAR_10MON_Pos       12  
NUC122.h (lib\inc):#define RTC_CAR_10MON_Msk       (1ul << RTC_CAR_10MON_Pos)
NUC122.h (lib\inc):#define RTC_CAR_1MON_Pos        8  
NUC122.h (lib\inc):#define RTC_CAR_1MON_Msk        (0xFul << RTC_CAR_1MON_Pos)
NUC122.h (lib\inc):#define RTC_CAR_10DAY_Pos       4  
NUC122.h (lib\inc):#define RTC_CAR_10DAY_Msk       (0x3ul << RTC_CAR_10DAY_Pos)
NUC122.h (lib\inc):#define RTC_CAR_1DAY_Pos        0  
NUC122.h (lib\inc):#define RTC_CAR_1DAY_Msk        (0xFul << RTC_CAR_1DAY_Pos)
NUC122.h (lib\inc):#define RTC_LIR_LIR_Pos         0  
NUC122.h (lib\inc):#define RTC_LIR_LIR_Msk         (1ul << RTC_LIR_LIR_Pos)
NUC122.h (lib\inc):#define RTC_RIER_TIER_Pos       1  
NUC122.h (lib\inc):#define RTC_RIER_TIER_Msk       (1ul << RTC_RIER_TIER_Pos)
NUC122.h (lib\inc):#define RTC_RIER_AIER_Pos       0  
NUC122.h (lib\inc):#define RTC_RIER_AIER_Msk       (1ul << RTC_RIER_AIER_Pos)
NUC122.h (lib\inc):#define RTC_RIIR_TIF_Pos        1  
NUC122.h (lib\inc):#define RTC_RIIR_TIF_Msk        (1ul << RTC_RIIR_TIF_Pos)
NUC122.h (lib\inc):#define RTC_RIIR_AIF_Pos        0  
NUC122.h (lib\inc):#define RTC_RIIR_AIF_Msk        (1ul << RTC_RIIR_AIF_Pos)
NUC122.h (lib\inc):#define RTC_TTR_TWKE_Pos        3  
NUC122.h (lib\inc):#define RTC_TTR_TWKE_Msk        (1ul << RTC_TTR_TWKE_Pos)
NUC122.h (lib\inc):#define RTC_TTR_TTR_Pos         0  
NUC122.h (lib\inc):#define RTC_TTR_TTR_Msk         (0x7ul << RTC_TTR_TTR_Pos)
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):    __IO uint32_t  PD_WU_DLY:1;
NUC122.h (lib\inc):    __IO uint32_t  PD_WU_INT_EN:1;
NUC122.h (lib\inc):    __IO uint32_t  PD_WU_STS:1;
NUC122.h (lib\inc):    __IO uint32_t  PWR_DOWN_EN:1;
NUC122.h (lib\inc):    __IO uint32_t  PD_WAIT_CPU:1;
NUC122.h (lib\inc):} SYSCLK_PWRCON_T;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):    __IO uint32_t  ISP_EN:1;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):    __IO uint32_t  SPI0_EN:1;
NUC122.h (lib\inc):    __IO uint32_t  SPI1_EN:1;
NUC122.h (lib\inc):    __IO uint32_t  PWM01_EN:1;
NUC122.h (lib\inc):    __IO uint32_t  PWM23_EN:1;
NUC122.h (lib\inc):    __IO uint32_t  PS2_EN:1;
NUC122.h (lib\inc):} SYSCLK_APBCLK_T;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):    __I  uint32_t  PLL_STB:1;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):    __IO uint32_t  PWM01_S:2;
NUC122.h (lib\inc):    __IO uint32_t  PWM23_S:2;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):    __IO uint32_t  PD:1;
NUC122.h (lib\inc):    __IO uint32_t  BP:1;
NUC122.h (lib\inc):    __IO uint32_t  PLL_SRC:1;
NUC122.h (lib\inc):} SYSCLK_PLLCON_T;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):        __IO uint32_t u32PWRCON;
NUC122.h (lib\inc):            __IO uint32_t  PD_WU_DLY:1;
NUC122.h (lib\inc):            __IO uint32_t  PD_WU_INT_EN:1;
NUC122.h (lib\inc):            __IO uint32_t  PD_WU_STS:1;
NUC122.h (lib\inc):            __IO uint32_t  PWR_DOWN_EN:1;
NUC122.h (lib\inc):            __IO uint32_t  PD_WAIT_CPU:1;
NUC122.h (lib\inc):        } PWRCON;
NUC122.h (lib\inc):            __IO uint32_t  ISP_EN:1;
NUC122.h (lib\inc):        __IO uint32_t u32APBCLK;
NUC122.h (lib\inc):            __IO uint32_t  SPI0_EN:1;
NUC122.h (lib\inc):            __IO uint32_t  SPI1_EN:1;
NUC122.h (lib\inc):            __IO uint32_t  PWM01_EN:1;
NUC122.h (lib\inc):            __IO uint32_t  PWM23_EN:1;
NUC122.h (lib\inc):            __IO uint32_t  PS2_EN:1;
NUC122.h (lib\inc):        } APBCLK;
NUC122.h (lib\inc):            __I  uint32_t  PLL_STB:1;
NUC122.h (lib\inc):            __IO uint32_t  PWM01_S:2;
NUC122.h (lib\inc):            __IO uint32_t  PWM23_S:2;
NUC122.h (lib\inc):        __IO uint32_t u32PLLCON;
NUC122.h (lib\inc):            __IO uint32_t  PD:1;
NUC122.h (lib\inc):            __IO uint32_t  BP:1;
NUC122.h (lib\inc):            __IO uint32_t  PLL_SRC:1;
NUC122.h (lib\inc):        } PLLCON;
NUC122.h (lib\inc):/* SYSCLK PWRCON Bit Field Definitions */
NUC122.h (lib\inc):#define SYSCLK_PWRCON_PD_WAIT_CPU_Pos           8
NUC122.h (lib\inc):#define SYSCLK_PWRCON_PD_WAIT_CPU_Msk           (1ul << SYSCLK_PWRCON_PD_WAIT_CPU_Pos)
NUC122.h (lib\inc):#define SYSCLK_PWRCON_PWR_DOWN_EN_Pos           7
NUC122.h (lib\inc):#define SYSCLK_PWRCON_PWR_DOWN_EN_Msk           (1ul << SYSCLK_PWRCON_PWR_DOWN_EN_Pos)
NUC122.h (lib\inc):#define SYSCLK_PWRCON_PD_WU_STS_Pos             6
NUC122.h (lib\inc):#define SYSCLK_PWRCON_PD_WU_STS_Msk             (1ul << SYSCLK_PWRCON_PD_WU_STS_Pos)
NUC122.h (lib\inc):#define SYSCLK_PWRCON_PD_WU_INT_EN_Pos          5
NUC122.h (lib\inc):#define SYSCLK_PWRCON_PD_WU_INT_EN_Msk          (1ul << SYSCLK_PWRCON_PD_WU_INT_EN_Pos)
NUC122.h (lib\inc):#define SYSCLK_PWRCON_PD_WU_DLY_Pos             4
NUC122.h (lib\inc):#define SYSCLK_PWRCON_PD_WU_DLY_Msk             (1ul << SYSCLK_PWRCON_PD_WU_DLY_Pos)
NUC122.h (lib\inc):#define SYSCLK_PWRCON_OSC10K_EN_Pos             3
NUC122.h (lib\inc):#define SYSCLK_PWRCON_OSC10K_EN_Msk             (1ul << SYSCLK_PWRCON_OSC10K_EN_Pos)
NUC122.h (lib\inc):#define SYSCLK_PWRCON_OSC22M_EN_Pos             2
NUC122.h (lib\inc):#define SYSCLK_PWRCON_OSC22M_EN_Msk             (1ul << SYSCLK_PWRCON_OSC22M_EN_Pos)
NUC122.h (lib\inc):#define SYSCLK_PWRCON_XTL32K_EN_Pos             1
NUC122.h (lib\inc):#define SYSCLK_PWRCON_XTL32K_EN_Msk             (1ul << SYSCLK_PWRCON_XTL32K_EN_Pos)
NUC122.h (lib\inc):#define SYSCLK_PWRCON_XTL12M_EN_Pos             0
NUC122.h (lib\inc):#define SYSCLK_PWRCON_XTL12M_EN_Msk             (1ul << SYSCLK_PWRCON_XTL12M_EN_Pos)
NUC122.h (lib\inc):#define SYSCLK_AHBCLK_ISP_EN_Pos                2
NUC122.h (lib\inc):#define SYSCLK_AHBCLK_ISP_EN_Msk                (1ul << SYSCLK_AHBCLK_ISP_EN_Pos)
NUC122.h (lib\inc):/* SYSCLK APBCLK Bit Field Definitions */
NUC122.h (lib\inc):#define SYSCLK_APBCLK_PS2_EN_Pos                31
NUC122.h (lib\inc):#define SYSCLK_APBCLK_PS2_EN_Msk                (1ul << SYSCLK_APBCLK_PS2_EN_Pos)
NUC122.h (lib\inc):#define SYSCLK_APBCLK_USBD_EN_Pos               27
NUC122.h (lib\inc):#define SYSCLK_APBCLK_USBD_EN_Msk               (1ul << SYSCLK_APBCLK_USBD_EN_Pos)
NUC122.h (lib\inc):#define SYSCLK_APBCLK_PWM23_EN_Pos              21
NUC122.h (lib\inc):#define SYSCLK_APBCLK_PWM23_EN_Msk              (1ul << SYSCLK_APBCLK_PWM23_EN_Pos)
NUC122.h (lib\inc):#define SYSCLK_APBCLK_PWM01_EN_Pos              20
NUC122.h (lib\inc):#define SYSCLK_APBCLK_PWM01_EN_Msk              (1ul << SYSCLK_APBCLK_PWM01_EN_Pos)
NUC122.h (lib\inc):#define SYSCLK_APBCLK_UART1_EN_Pos              17
NUC122.h (lib\inc):#define SYSCLK_APBCLK_UART1_EN_Msk              (1ul << SYSCLK_APBCLK_UART1_EN_Pos)
NUC122.h (lib\inc):#define SYSCLK_APBCLK_UART0_EN_Pos              16
NUC122.h (lib\inc):#define SYSCLK_APBCLK_UART0_EN_Msk              (1ul << SYSCLK_APBCLK_UART0_EN_Pos)
NUC122.h (lib\inc):#define SYSCLK_APBCLK_SPI1_EN_Pos               13
NUC122.h (lib\inc):#define SYSCLK_APBCLK_SPI1_EN_Msk               (1ul << SYSCLK_APBCLK_SPI1_EN_Pos)
NUC122.h (lib\inc):#define SYSCLK_APBCLK_SPI0_EN_Pos               12
NUC122.h (lib\inc):#define SYSCLK_APBCLK_SPI0_EN_Msk               (1ul << SYSCLK_APBCLK_SPI0_EN_Pos)
NUC122.h (lib\inc):#define SYSCLK_APBCLK_I2C_EN_Pos                9
NUC122.h (lib\inc):#define SYSCLK_APBCLK_I2C_EN_Msk                (1ul << SYSCLK_APBCLK_I2C1_EN_Pos)
NUC122.h (lib\inc):#define SYSCLK_APBCLK_TMR3_EN_Pos               5
NUC122.h (lib\inc):#define SYSCLK_APBCLK_TMR3_EN_Msk               (1ul << SYSCLK_APBCLK_TMR3_EN_Pos)
NUC122.h (lib\inc):#define SYSCLK_APBCLK_TMR2_EN_Pos               4
NUC122.h (lib\inc):#define SYSCLK_APBCLK_TMR2_EN_Msk               (1ul << SYSCLK_APBCLK_TMR2_EN_Pos)
NUC122.h (lib\inc):#define SYSCLK_APBCLK_TMR1_EN_Pos               3
NUC122.h (lib\inc):#define SYSCLK_APBCLK_TMR1_EN_Msk               (1ul << SYSCLK_APBCLK_TMR1_EN_Pos)
NUC122.h (lib\inc):#define SYSCLK_APBCLK_TMR0_EN_Pos               2
NUC122.h (lib\inc):#define SYSCLK_APBCLK_TMR0_EN_Msk               (1ul << SYSCLK_APBCLK_TMR0_EN_Pos)
NUC122.h (lib\inc):#define SYSCLK_APBCLK_RTC_EN_Pos                1
NUC122.h (lib\inc):#define SYSCLK_APBCLK_RTC_EN_Msk                (1ul << SYSCLK_APBCLK_RTC_EN_Pos)
NUC122.h (lib\inc):#define SYSCLK_APBCLK_WDT_EN_Pos                0
NUC122.h (lib\inc):#define SYSCLK_APBCLK_WDT_EN_Msk                (1ul << SYSCLK_APBCLK_WDT_EN_Pos)
NUC122.h (lib\inc):#define SYSCLK_CLKSTATUS_CLK_SW_FAIL_Pos        7
NUC122.h (lib\inc):#define SYSCLK_CLKSTATUS_CLK_SW_FAIL_Msk        (1ul << SYSCLK_CLKSTATUS_CLK_SW_FAIL_Pos)
NUC122.h (lib\inc):#define SYSCLK_CLKSTATUS_OSC22M_STB_Pos         4
NUC122.h (lib\inc):#define SYSCLK_CLKSTATUS_OSC22M_STB_Msk         (1ul << SYSCLK_CLKSTATUS_OSC22M_STB_Pos)
NUC122.h (lib\inc):#define SYSCLK_CLKSTATUS_OSC10K_STB_Pos         3
NUC122.h (lib\inc):#define SYSCLK_CLKSTATUS_OSC10K_STB_Msk         (1ul << SYSCLK_CLKSTATUS_OSC10K_STB_Pos)
NUC122.h (lib\inc):#define SYSCLK_CLKSTATUS_PLL_STB_Pos            2
NUC122.h (lib\inc):#define SYSCLK_CLKSTATUS_PLL_STB_Msk            (1ul << SYSCLK_CLKSTATUS_PLL_STB_Pos)
NUC122.h (lib\inc):#define SYSCLK_CLKSTATUS_XTL32K_STB_Pos         1
NUC122.h (lib\inc):#define SYSCLK_CLKSTATUS_XTL32K_STB_Msk         (1ul << SYSCLK_CLKSTATUS_XTL32K_STB_Pos)
NUC122.h (lib\inc):#define SYSCLK_CLKSTATUS_XTL12M_STB_Pos         0
NUC122.h (lib\inc):#define SYSCLK_CLKSTATUS_XTL12M_STB_Msk         (1ul << SYSCLK_CLKSTATUS_XTL12M_STB_Pos)
NUC122.h (lib\inc):#define SYSCLK_CLKSEL0_STCLK_S_Pos              3
NUC122.h (lib\inc):#define SYSCLK_CLKSEL0_STCLK_S_Msk              (7ul << SYSCLK_CLKSEL0_STCLK_S_Pos)
NUC122.h (lib\inc):#define SYSCLK_CLKSEL0_HCLK_S_Pos               0
NUC122.h (lib\inc):#define SYSCLK_CLKSEL0_HCLK_S_Msk               (7ul << SYSCLK_CLKSEL0_HCLK_S_Pos)
NUC122.h (lib\inc):#define SYSCLK_CLKSEL1_PWM23_S_Pos              30
NUC122.h (lib\inc):#define SYSCLK_CLKSEL1_PWM23_S_Msk              (3ul << SYSCLK_CLKSEL1_PWM23_S_Pos)
NUC122.h (lib\inc):#define SYSCLK_CLKSEL1_PWM01_S_Pos              28
NUC122.h (lib\inc):#define SYSCLK_CLKSEL1_PWM01_S_Msk              (3ul << SYSCLK_CLKSEL1_PWM01_S_Pos)
NUC122.h (lib\inc):#define SYSCLK_CLKSEL1_UART_S_Pos               24
NUC122.h (lib\inc):#define SYSCLK_CLKSEL1_UART_S_Msk               (3ul << SYSCLK_CLKSEL1_UART_S_Pos)
NUC122.h (lib\inc):#define SYSCLK_CLKSEL1_TMR3_S_Pos               20
NUC122.h (lib\inc):#define SYSCLK_CLKSEL1_TMR3_S_Msk               (7ul << SYSCLK_CLKSEL1_TMR3_S_Pos)
NUC122.h (lib\inc):#define SYSCLK_CLKSEL1_TMR2_S_Pos               16
NUC122.h (lib\inc):#define SYSCLK_CLKSEL1_TMR2_S_Msk               (7ul << SYSCLK_CLKSEL1_TMR2_S_Pos)
NUC122.h (lib\inc):#define SYSCLK_CLKSEL1_TMR1_S_Pos               12
NUC122.h (lib\inc):#define SYSCLK_CLKSEL1_TMR1_S_Msk               (7ul << SYSCLK_CLKSEL1_TMR1_S_Pos)
NUC122.h (lib\inc):#define SYSCLK_CLKSEL1_TMR0_S_Pos               8
NUC122.h (lib\inc):#define SYSCLK_CLKSEL1_TMR0_S_Msk               (7ul << SYSCLK_CLKSEL1_TMR0_S_Pos)
NUC122.h (lib\inc):#define SYSCLK_CLKSEL1_WDT_S_Pos                0
NUC122.h (lib\inc):#define SYSCLK_CLKSEL1_WDT_S_Msk                (3ul << SYSCLK_CLKSEL1_WDT_S_Pos)
NUC122.h (lib\inc):#define SYSCLK_CLKDIV_UART_N_Pos                8
NUC122.h (lib\inc):#define SYSCLK_CLKDIV_UART_N_Msk                (0xFul << SYSCLK_CLKDIV_UART_N_Pos)
NUC122.h (lib\inc):#define SYSCLK_CLKDIV_USB_N_Pos                 4
NUC122.h (lib\inc):#define SYSCLK_CLKDIV_USB_N_Msk                 (0xFul << SYSCLK_CLKDIV_USB_N_Pos)
NUC122.h (lib\inc):#define SYSCLK_CLKDIV_HCLK_N_Pos                0
NUC122.h (lib\inc):#define SYSCLK_CLKDIV_HCLK_N_Msk                (0xFul << SYSCLK_CLKDIV_HCLK_N_Pos)
NUC122.h (lib\inc):/* SYSCLK PLLCON Bit Field Definitions */
NUC122.h (lib\inc):#define SYSCLK_PLLCON_PLL_SRC_Pos               19
NUC122.h (lib\inc):#define SYSCLK_PLLCON_PLL_SRC_Msk               (1ul << SYSCLK_PLLCON_PLL_SRC_Pos)
NUC122.h (lib\inc):#define SYSCLK_PLLCON_OE_Pos                    18
NUC122.h (lib\inc):#define SYSCLK_PLLCON_OE_Msk                    (1ul << SYSCLK_PLLCON_OE_Pos)
NUC122.h (lib\inc):#define SYSCLK_PLLCON_BP_Pos                    17
NUC122.h (lib\inc):#define SYSCLK_PLLCON_BP_Msk                    (1ul << SYSCLK_PLLCON_BP_Pos)
NUC122.h (lib\inc):#define SYSCLK_PLLCON_PD_Pos                    16
NUC122.h (lib\inc):#define SYSCLK_PLLCON_PD_Msk                    (1ul << SYSCLK_PLLCON_PD_Pos)
NUC122.h (lib\inc):#define SYSCLK_PLLCON_OUT_DV_Pos                14
NUC122.h (lib\inc):#define SYSCLK_PLLCON_OUT_DV_Msk                (3ul << SYSCLK_PLLCON_OUT_DV_Pos)
NUC122.h (lib\inc):#define SYSCLK_PLLCON_IN_DV_Pos                 9
NUC122.h (lib\inc):#define SYSCLK_PLLCON_IN_DV_Msk                 (0x1Ful << SYSCLK_PLLCON_IN_DV_Pos)
NUC122.h (lib\inc):#define SYSCLK_PLLCON_FB_DV_Pos                 0
NUC122.h (lib\inc):#define SYSCLK_PLLCON_FB_DV_Msk                 (0x1FFul << SYSCLK_PLLCON_FB_DV_Pos)
NUC122.h (lib\inc):typedef __I uint32_t GCR_PDID_T;  
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):    __IO uint32_t  RSTS_POR:1;
NUC122.h (lib\inc):    __IO uint32_t  RSTS_CPU:1;    
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):    __IO uint32_t  CHIP_RST:1;
NUC122.h (lib\inc):    __IO uint32_t  CPU_RST:1;
NUC122.h (lib\inc):} GCR_IPRSTC1_T;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):    __IO uint32_t  GPIO_RST:1;
NUC122.h (lib\inc):    __IO uint32_t  SPI0_RST:1;
NUC122.h (lib\inc):    __IO uint32_t  SPI1_RST:1;
NUC122.h (lib\inc):    __IO uint32_t  PWM03_RST:1;
NUC122.h (lib\inc):    __IO uint32_t  PS2_RST:1;
NUC122.h (lib\inc):} GCR_IPRSTC2_T;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):    __IO uint32_t  HPE:1;
NUC122.h (lib\inc):} GCR_CPR_T;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):    __IO uint32_t  BOD_LPM:1;
NUC122.h (lib\inc):typedef __IO uint32_t GCR_PORCR_T;  
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):    __IO uint32_t PWM0:1;
NUC122.h (lib\inc):    __IO uint32_t PWM1:1;
NUC122.h (lib\inc):    __IO uint32_t PWM2:1;
NUC122.h (lib\inc):    __IO uint32_t PWM3:1;
NUC122.h (lib\inc):} GCR_GPAMFP_T;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):    __IO uint32_t UART1_RX_SPI1_SS1:1;
NUC122.h (lib\inc):    __IO uint32_t UART1_nRTS_SPI1_CLK:1;
NUC122.h (lib\inc):    __IO uint32_t UART1_nCTS_SPI1_SS1:1;
NUC122.h (lib\inc):} GCR_GPBMFP_T;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):    __IO uint32_t SPI0_SS0:1;
NUC122.h (lib\inc):    __IO uint32_t SPI0_CLK:1;
NUC122.h (lib\inc):    __IO uint32_t SPI0_MISO0:1;
NUC122.h (lib\inc):    __IO uint32_t SPI0_MOSI0:1;
NUC122.h (lib\inc):    __IO uint32_t SPI1_SS0:1;
NUC122.h (lib\inc):    __IO uint32_t SPI1_CLK:1;
NUC122.h (lib\inc):    __IO uint32_t SPI1_MISO0:1;
NUC122.h (lib\inc):    __IO uint32_t SPI1_MOSI0:1;
NUC122.h (lib\inc):} GCR_GPCMFP_T;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):    __IO uint32_t SPI0_SS1:1;
NUC122.h (lib\inc):} GCR_GPDMFP_T;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):    __IO uint32_t  PB10_S01:1;          /* GPB10 */
NUC122.h (lib\inc):    __IO uint32_t  PB9_S11:1;           /* GPB9  */
NUC122.h (lib\inc):    __IO uint32_t  UART1_RX_SPI1_SS1:1; /* GPB4  */
NUC122.h (lib\inc):} GCR_ALTMFP_T;
NUC122.h (lib\inc):typedef __IO uint32_t GCR_REGWRPROT_T;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):        __I uint32_t u32PDID;
NUC122.h (lib\inc):        __I uint32_t PDID;
NUC122.h (lib\inc):            __IO uint32_t  RSTS_POR:1;
NUC122.h (lib\inc):            __IO uint32_t  RSTS_CPU:1;    
NUC122.h (lib\inc):        __IO uint32_t u32IPRSTC1;
NUC122.h (lib\inc):            __IO uint32_t  CHIP_RST:1;
NUC122.h (lib\inc):            __IO uint32_t  CPU_RST:1;
NUC122.h (lib\inc):        } IPRSTC1;
NUC122.h (lib\inc):        __IO uint32_t u32IPRSTC2;
NUC122.h (lib\inc):            __IO uint32_t  GPIO_RST:1;
NUC122.h (lib\inc):            __IO uint32_t  SPI0_RST:1;
NUC122.h (lib\inc):            __IO uint32_t  SPI1_RST:1;
NUC122.h (lib\inc):            __IO uint32_t  PWM03_RST:1;
NUC122.h (lib\inc):            __IO uint32_t  PS2_RST:1;
NUC122.h (lib\inc):        } IPRSTC2;
NUC122.h (lib\inc):        __IO uint32_t u32CPR;
NUC122.h (lib\inc):            __IO uint32_t  HPE:1;
NUC122.h (lib\inc):        } CPR;
NUC122.h (lib\inc):            __IO uint32_t  BOD_LPM:1;
NUC122.h (lib\inc):        __IO uint32_t u32PORCR;
NUC122.h (lib\inc):        __IO uint32_t PORCR;
NUC122.h (lib\inc):        __IO uint32_t u32GPAMFP;
NUC122.h (lib\inc):            __IO uint32_t PWM0:1;
NUC122.h (lib\inc):            __IO uint32_t PWM1:1;
NUC122.h (lib\inc):            __IO uint32_t PWM2:1;
NUC122.h (lib\inc):            __IO uint32_t PWM3:1;
NUC122.h (lib\inc):        } GPAMFP;
NUC122.h (lib\inc):        __IO uint32_t u32GPBMFP;
NUC122.h (lib\inc):            __IO uint32_t UART1_RX_SPI1_SS1:1;
NUC122.h (lib\inc):            __IO uint32_t UART1_nRTS_SPI1_CLK:1;
NUC122.h (lib\inc):            __IO uint32_t UART1_nCTS_SPI1_SS1:1;
NUC122.h (lib\inc):        } GPBMFP;
NUC122.h (lib\inc):        __IO uint32_t u32GPCMFP;
NUC122.h (lib\inc):            __IO uint32_t SPI0_SS0:1;
NUC122.h (lib\inc):            __IO uint32_t SPI0_CLK:1;
NUC122.h (lib\inc):            __IO uint32_t SPI0_MISO0:1;
NUC122.h (lib\inc):            __IO uint32_t SPI0_MOSI0:1;
NUC122.h (lib\inc):            __IO uint32_t SPI1_SS0:1;
NUC122.h (lib\inc):            __IO uint32_t SPI1_CLK:1;
NUC122.h (lib\inc):            __IO uint32_t SPI1_MISO0:1;
NUC122.h (lib\inc):            __IO uint32_t SPI1_MOSI0:1;
NUC122.h (lib\inc):        } GPCMFP;
NUC122.h (lib\inc):        __IO uint32_t u32GPDMFP;
NUC122.h (lib\inc):            __IO uint32_t SPI0_SS1:1;
NUC122.h (lib\inc):        } GPDMFP;
NUC122.h (lib\inc):        __IO uint32_t u32ALTMFP;
NUC122.h (lib\inc):            __IO uint32_t  PB10_S01:1;          /* GPB10 */
NUC122.h (lib\inc):            __IO uint32_t  PB9_S11:1;           /* GPB9  */
NUC122.h (lib\inc):            __IO uint32_t  UART1_RX_SPI1_SS1:1; /* GPB4  */
NUC122.h (lib\inc):        } ALTMFP;
NUC122.h (lib\inc):        __IO uint32_t u32REGWRPROT;
NUC122.h (lib\inc):        __IO uint32_t REGWRPROT;
NUC122.h (lib\inc):#define GCR_RSTSRC_RSTS_CPU_Pos                 7
NUC122.h (lib\inc):#define GCR_RSTSRC_RSTS_CPU_Msk                 (1ul << GCR_RSTSRC_RSTS_CPU_Pos)
NUC122.h (lib\inc):#define GCR_RSTSRC_RSTS_SYS_Pos                 5
NUC122.h (lib\inc):#define GCR_RSTSRC_RSTS_SYS_Msk                 (1ul << GCR_RSTSRC_RSTS_SYS_Pos)
NUC122.h (lib\inc):#define GCR_RSTSRC_RSTS_BOD_Pos                 4
NUC122.h (lib\inc):#define GCR_RSTSRC_RSTS_BOD_Msk                 (1ul << GCR_RSTSRC_RSTS_BOD_Pos)
NUC122.h (lib\inc):#define GCR_RSTSRC_RSTS_LVR_Pos                 3
NUC122.h (lib\inc):#define GCR_RSTSRC_RSTS_LVR_Msk                 (1ul << GCR_RSTSRC_RSTS_LVR_Pos)
NUC122.h (lib\inc):#define GCR_RSTSRC_RSTS_WDT_Pos                 2
NUC122.h (lib\inc):#define GCR_RSTSRC_RSTS_WDT_Msk                 (1ul << GCR_RSTSRC_RSTS_WDT_Pos)
NUC122.h (lib\inc):#define GCR_RSTSRC_RSTS_RESET_Pos               1
NUC122.h (lib\inc):#define GCR_RSTSRC_RSTS_RESET_Msk               (1ul << GCR_RSTSRC_RSTS_RESET_Pos)
NUC122.h (lib\inc):#define GCR_RSTSRC_RSTS_POR_Pos                 0
NUC122.h (lib\inc):#define GCR_RSTSRC_RSTS_POR_Msk                 (1ul << GCR_RSTSRC_RSTS_POR_Pos)
NUC122.h (lib\inc):/* GCR IPRSTC1 Bit Field Definitions */
NUC122.h (lib\inc):#define GCR_IPRSTC1_CPU_RST_Pos                 1
NUC122.h (lib\inc):#define GCR_IPRSTC1_CPU_RST_Msk                 (1ul << GCR_IPRSTC1_CPU_RST_Pos)
NUC122.h (lib\inc):#define GCR_IPRSTC1_CHIP_RST_Pos                0
NUC122.h (lib\inc):#define GCR_IPRSTC1_CHIP_RST_Msk                (1ul << GCR_IPRSTC1_CHIP_RST_Pos)
NUC122.h (lib\inc):/* GCR IPRSTC2 Bit Field Definitions */
NUC122.h (lib\inc):#define GCR_IPRSTC2_USBD_RST_Pos                27
NUC122.h (lib\inc):#define GCR_IPRSTC2_USBD_RST_Msk                (1ul << GCR_IPRSTC2_USBD_RST_Pos)
NUC122.h (lib\inc):#define GCR_IPRSTC2_PS2_RST_Pos                 23
NUC122.h (lib\inc):#define GCR_IPRSTC2_PS2_RST_Msk                 (1ul << GCR_IPRSTC2_PS2_RST_Pos)
NUC122.h (lib\inc):#define GCR_IPRSTC2_PWM03_RST_Pos               20
NUC122.h (lib\inc):#define GCR_IPRSTC2_PWM03_RST_Msk               (1ul << GCR_IPRSTC2_PWM03_RST_Pos)
NUC122.h (lib\inc):#define GCR_IPRSTC2_UART1_RST_Pos               17
NUC122.h (lib\inc):#define GCR_IPRSTC2_UART1_RST_Msk               (1ul << GCR_IPRSTC2_UART1_RST_Pos)
NUC122.h (lib\inc):#define GCR_IPRSTC2_UART0_RST_Pos               16
NUC122.h (lib\inc):#define GCR_IPRSTC2_UART0_RST_Msk               (1ul << GCR_IPRSTC2_UART0_RST_Pos)
NUC122.h (lib\inc):#define GCR_IPRSTC2_SPI1_RST_Pos                13
NUC122.h (lib\inc):#define GCR_IPRSTC2_SPI1_RST_Msk                (1ul << GCR_IPRSTC2_SPI1_RST_Pos)
NUC122.h (lib\inc):#define GCR_IPRSTC2_SPI0_RST_Pos                12
NUC122.h (lib\inc):#define GCR_IPRSTC2_SPI0_RST_Msk                (1ul << GCR_IPRSTC2_SPI0_RST_Pos)
NUC122.h (lib\inc):#define GCR_IPRSTC2_I2C_RST_Pos                 9
NUC122.h (lib\inc):#define GCR_IPRSTC2_I2C_RST_Msk                 (1ul << GCR_IPRSTC2_I2C1_RST_Pos)
NUC122.h (lib\inc):#define GCR_IPRSTC2_TMR3_RST_Pos                5
NUC122.h (lib\inc):#define GCR_IPRSTC2_TMR3_RST_Msk                (1ul << GCR_IPRSTC2_TMR3_RST_Pos)
NUC122.h (lib\inc):#define GCR_IPRSTC2_TMR2_RST_Pos                4
NUC122.h (lib\inc):#define GCR_IPRSTC2_TMR2_RST_Msk                (1ul << GCR_IPRSTC2_TMR2_RST_Pos)
NUC122.h (lib\inc):#define GCR_IPRSTC2_TMR1_RST_Pos                3
NUC122.h (lib\inc):#define GCR_IPRSTC2_TMR1_RST_Msk                (1ul << GCR_IPRSTC2_TMR1_RST_Pos)
NUC122.h (lib\inc):#define GCR_IPRSTC2_TMR0_RST_Pos                2
NUC122.h (lib\inc):#define GCR_IPRSTC2_TMR0_RST_Msk                (1ul << GCR_IPRSTC2_TMR0_RST_Pos)
NUC122.h (lib\inc):#define GCR_IPRSTC2_GPIO_RST_Pos                1
NUC122.h (lib\inc):#define GCR_IPRSTC2_GPIO_RST_Msk                (1ul << GCR_IPRSTC2_GPIO_RST_Pos)
NUC122.h (lib\inc):/* GCR CPR Bit Field Definitions */
NUC122.h (lib\inc):#define GCR_CPR_HPE_Pos                         0
NUC122.h (lib\inc):#define GCR_CPR_HPE_Msk                         (1ul << GCR_CPR_HPE_Pos)
NUC122.h (lib\inc):#define GCR_BODCR_LVR_EN_Pos                    7
NUC122.h (lib\inc):#define GCR_BODCR_LVR_EN_Msk                    (1ul << GCR_BODCR_LVR_EN_Pos)
NUC122.h (lib\inc):#define GCR_BODCR_BOD_OUT_Pos                   6
NUC122.h (lib\inc):#define GCR_BODCR_BOD_OUT_Msk                   (1ul << GCR_BODCR_BOD_OUT_Pos)
NUC122.h (lib\inc):#define GCR_BODCR_BOD_LPM_Pos                   5
NUC122.h (lib\inc):#define GCR_BODCR_BOD_LPM_Msk                   (1ul << GCR_BODCR_BOD_LPM_Pos)
NUC122.h (lib\inc):#define GCR_BODCR_BOD_INTF_Pos                  4
NUC122.h (lib\inc):#define GCR_BODCR_BOD_INTF_Msk                  (1ul << GCR_BODCR_BOD_INTF_Pos)
NUC122.h (lib\inc):#define GCR_BODCR_BOD_RSTEN_Pos                 3
NUC122.h (lib\inc):#define GCR_BODCR_BOD_RSTEN_Msk                 (1ul << GCR_BODCR_BOD_RSTEN_Pos)
NUC122.h (lib\inc):#define GCR_BODCR_BOD_VL_Pos                    1
NUC122.h (lib\inc):#define GCR_BODCR_BOD_VL_Msk                    (3ul << GCR_BODCR_BOD_VL_Pos)
NUC122.h (lib\inc):#define GCR_BODCR_BOD_EN_Pos                    0
NUC122.h (lib\inc):#define GCR_BODCR_BOD_EN_Msk                    (1ul << GCR_BODCR_BOD_EN_Pos)
NUC122.h (lib\inc):/* GCR TEMPCR Bit Field Definitions */
NUC122.h (lib\inc):#define GCR_TEMPCR_VTEMP_EN_Pos                 0
NUC122.h (lib\inc):#define GCR_TEMPCR_VTEMP_EN_Msk                 (1ul << GCR_TEMPCR_VTEMP_EN_Pos)
NUC122.h (lib\inc):/* GCR PORCR Bit Field Definitions */
NUC122.h (lib\inc):#define GCR_PORCR_POR_DIS_CODE_Pos              0
NUC122.h (lib\inc):#define GCR_PORCR_POR_DIS_CODE_Msk              (0xFFFFul << GCR_PORCR_POR_DIS_CODE_Pos)
NUC122.h (lib\inc):/* GCR GPAMFP Bit Field Definitions */
NUC122.h (lib\inc):#define GCR_GPAMFP_GPA_TYPE_Pos                 16
NUC122.h (lib\inc):#define GCR_GPAMFP_GPA_TYPE_Msk                 (0xFFFFul << GCR_GPAMFP_GPA_TYPE_Pos)
NUC122.h (lib\inc):#define GCR_GPAMFP_GPA_MFP_Pos                  0
NUC122.h (lib\inc):#define GCR_GPAMFP_GPA_MFP_Msk                  (0xFFFFul << GCR_GPAMFP_GPA_MFP_Pos)
NUC122.h (lib\inc):/* GCR GPBMFP Bit Field Definitions */
NUC122.h (lib\inc):#define GCR_GPBMFP_GPB_TYPE_Pos                 16
NUC122.h (lib\inc):#define GCR_GPBMFP_GPB_TYPE_Msk                 (0xFFFFul << GCR_GPBMFP_GPB_TYPE_Pos)
NUC122.h (lib\inc):#define GCR_GPBMFP_GPB_MFP_Pos                  0
NUC122.h (lib\inc):#define GCR_GPBMFP_GPB_MFP_Msk                  (0xFFFFul << GCR_GPBMFP_GPB_MFP_Pos)
NUC122.h (lib\inc):/* GCR GPCMFP Bit Field Definitions */
NUC122.h (lib\inc):#define GCR_GPCMFP_GPC_TYPE_Pos                 16
NUC122.h (lib\inc):#define GCR_GPCMFP_GPC_TYPE_Msk                 (0xFFFFul << GCR_GPCMFP_GPC_TYPE_Pos)
NUC122.h (lib\inc):#define GCR_GPCMFP_GPC_MFP_Pos                  0
NUC122.h (lib\inc):#define GCR_GPCMFP_GPC_MFP_Msk                  (0xFFFFul << GCR_GPCMFP_GPC_MFP_Pos)
NUC122.h (lib\inc):/* GCR GPDMFP Bit Field Definitions */
NUC122.h (lib\inc):#define GCR_GPDMFP_GPD_TYPE_Pos                 16
NUC122.h (lib\inc):#define GCR_GPDMFP_GPD_TYPE_Msk                 (0xFFFFul << GCR_GPDMFP_GPD_TYPE_Pos)
NUC122.h (lib\inc):#define GCR_GPDMFP_GPD_MFP_Pos                  0
NUC122.h (lib\inc):#define GCR_GPDMFP_GPD_MFP_Msk                  (0xFFFFul << GCR_GPDMFP_GPD_MFP_Pos)
NUC122.h (lib\inc):/* GCR ALTMFP Bit Field Definitions */
NUC122.h (lib\inc):#define GCR_ALTMFP_PB4_S11_Pos                  15
NUC122.h (lib\inc):#define GCR_ALTMFP_PB4_S11_Msk                  (1ul << GCR_ALTMFP_PB4_S11_Pos)
NUC122.h (lib\inc):#define GCR_ALTMFP_PB9_S11_Pos                  1
NUC122.h (lib\inc):#define GCR_ALTMFP_PB9_S11_Msk                  (1ul << GCR_ALTMFP_PB9_S11_Pos)
NUC122.h (lib\inc):#define GCR_ALTMFP_PB10_S01_Pos                 0
NUC122.h (lib\inc):#define GCR_ALTMFP_PB10_S01_Msk                 (1ul << GCR_ALTMFP_PB10_S01_Pos)
NUC122.h (lib\inc):/* GCR REGWRPROT Bit Field Definitions */
NUC122.h (lib\inc):#define GCR_REGWRPROT_REGWRPROT_Pos             0
NUC122.h (lib\inc):#define GCR_REGWRPROT_REGWRPROT_Msk             (0xFFul << GCR_REGWRPROT_REGWRPROT_Pos)
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):typedef __IO uint32_t GCR_MCUIRQ_T;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):#define GCR_IRQSRC_INT_SRC_Pos                  0
NUC122.h (lib\inc):#define GCR_IRQSRC_INT_SRC_Msk                  (0xFul << GCR_IRQSRC_INT_SRC_Pos)
NUC122.h (lib\inc):#define GCR_NMISEL_INT_TEST_Pos                 7
NUC122.h (lib\inc):#define GCR_NMISEL_INT_TEST_Msk                 (1ul << GCR_NMISEL_INT_TEST_Pos)
NUC122.h (lib\inc):#define GCR_NMISEL_NMISEL_Pos                   0
NUC122.h (lib\inc):#define GCR_NMISEL_NMISEL_Msk                   (0x1Ful << GCR_NMISEL_NMISEL_Pos)
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):    __IO uint32_t  ISPEN:1;
NUC122.h (lib\inc):    __IO uint32_t  ISPFF:1;
NUC122.h (lib\inc):    __IO uint32_t  PT:3;
NUC122.h (lib\inc):} FMC_ISPCON_T;
NUC122.h (lib\inc):typedef __IO uint32_t FMC_ISPADR_T;
NUC122.h (lib\inc):typedef __IO uint32_t FMC_ISPDAT_T;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):} FMC_ISPCMD_T;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):    __IO uint32_t  ISPGO:1;
NUC122.h (lib\inc):} FMC_ISPTRG_T;
NUC122.h (lib\inc):typedef __I uint32_t FMC_DFBADR_T;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):        __IO uint32_t u32ISPCON;
NUC122.h (lib\inc):            __IO uint32_t  ISPEN:1;
NUC122.h (lib\inc):            __IO uint32_t  ISPFF:1;
NUC122.h (lib\inc):            __IO uint32_t  PT:3;
NUC122.h (lib\inc):        } ISPCON;
NUC122.h (lib\inc):        __IO uint32_t u32ISPADR;
NUC122.h (lib\inc):        __IO uint32_t ISPADR;
NUC122.h (lib\inc):        __IO uint32_t u32ISPDAT;
NUC122.h (lib\inc):        __IO uint32_t ISPDAT;
NUC122.h (lib\inc):        __IO uint32_t u32ISPCMD;
NUC122.h (lib\inc):        } ISPCMD;
NUC122.h (lib\inc):        __IO uint32_t u32ISPTRG;
NUC122.h (lib\inc):            __IO uint32_t  ISPGO:1;
NUC122.h (lib\inc):        } ISPTRG;
NUC122.h (lib\inc):/* FMC ISPCON Bit Field Definitions */
NUC122.h (lib\inc):#define FMC_ISPCON_ET_Pos                       12
NUC122.h (lib\inc):#define FMC_ISPCON_ET_Msk                       (7ul << FMC_ISPCON_ET_Pos)
NUC122.h (lib\inc):#define FMC_ISPCON_PT_Pos                       8
NUC122.h (lib\inc):#define FMC_ISPCON_PT_Msk                       (7ul << FMC_ISPCON_PT_Pos)
NUC122.h (lib\inc):#define FMC_ISPCON_ISPFF_Pos                    6
NUC122.h (lib\inc):#define FMC_ISPCON_ISPFF_Msk                    (1ul << FMC_ISPCON_ISPFF_Pos)
NUC122.h (lib\inc):#define FMC_ISPCON_LDUEN_Pos                    5
NUC122.h (lib\inc):#define FMC_ISPCON_LDUEN_Msk                    (1ul << FMC_ISPCON_LDUEN_Pos)
NUC122.h (lib\inc):#define FMC_ISPCON_CFGUEN_Pos                   4
NUC122.h (lib\inc):#define FMC_ISPCON_CFGUEN_Msk                   (1ul << FMC_ISPCON_CFGUEN_Pos)
NUC122.h (lib\inc):#define FMC_ISPCON_BS_Pos                       1
NUC122.h (lib\inc):#define FMC_ISPCON_BS_Msk                       (1ul << FMC_ISPCON_BS_Pos)
NUC122.h (lib\inc):#define FMC_ISPCON_ISPEN_Pos                    0
NUC122.h (lib\inc):#define FMC_ISPCON_ISPEN_Msk                    (1ul << FMC_ISPCON_ISPEN_Pos)
NUC122.h (lib\inc):/* FMC ISPADR Bit Field Definitions */
NUC122.h (lib\inc):#define FMC_ISPADR_ISPADR_Pos                   0
NUC122.h (lib\inc):#define FMC_ISPADR_ISPADR_Msk                   (0xFFFFFFFFul << FMC_ISPADR_ISPADR_Pos)
NUC122.h (lib\inc):/* FMC ISPADR Bit Field Definitions */
NUC122.h (lib\inc):#define FMC_ISPDAT_ISPDAT_Pos                   0
NUC122.h (lib\inc):#define FMC_ISPDAT_ISPDAT_Msk                   (0xFFFFFFFFul << FMC_ISPDAT_ISPDAT_Pos)
NUC122.h (lib\inc):/* FMC ISPCMD Bit Field Definitions */
NUC122.h (lib\inc):#define FMC_ISPCMD_FOEN_Pos                     5
NUC122.h (lib\inc):#define FMC_ISPCMD_FOEN_Msk                     (1ul << FMC_ISPCMD_FOEN_Pos)
NUC122.h (lib\inc):#define FMC_ISPCMD_FCEN_Pos                     4
NUC122.h (lib\inc):#define FMC_ISPCMD_FCEN_Msk                     (1ul << FMC_ISPCMD_FCEN_Pos)
NUC122.h (lib\inc):#define FMC_ISPCMD_FCTRL_Pos                    0
NUC122.h (lib\inc):#define FMC_ISPCMD_FCTRL_Msk                    (0xFul << FMC_ISPCMD_FCTRL_Pos)
NUC122.h (lib\inc):/* FMC ISPTRG Bit Field Definitions */
NUC122.h (lib\inc):#define FMC_ISPTRG_ISPGO_Pos                    0
NUC122.h (lib\inc):#define FMC_ISPTRG_ISPGO_Msk                    (1ul << FMC_ISPTRG_ISPGO_Pos)
NUC122.h (lib\inc):#define FMC_DFBADR_DFBA_Pos                     0
NUC122.h (lib\inc):#define FMC_DFBADR_DFBA_Msk                     (0xFFFFFFFFul << FMC_DFBADR_DFBA_Pos)
NUC122.h (lib\inc):#define FMC_FATCON_MFOM_Pos                     6
NUC122.h (lib\inc):#define FMC_FATCON_MFOM_Msk                     (1ul << FMC_FATCON_MFOM_Pos)
NUC122.h (lib\inc):#define FMC_FATCON_LFOM_Pos                     4
NUC122.h (lib\inc):#define FMC_FATCON_LFOM_Msk                     (1ul << FMC_FATCON_LFOM_Pos)
NUC122.h (lib\inc):/*------------------------ PS2 Device Interface Controller -------------------*/
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):    __IO uint32_t  PS2EN:1;
NUC122.h (lib\inc):    __IO uint32_t  TXFIFO_DEPTH:4;
NUC122.h (lib\inc):    __IO uint32_t  FPS2CLK:1;
NUC122.h (lib\inc):    __IO uint32_t  FPS2DAT:1;
NUC122.h (lib\inc):} PS2_CON_T;
NUC122.h (lib\inc):typedef __IO uint32_t PS2_DATA_T;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):    __IO uint32_t  PS2CLK:1;
NUC122.h (lib\inc):    __IO uint32_t  PS2DATA:1;
NUC122.h (lib\inc):    __IO uint32_t  RXPARTY:1;
NUC122.h (lib\inc):    __IO uint32_t  TXEMPTY:1;
NUC122.h (lib\inc):} PS2_STATUS_T;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):} PS2_INTID_T;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):        __IO uint32_t u32PS2CON;
NUC122.h (lib\inc):            __IO uint32_t  PS2EN:1;
NUC122.h (lib\inc):            __IO uint32_t  TXFIFO_DEPTH:4;
NUC122.h (lib\inc):            __IO uint32_t  FPS2CLK:1;
NUC122.h (lib\inc):            __IO uint32_t  FPS2DAT:1;
NUC122.h (lib\inc):        } PS2CON;
NUC122.h (lib\inc):            __IO uint32_t  PS2CLK:1;
NUC122.h (lib\inc):            __IO uint32_t  PS2DATA:1;
NUC122.h (lib\inc):            __IO uint32_t  RXPARTY:1;
NUC122.h (lib\inc):            __IO uint32_t  TXEMPTY:1;
NUC122.h (lib\inc):} PS2_T;
NUC122.h (lib\inc):/* PS/2 PS2CON Bit Field Definitions */
NUC122.h (lib\inc):#define PS2_PS2CON_PS2EN_Pos                       0
NUC122.h (lib\inc):#define PS2_PS2CON_PS2EN_Msk                       (1ul << PS2_PS2CON_PS2EN_Pos)  
NUC122.h (lib\inc):#define PS2_PS2CON_TXINTEN_Pos                     1
NUC122.h (lib\inc):#define PS2_PS2CON_TXINTEN_Msk                     (1ul << PS2_PS2CON_TXINTEN_Pos) 
NUC122.h (lib\inc):#define PS2_PS2CON_RXINTEN_Pos                     2
NUC122.h (lib\inc):#define PS2_PS2CON_RXINTEN_Msk                     (1ul << PS2_PS2CON_RXINTEN_Pos)  
NUC122.h (lib\inc):#define PS2_PS2CON_TXFIFO_DEPTH_Pos                3
NUC122.h (lib\inc):#define PS2_PS2CON_TXFIFO_DEPTH_Msk                (0xFul << PS2_PS2CON_TXFIFO_DEPTH_Pos)
NUC122.h (lib\inc):#define PS2_PS2CON_ACK_Pos                         7
NUC122.h (lib\inc):#define PS2_PS2CON_ACK_Msk                         (1ul << PS2_PS2CON_ACK_Pos) 
NUC122.h (lib\inc):#define PS2_PS2CON_CLRFIFO_Pos                     8
NUC122.h (lib\inc):#define PS2_PS2CON_CLRFIFO_Msk                     (1ul << PS2_PS2CON_CLRFIFO_Pos)  
NUC122.h (lib\inc):#define PS2_PS2CON_OVERRIDE_Pos                    9
NUC122.h (lib\inc):#define PS2_PS2CON_OVERRIDE_Msk                    (1ul << PS2_PS2CON_OVERRIDE_Pos)  
NUC122.h (lib\inc):#define PS2_PS2CON_FPS2CLK_Pos                     10
NUC122.h (lib\inc):#define PS2_PS2CON_FPS2CLK_Msk                     (1ul << PS2_PS2CON_FPS2CLK_Pos) 
NUC122.h (lib\inc):#define PS2_PS2CON_FPS2DAT_Pos                     11
NUC122.h (lib\inc):#define PS2_PS2CON_FPS2DAT_Msk                     (1ul << PS2_PS2CON_FPS2DAT_Pos) 
NUC122.h (lib\inc):/* PS/2 PS2RXDATA Bit Field Definitions */
NUC122.h (lib\inc):#define PS2_PS2RXDATA_RXDATA_Pos                   0
NUC122.h (lib\inc):#define PS2_PS2RXDATA_RXDATA_Msk                   (0xFFul << PS2_PS2RXDATA_RXDATA_Pos)
NUC122.h (lib\inc):/* PS/2 PS2STATUS Bit Field Definitions */
NUC122.h (lib\inc):#define PS2_PS2STATUS_PS2CLK_Pos                   0
NUC122.h (lib\inc):#define PS2_PS2STATUS_PS2CLK_Msk                   (1ul << PS2_PS2STATUS_PS2CLK_Pos) 
NUC122.h (lib\inc):#define PS2_PS2STATUS_PS2DATA_Pos                  1
NUC122.h (lib\inc):#define PS2_PS2STATUS_PS2DATA_Msk                  (1ul << PS2_PS2STATUS_PS2DATA_Pos) 
NUC122.h (lib\inc):#define PS2_PS2STATUS_FRAMERR_Pos                  2
NUC122.h (lib\inc):#define PS2_PS2STATUS_FRAMERR_Msk                  (1ul << PS2_PS2STATUS_FRAMERR_Pos) 
NUC122.h (lib\inc):#define PS2_PS2STATUS_RXPARITY_Pos                 3
NUC122.h (lib\inc):#define PS2_PS2STATUS_RXPARITY_Msk                 (1ul << PS2_PS2STATUS_RXPARITY_Pos) 
NUC122.h (lib\inc):#define PS2_PS2STATUS_RXPARITY_Pos                 3
NUC122.h (lib\inc):#define PS2_PS2STATUS_RXPARITY_Msk                 (1ul << PS2_PS2STATUS_RXPARITY_Pos)
NUC122.h (lib\inc):#define PS2_PS2STATUS_RXBUSY_Pos                   4
NUC122.h (lib\inc):#define PS2_PS2STATUS_RXBUSY_Msk                   (1ul << PS2_PS2STATUS_RXBUSY_Pos)
NUC122.h (lib\inc):#define PS2_PS2STATUS_TXBUSY_Pos                   5
NUC122.h (lib\inc):#define PS2_PS2STATUS_TXBUSY_Msk                   (1ul << PS2_PS2STATUS_TXBUSY_Pos)
NUC122.h (lib\inc):#define PS2_PS2STATUS_RXOVF_Pos                    6
NUC122.h (lib\inc):#define PS2_PS2STATUS_RXOVF_Msk                    (1ul << PS2_PS2STATUS_RXOVF_Pos)
NUC122.h (lib\inc):#define PS2_PS2STATUS_TXEMPTY_Pos                  7
NUC122.h (lib\inc):#define PS2_PS2STATUS_TXEMPTY_Msk                  (1ul << PS2_PS2STATUS_TXEMPTY_Pos)
NUC122.h (lib\inc):#define PS2_PS2STATUS_BYTEIDX_Pos                  8
NUC122.h (lib\inc):#define PS2_PS2STATUS_BYTEIDX_Msk                  (0xFul << PS2_PS2STATUS_BYTEIDX_Pos)
NUC122.h (lib\inc):/* PS/2 PS2INTID Bit Field Definitions */
NUC122.h (lib\inc):#define PS2_PS2INTID_RXINT_Pos                     0
NUC122.h (lib\inc):#define PS2_PS2INTID_RXINT_Msk                     (1ul << PS2_PS2INTID_RXINT_Pos) 
NUC122.h (lib\inc):#define PS2_PS2INTID_TXINT_Pos                     1
NUC122.h (lib\inc):#define PS2_PS2INTID_TXINT_Msk                     (1ul << PS2_PS2INTID_TXINT_Pos) 
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):    __IO uint32_t  WAKEUP_IE:1;
NUC122.h (lib\inc):    __IO uint32_t  WAKEUP_EN:1;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):    __IO uint32_t  WAKEUP_STS:1;
NUC122.h (lib\inc):    __IO uint32_t  EPEVT:6;
NUC122.h (lib\inc):    __IO uint32_t  SETUP:1;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):    __I  uint32_t  EPSTS0:3;
NUC122.h (lib\inc):    __I  uint32_t  EPSTS1:3;
NUC122.h (lib\inc):    __I  uint32_t  EPSTS2:3;
NUC122.h (lib\inc):    __I  uint32_t  EPSTS3:3;
NUC122.h (lib\inc):    __I  uint32_t  EPSTS4:3;
NUC122.h (lib\inc):    __I  uint32_t  EPSTS5:3;
NUC122.h (lib\inc):} USBD_EPSTS_T;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):    __I  uint32_t  SUSPEND:1;
NUC122.h (lib\inc):    __IO uint32_t  PHY_EN:1;
NUC122.h (lib\inc):    __IO uint32_t  RWAKEUP:1;
NUC122.h (lib\inc):    __IO uint32_t  DPPU_EN:1;
NUC122.h (lib\inc):    __IO uint32_t  PWRDN:1;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):    __IO uint32_t  MXPLD:9;
NUC122.h (lib\inc):} USBD_MXPLD_T;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):    __IO uint32_t  EP_NUM:4;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):} USBD_CFGP_T;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):        __IO uint32_t u32MXPLD;
NUC122.h (lib\inc):            __IO uint32_t  MXPLD:9;
NUC122.h (lib\inc):        } MXPLD;
NUC122.h (lib\inc):            __IO uint32_t  EP_NUM:4;
NUC122.h (lib\inc):        __IO uint32_t u32CFGP;
NUC122.h (lib\inc):        } CFGP;
NUC122.h (lib\inc):} USBD_EP_T;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):            __IO uint32_t  WAKEUP_IE:1;
NUC122.h (lib\inc):            __IO uint32_t  WAKEUP_EN:1;
NUC122.h (lib\inc):            __IO uint32_t  WAKEUP_STS:1;
NUC122.h (lib\inc):            __IO uint32_t  EPEVT:6;
NUC122.h (lib\inc):            __IO uint32_t  SETUP:1;
NUC122.h (lib\inc):        __IO uint32_t u32EPSTS;
NUC122.h (lib\inc):            __I  uint32_t  EPSTS0:3;
NUC122.h (lib\inc):            __I  uint32_t  EPSTS1:3;
NUC122.h (lib\inc):            __I  uint32_t  EPSTS2:3;
NUC122.h (lib\inc):            __I  uint32_t  EPSTS3:3;
NUC122.h (lib\inc):            __I  uint32_t  EPSTS4:3;
NUC122.h (lib\inc):            __I  uint32_t  EPSTS5:3;
NUC122.h (lib\inc):        } EPSTS;
NUC122.h (lib\inc):            __I  uint32_t  SUSPEND:1;
NUC122.h (lib\inc):            __IO uint32_t  PHY_EN:1;
NUC122.h (lib\inc):            __IO uint32_t  RWAKEUP:1;
NUC122.h (lib\inc):            __IO uint32_t  DPPU_EN:1;
NUC122.h (lib\inc):            __IO uint32_t  PWRDN:1;
NUC122.h (lib\inc):    USBD_EP_T EP[6];
NUC122.h (lib\inc):#define USBD_INTEN_INNAK_EN_Pos    15
NUC122.h (lib\inc):#define USBD_INTEN_INNAK_EN_Msk    (1ul << USBD_INTEN_INNAK_EN_Pos)
NUC122.h (lib\inc):#define USBD_INTEN_WAKEUP_EN_Pos   8
NUC122.h (lib\inc):#define USBD_INTEN_WAKEUP_EN_Msk   (1ul << USBD_INTEN_WAKEUP_EN_Pos)
NUC122.h (lib\inc):#define USBD_INTEN_WAKEUP_IE_Pos   3
NUC122.h (lib\inc):#define USBD_INTEN_WAKEUP_IE_Msk   (1ul << USBD_INTEN_WAKEUP_IE_Pos)
NUC122.h (lib\inc):#define USBD_INTEN_FLDET_IE_Pos    2
NUC122.h (lib\inc):#define USBD_INTEN_FLDET_IE_Msk    (1ul << USBD_INTEN_FLDET_IE_Pos)
NUC122.h (lib\inc):#define USBD_INTEN_USB_IE_Pos      1
NUC122.h (lib\inc):#define USBD_INTEN_USB_IE_Msk      (1ul << USBD_INTEN_USB_IE_Pos)
NUC122.h (lib\inc):#define USBD_INTEN_BUS_IE_Pos      0
NUC122.h (lib\inc):#define USBD_INTEN_BUS_IE_Msk      (1ul << USBD_INTEN_BUS_IE_Pos)
NUC122.h (lib\inc):#define USBD_INTSTS_SETUP_Pos        31
NUC122.h (lib\inc):#define USBD_INTSTS_SETUP_Msk        (1ul << USBD_INTSTS_SETUP_Pos)
NUC122.h (lib\inc):#define USBD_INTSTS_EPEVT_Pos        16
NUC122.h (lib\inc):#define USBD_INTSTS_EPEVT_Msk        (0x3Ful << USBD_INTSTS_EPEVT_Pos)
NUC122.h (lib\inc):#define USBD_INTSTS_WAKEUP_STS_Pos   3
NUC122.h (lib\inc):#define USBD_INTSTS_WAKEUP_STS_Msk   (1ul << USBD_INTSTS_WAKEUP_STS_Pos)
NUC122.h (lib\inc):#define USBD_INTSTS_FLDET_STS_Pos    2
NUC122.h (lib\inc):#define USBD_INTSTS_FLDET_STS_Msk    (1ul << USBD_INTSTS_FLDET_STS_Pos)
NUC122.h (lib\inc):#define USBD_INTSTS_USB_STS_Pos      1
NUC122.h (lib\inc):#define USBD_INTSTS_USB_STS_Msk      (1ul << USBD_INTSTS_USB_STS_Pos)
NUC122.h (lib\inc):#define USBD_INTSTS_BUS_STS_Pos      0
NUC122.h (lib\inc):#define USBD_INTSTS_BUS_STS_Msk      (1ul << USBD_INTSTS_BUS_STS_Pos)
NUC122.h (lib\inc):#define USBD_FADDR_FADDR_Pos     0
NUC122.h (lib\inc):#define USBD_FADDR_FADDR_Msk     (0x7Ful << USBD_FADDR_FADDR_Pos)
NUC122.h (lib\inc):/* USBD EPSTS Bit Field Definitions */
NUC122.h (lib\inc):#define USBD_EPSTS_EPSTS5_Pos    23
NUC122.h (lib\inc):#define USBD_EPSTS_EPSTS5_Msk    (7ul << USBD_EPSTS_EPSTS5_Pos)
NUC122.h (lib\inc):#define USBD_EPSTS_EPSTS4_Pos    20
NUC122.h (lib\inc):#define USBD_EPSTS_EPSTS4_Msk    (7ul << USBD_EPSTS_EPSTS4_Pos)
NUC122.h (lib\inc):#define USBD_EPSTS_EPSTS3_Pos    17
NUC122.h (lib\inc):#define USBD_EPSTS_EPSTS3_Msk    (7ul << USBD_EPSTS_EPSTS3_Pos)
NUC122.h (lib\inc):#define USBD_EPSTS_EPSTS2_Pos    14
NUC122.h (lib\inc):#define USBD_EPSTS_EPSTS2_Msk    (7ul << USBD_EPSTS_EPSTS2_Pos)
NUC122.h (lib\inc):#define USBD_EPSTS_EPSTS1_Pos    11
NUC122.h (lib\inc):#define USBD_EPSTS_EPSTS1_Msk    (7ul << USBD_EPSTS_EPSTS1_Pos)
NUC122.h (lib\inc):#define USBD_EPSTS_EPSTS0_Pos    8
NUC122.h (lib\inc):#define USBD_EPSTS_EPSTS0_Msk    (7ul << USBD_EPSTS_EPSTS0_Pos)
NUC122.h (lib\inc):#define USBD_EPSTS_OVERRUN_Pos   7
NUC122.h (lib\inc):#define USBD_EPSTS_OVERRUN_Msk   (1ul << USBD_EPSTS_OVERRUN_Pos)
NUC122.h (lib\inc):#define USBD_ATTR_PWRDN_Pos      9
NUC122.h (lib\inc):#define USBD_ATTR_PWRDN_Msk      (1ul << USBD_ATTR_PWRDN_Pos)
NUC122.h (lib\inc):#define USBD_ATTR_DPPU_EN_Pos    8
NUC122.h (lib\inc):#define USBD_ATTR_DPPU_EN_Msk    (1ul << USBD_ATTR_DPPU_EN_Pos)
NUC122.h (lib\inc):#define USBD_ATTR_USB_EN_Pos     7
NUC122.h (lib\inc):#define USBD_ATTR_USB_EN_Msk     (1ul << USBD_ATTR_USB_EN_Pos)
NUC122.h (lib\inc):#define USBD_ATTR_RWAKEUP_Pos    5
NUC122.h (lib\inc):#define USBD_ATTR_RWAKEUP_Msk    (1ul << USBD_ATTR_RWAKEUP_Pos)
NUC122.h (lib\inc):#define USBD_ATTR_PHY_EN_Pos     4
NUC122.h (lib\inc):#define USBD_ATTR_PHY_EN_Msk     (1ul << USBD_ATTR_PHY_EN_Pos)
NUC122.h (lib\inc):#define USBD_ATTR_TIMEOUT_Pos    3
NUC122.h (lib\inc):#define USBD_ATTR_TIMEOUT_Msk    (1ul << USBD_ATTR_TIMEOUT_Pos)
NUC122.h (lib\inc):#define USBD_ATTR_RESUME_Pos     2
NUC122.h (lib\inc):#define USBD_ATTR_RESUME_Msk     (1ul << USBD_ATTR_RESUME_Pos)
NUC122.h (lib\inc):#define USBD_ATTR_SUSPEND_Pos    1
NUC122.h (lib\inc):#define USBD_ATTR_SUSPEND_Msk    (1ul << USBD_ATTR_SUSPEND_Pos)
NUC122.h (lib\inc):#define USBD_ATTR_USBRST_Pos     0
NUC122.h (lib\inc):#define USBD_ATTR_USBRST_Msk     (1ul << USBD_ATTR_USBRST_Pos)
NUC122.h (lib\inc):#define USBD_FLDET_FLDET_Pos     0
NUC122.h (lib\inc):#define USBD_FLDET_FLDET_Msk     (1ul << USBD_FLDET_FLDET_Pos)
NUC122.h (lib\inc):#define USBD_STBUFSEG_STBUFSEG_Pos   3
NUC122.h (lib\inc):#define USBD_STBUFSEG_STBUFSEG_Msk   (0x3Ful << USBD_STBUFSEG_STBUFSEG_Pos)
NUC122.h (lib\inc):#define USBD_BUFSEG_BUFSEG_Pos   3
NUC122.h (lib\inc):#define USBD_BUFSEG_BUFSEG_Msk   (0x3Ful << USBD_BUFSEG_BUFSEG_Pos)
NUC122.h (lib\inc):/* USBD MXPLD Bit Field Definitions */
NUC122.h (lib\inc):#define USBD_MXPLD_MXPLD_Pos    0
NUC122.h (lib\inc):#define USBD_MXPLD_MXPLD_Msk    (0x1FFul << USBD_MXPLD_MXPLD_Pos)
NUC122.h (lib\inc):#define USBD_CFG_CSTALL_Pos     9
NUC122.h (lib\inc):#define USBD_CFG_CSTALL_Msk     (1ul << USBD_CFG_CSTALL_Pos)
NUC122.h (lib\inc):#define USBD_CFG_DSQ_SYNC_Pos   7
NUC122.h (lib\inc):#define USBD_CFG_DSQ_SYNC_Msk   (1ul << USBD_CFG_DSQ_SYNC_Pos)
NUC122.h (lib\inc):#define USBD_CFG_STATE_Pos      5
NUC122.h (lib\inc):#define USBD_CFG_STATE_Msk      (3ul << USBD_CFG_STATE_Pos)
NUC122.h (lib\inc):#define USBD_CFG_ISOCH_Pos      4
NUC122.h (lib\inc):#define USBD_CFG_ISOCH_Msk      (1ul << USBD_CFG_ISOCH_Pos)
NUC122.h (lib\inc):#define USBD_CFG_EP_NUM_Pos     0
NUC122.h (lib\inc):#define USBD_CFG_EP_NUM_Msk     (0xFul << USBD_CFG_EP_NUM_Pos)
NUC122.h (lib\inc):/* USBD CFGP Bit Field Definitions */
NUC122.h (lib\inc):#define USBD_CFGP_SSTALL_Pos    1
NUC122.h (lib\inc):#define USBD_CFGP_SSTALL_Msk    (1ul << USBD_CFGP_SSTALL_Pos)
NUC122.h (lib\inc):#define USBD_CFGP_CLRRDY_Pos    0
NUC122.h (lib\inc):#define USBD_CFGP_CLRRDY_Msk    (1ul << USBD_CFGP_CLRRDY_Pos)
NUC122.h (lib\inc):#define USBD_DRVSE0_DRVSE0_Pos   0
NUC122.h (lib\inc):#define USBD_DRVSE0_DRVSE0_Msk   (1ul << USBD_DRVSE0_DRVSE0_Pos)
NUC122.h (lib\inc):/*----------------------------- PWM Controller -------------------------------*/
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):    __IO uint32_t  CP01:8;
NUC122.h (lib\inc):    __IO uint32_t  CP23:8;
NUC122.h (lib\inc):} PWM_PPR_T;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):} PWM_CSR_T;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):} PWM_PCR_T;
NUC122.h (lib\inc):typedef __IO uint32_t PWM_CNR_T;
NUC122.h (lib\inc):typedef __IO uint32_t PWM_CMR_T;
NUC122.h (lib\inc):typedef __I uint32_t PWM_PDR_T;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):    __IO uint32_t  PWMIE0:1;
NUC122.h (lib\inc):    __IO uint32_t  PWMIE1:1;
NUC122.h (lib\inc):    __IO uint32_t  PWMIE2:1;
NUC122.h (lib\inc):    __IO uint32_t  PWMIE3:1;
NUC122.h (lib\inc):} PWM_PIER_T;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):    __IO uint32_t  PWMIF0:1;
NUC122.h (lib\inc):    __IO uint32_t  PWMIF1:1;
NUC122.h (lib\inc):    __IO uint32_t  PWMIF2:1;
NUC122.h (lib\inc):    __IO uint32_t  PWMIF3:1;
NUC122.h (lib\inc):} PWM_PIIR_T;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):    __IO uint32_t  CAPCH0EN:1;
NUC122.h (lib\inc):    __IO uint32_t  CAPIF0:1;
NUC122.h (lib\inc):    __IO uint32_t  CAPCH1EN:1;
NUC122.h (lib\inc):    __IO uint32_t  CAPIF1:1;
NUC122.h (lib\inc):} PWM_CCR0_T;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):    __IO uint32_t  CAPCH2EN:1;
NUC122.h (lib\inc):    __IO uint32_t  CAPIF2:1;
NUC122.h (lib\inc):    __IO uint32_t  CAPCH3EN:1;
NUC122.h (lib\inc):    __IO uint32_t  CAPIF3:1;
NUC122.h (lib\inc):} PWM_CCR2_T;
NUC122.h (lib\inc):typedef __IO uint32_t PWM_CRLR_T;
NUC122.h (lib\inc):typedef __IO uint32_t PWM_CFLR_T;
NUC122.h (lib\inc):typedef __IO uint32_t PWM_CAPENR_T;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):    __IO uint32_t  PWM0:1;
NUC122.h (lib\inc):    __IO uint32_t  PWM1:1;
NUC122.h (lib\inc):    __IO uint32_t  PWM2:1;
NUC122.h (lib\inc):    __IO uint32_t  PWM3:1;
NUC122.h (lib\inc):} PWM_POE_T;
NUC122.h (lib\inc):typedef struct
NUC122.h (lib\inc):        __IO uint32_t u32PPR;
NUC122.h (lib\inc):            __IO uint32_t  CP01:8;
NUC122.h (lib\inc):            __IO uint32_t  CP23:8;
NUC122.h (lib\inc):        } PPR;
NUC122.h (lib\inc):        __IO uint32_t u32PCR;
NUC122.h (lib\inc):        } PCR;
NUC122.h (lib\inc):        __I  uint32_t u32PDR0;
NUC122.h (lib\inc):        __I  uint32_t PDR0;
NUC122.h (lib\inc):        __I  uint32_t u32PDR1;
NUC122.h (lib\inc):        __I  uint32_t PDR1;
NUC122.h (lib\inc):        __I  uint32_t u32PDR2;
NUC122.h (lib\inc):        __I  uint32_t PDR2;
NUC122.h (lib\inc):        __I  uint32_t u32PDR3;
NUC122.h (lib\inc):        __I  uint32_t PDR3;
NUC122.h (lib\inc):        __IO uint32_t u32PIER;
NUC122.h (lib\inc):            __IO uint32_t  PWMIE0:1;
NUC122.h (lib\inc):            __IO uint32_t  PWMIE1:1;
NUC122.h (lib\inc):            __IO uint32_t  PWMIE2:1;
NUC122.h (lib\inc):            __IO uint32_t  PWMIE3:1;
NUC122.h (lib\inc):        } PIER;
NUC122.h (lib\inc):        __IO uint32_t u32PIIR;
NUC122.h (lib\inc):            __IO uint32_t  PWMIF0:1;
NUC122.h (lib\inc):            __IO uint32_t  PWMIF1:1;
NUC122.h (lib\inc):            __IO uint32_t  PWMIF2:1;
NUC122.h (lib\inc):            __IO uint32_t  PWMIF3:1;
NUC122.h (lib\inc):        } PIIR;
NUC122.h (lib\inc):            __IO uint32_t  CAPCH0EN:1;
NUC122.h (lib\inc):            __IO uint32_t  CAPIF0:1;
NUC122.h (lib\inc):            __IO uint32_t  CAPCH1EN:1;
NUC122.h (lib\inc):            __IO uint32_t  CAPIF1:1;
NUC122.h (lib\inc):            __IO uint32_t  CAPCH2EN:1;
NUC122.h (lib\inc):            __IO uint32_t  CAPIF2:1;
NUC122.h (lib\inc):            __IO uint32_t  CAPCH3EN:1;
NUC122.h (lib\inc):            __IO uint32_t  CAPIF3:1;
NUC122.h (lib\inc):        __IO uint32_t u32CAPENR;
NUC122.h (lib\inc):        __IO uint32_t CAPENR;
NUC122.h (lib\inc):        __IO uint32_t u32POE;
NUC122.h (lib\inc):            __IO uint32_t  PWM0:1;
NUC122.h (lib\inc):            __IO uint32_t  PWM1:1;
NUC122.h (lib\inc):            __IO uint32_t  PWM2:1;
NUC122.h (lib\inc):            __IO uint32_t  PWM3:1;
NUC122.h (lib\inc):        } POE;
NUC122.h (lib\inc):} PWM_T;
NUC122.h (lib\inc):/* PWM PPR Bit Field Definitions */
NUC122.h (lib\inc):#define PWM_PPR_DZI23_Pos                       24
NUC122.h (lib\inc):#define PWM_PPR_DZI23_Msk                       (0xFFul << PWM_PPR_DZI23_Pos)
NUC122.h (lib\inc):#define PWM_PPR_DZI01_Pos                       16
NUC122.h (lib\inc):#define PWM_PPR_DZI01_Msk                       (0xFFul << PWM_PPR_DZI01_Pos)
NUC122.h (lib\inc):#define PWM_PPR_CP23_Pos                        8
NUC122.h (lib\inc):#define PWM_PPR_CP23_Msk                        (0xFFul << PWM_PPR_CP23_Pos)
NUC122.h (lib\inc):#define PWM_PPR_CP01_Pos                        0
NUC122.h (lib\inc):#define PWM_PPR_CP01_Msk                        (0xFFul << PWM_PPR_CP01_Pos)
NUC122.h (lib\inc):/* PWM CSR Bit Field Definitions */
NUC122.h (lib\inc):#define PWM_CSR_CSR3_Pos                        12
NUC122.h (lib\inc):#define PWM_CSR_CSR3_Msk                        (7ul << PWM_CSR_CSR3_Pos)
NUC122.h (lib\inc):#define PWM_CSR_CSR2_Pos                        8
NUC122.h (lib\inc):#define PWM_CSR_CSR2_Msk                        (7ul << PWM_CSR_CSR2_Pos)
NUC122.h (lib\inc):#define PWM_CSR_CSR1_Pos                        4
NUC122.h (lib\inc):#define PWM_CSR_CSR1_Msk                        (7ul << PWM_CSR_CSR1_Pos)
NUC122.h (lib\inc):#define PWM_CSR_CSR0_Pos                        0
NUC122.h (lib\inc):#define PWM_CSR_CSR0_Msk                        (7ul << PWM_CSR_CSR0_Pos)
NUC122.h (lib\inc):/* PWM PCR Bit Field Definitions */
NUC122.h (lib\inc):#define PWM_PCR_CH3MOD_Pos                      27
NUC122.h (lib\inc):#define PWM_PCR_CH3MOD_Msk                      (1ul << PWM_PCR_CH3MOD_Pos)
NUC122.h (lib\inc):#define PWM_PCR_CH3INV_Pos                      26
NUC122.h (lib\inc):#define PWM_PCR_CH3INV_Msk                      (1ul << PWM_PCR_CH3INV_Pos)
NUC122.h (lib\inc):#define PWM_PCR_CH3EN_Pos                       24
NUC122.h (lib\inc):#define PWM_PCR_CH3EN_Msk                       (1ul << PWM_PCR_CH3EN_Pos)
NUC122.h (lib\inc):#define PWM_PCR_CH2MOD_Pos                      19
NUC122.h (lib\inc):#define PWM_PCR_CH2MOD_Msk                      (1ul << PWM_PCR_CH2MOD_Pos)
NUC122.h (lib\inc):#define PWM_PCR_CH2INV_Pos                      18
NUC122.h (lib\inc):#define PWM_PCR_CH2INV_Msk                      (1ul << PWM_PCR_CH2INV_Pos)
NUC122.h (lib\inc):#define PWM_PCR_CH2EN_Pos                       16
NUC122.h (lib\inc):#define PWM_PCR_CH2EN_Msk                       (1ul << PWM_PCR_CH2EN_Pos)
NUC122.h (lib\inc):#define PWM_PCR_CH1MOD_Pos                      11
NUC122.h (lib\inc):#define PWM_PCR_CH1MOD_Msk                      (1ul << PWM_PCR_CH1MOD_Pos)
NUC122.h (lib\inc):#define PWM_PCR_CH1INV_Pos                      10
NUC122.h (lib\inc):#define PWM_PCR_CH1INV_Msk                      (1ul << PWM_PCR_CH1INV_Pos)
NUC122.h (lib\inc):#define PWM_PCR_CH1EN_Pos                       8
NUC122.h (lib\inc):#define PWM_PCR_CH1EN_Msk                       (1ul << PWM_PCR_CH1EN_Pos)
NUC122.h (lib\inc):#define PWM_PCR_DZEN23_Pos                      5
NUC122.h (lib\inc):#define PWM_PCR_DZEN23_Msk                      (1ul << PWM_PCR_DZEN23_Pos)
NUC122.h (lib\inc):#define PWM_PCR_DZEN01_Pos                      4
NUC122.h (lib\inc):#define PWM_PCR_DZEN01_Msk                      (1ul << PWM_PCR_DZEN01_Pos)
NUC122.h (lib\inc):#define PWM_PCR_CH0MOD_Pos                      3
NUC122.h (lib\inc):#define PWM_PCR_CH0MOD_Msk                      (1ul << PWM_PCR_CH0MOD_Pos)
NUC122.h (lib\inc):#define PWM_PCR_CH0INV_Pos                      2
NUC122.h (lib\inc):#define PWM_PCR_CH0INV_Msk                      (1ul << PWM_PCR_CH0INV_Pos)
NUC122.h (lib\inc):#define PWM_PCR_CH0EN_Pos                       0
NUC122.h (lib\inc):#define PWM_PCR_CH0EN_Msk                       (1ul << PWM_PCR_CH0EN_Pos)
NUC122.h (lib\inc):/* PWM CNR Bit Field Definitions */
NUC122.h (lib\inc):#define PWM_CNR_CNR_Pos                         0
NUC122.h (lib\inc):#define PWM_CNR_CNR_Msk                         (0xFFFFul << PWM_CNR_CNR_Pos)
NUC122.h (lib\inc):/* PWM CMR Bit Field Definitions */
NUC122.h (lib\inc):#define PWM_CMR_CMR_Pos                         0
NUC122.h (lib\inc):#define PWM_CMR_CMR_Msk                         (0xFFFFul << PWM_CMR_CMR_Pos)
NUC122.h (lib\inc):/* PWM PDR Bit Field Definitions */
NUC122.h (lib\inc):#define PWM_PDR_PDR_Pos                         0
NUC122.h (lib\inc):#define PWM_PDR_PDR_Msk                         (0xFFFFul << PWM_PDR_PDR_Pos)
NUC122.h (lib\inc):/* PWM PIER Bit Field Definitions */
NUC122.h (lib\inc):#define PWM_PIER_PWMIE3_Pos                     3
NUC122.h (lib\inc):#define PWM_PIER_PWMIE3_Msk                     (1ul << PWM_PIER_PWMIE3_Pos)
NUC122.h (lib\inc):#define PWM_PIER_PWMIE2_Pos                     2
NUC122.h (lib\inc):#define PWM_PIER_PWMIE2_Msk                     (1ul << PWM_PIER_PWMIE2_Pos)
NUC122.h (lib\inc):#define PWM_PIER_PWMIE1_Pos                     1
NUC122.h (lib\inc):#define PWM_PIER_PWMIE1_Msk                     (1ul << PWM_PIER_PWMIE1_Pos)
NUC122.h (lib\inc):#define PWM_PIER_PWMIE0_Pos                     0
NUC122.h (lib\inc):#define PWM_PIER_PWMIE0_Msk                     (1ul << PWM_PIER_PWMIE0_Pos)
NUC122.h (lib\inc):/* PWM PIIR Bit Field Definitions */
NUC122.h (lib\inc):#define PWM_PIIR_PWMIF3_Pos                     3
NUC122.h (lib\inc):#define PWM_PIIR_PWMIF3_Msk                     (1ul << PWM_PIIR_PWMIF3_Pos)
NUC122.h (lib\inc):#define PWM_PIIR_PWMIF2_Pos                     2
NUC122.h (lib\inc):#define PWM_PIIR_PWMIF2_Msk                     (1ul << PWM_PIIR_PWMIF2_Pos)
NUC122.h (lib\inc):#define PWM_PIIR_PWMIF1_Pos                     1
NUC122.h (lib\inc):#define PWM_PIIR_PWMIF1_Msk                     (1ul << PWM_PIIR_PWMIF1_Pos)
NUC122.h (lib\inc):#define PWM_PIIR_PWMIF0_Pos                     0
NUC122.h (lib\inc):#define PWM_PIIR_PWMIF0_Msk                     (1ul << PWM_PIIR_PWMIF0_Pos)
NUC122.h (lib\inc):/* PWM CCR0 Bit Field Definitions */
NUC122.h (lib\inc):#define PWM_CCR0_CFLRI1_Pos                     23
NUC122.h (lib\inc):#define PWM_CCR0_CFLRI1_Msk                     (1ul << PWM_CCR0_CFLRI1_Pos)
NUC122.h (lib\inc):#define PWM_CCR0_CRLRI1_Pos                     22
NUC122.h (lib\inc):#define PWM_CCR0_CRLRI1_Msk                     (1ul << PWM_CCR0_CRLRI1_Pos)
NUC122.h (lib\inc):#define PWM_CCR0_CAPIF1_Pos                     20
NUC122.h (lib\inc):#define PWM_CCR0_CAPIF1_Msk                     (1ul << PWM_CCR0_CAPIF1_Pos)
NUC122.h (lib\inc):#define PWM_CCR0_CAPCH1EN_Pos                   19
NUC122.h (lib\inc):#define PWM_CCR0_CAPCH1EN_Msk                   (1ul << PWM_CCR0_CAPCH1EN_Pos)
NUC122.h (lib\inc):#define PWM_CCR0_CFL_IE1_Pos                    18
NUC122.h (lib\inc):#define PWM_CCR0_CFL_IE1_Msk                    (1ul << PWM_CCR0_CFL_IE1_Pos)
NUC122.h (lib\inc):#define PWM_CCR0_CRL_IE1_Pos                    17
NUC122.h (lib\inc):#define PWM_CCR0_CRL_IE1_Msk                    (1ul << PWM_CCR0_CRL_IE1_Pos)
NUC122.h (lib\inc):#define PWM_CCR0_INV1_Pos                       16
NUC122.h (lib\inc):#define PWM_CCR0_INV1_Msk                       (1ul << PWM_CCR0_INV1_Pos)
NUC122.h (lib\inc):#define PWM_CCR0_CFLRI0_Pos                     7
NUC122.h (lib\inc):#define PWM_CCR0_CFLRI0_Msk                     (1ul << PWM_CCR0_CFLRI0_Pos)
NUC122.h (lib\inc):#define PWM_CCR0_CRLRI0_Pos                     6
NUC122.h (lib\inc):#define PWM_CCR0_CRLRI0_Msk                     (1ul << PWM_CCR0_CRLRI0_Pos)
NUC122.h (lib\inc):#define PWM_CCR0_CAPIF0_Pos                     4
NUC122.h (lib\inc):#define PWM_CCR0_CAPIF0_Msk                     (1ul << PWM_CCR0_CAPIF0_Pos)
NUC122.h (lib\inc):#define PWM_CCR0_CAPCH0EN_Pos                   3
NUC122.h (lib\inc):#define PWM_CCR0_CAPCH0EN_Msk                   (1ul << PWM_CCR0_CAPCH0EN_Pos)
NUC122.h (lib\inc):#define PWM_CCR0_CFL_IE0_Pos                    2
NUC122.h (lib\inc):#define PWM_CCR0_CFL_IE0_Msk                    (1ul << PWM_CCR0_CFL_IE0_Pos)
NUC122.h (lib\inc):#define PWM_CCR0_CRL_IE0_Pos                    1
NUC122.h (lib\inc):#define PWM_CCR0_CRL_IE0_Msk                    (1ul << PWM_CCR0_CRL_IE0_Pos)
NUC122.h (lib\inc):#define PWM_CCR0_INV0_Pos                       0
NUC122.h (lib\inc):#define PWM_CCR0_INV0_Msk                       (1ul << PWM_CCR0_INV0_Pos)
NUC122.h (lib\inc):/* PWM CCR2 Bit Field Definitions */
NUC122.h (lib\inc):#define PWM_CCR2_CFLRI3_Pos                     23
NUC122.h (lib\inc):#define PWM_CCR2_CFLRI3_Msk                     (1ul << PWM_CCR2_CFLRI3_Pos)
NUC122.h (lib\inc):#define PWM_CCR2_CRLRI3_Pos                     22
NUC122.h (lib\inc):#define PWM_CCR2_CRLRI3_Msk                     (1ul << PWM_CCR2_CRLRI3_Pos)
NUC122.h (lib\inc):#define PWM_CCR2_CAPIF3_Pos                     20
NUC122.h (lib\inc):#define PWM_CCR2_CAPIF3_Msk                     (1ul << PWM_CCR2_CAPIF3_Pos)
NUC122.h (lib\inc):#define PWM_CCR2_CAPCH3EN_Pos                   19
NUC122.h (lib\inc):#define PWM_CCR2_CAPCH3EN_Msk                   (1ul << PWM_CCR2_CAPCH3EN_Pos)
NUC122.h (lib\inc):#define PWM_CCR2_CFL_IE3_Pos                    18
NUC122.h (lib\inc):#define PWM_CCR2_CFL_IE3_Msk                    (1ul << PWM_CCR2_CFL_IE3_Pos)
NUC122.h (lib\inc):#define PWM_CCR2_CRL_IE3_Pos                    17
NUC122.h (lib\inc):#define PWM_CCR2_CRL_IE3_Msk                    (1ul << PWM_CCR2_CRL_IE3_Pos)
NUC122.h (lib\inc):#define PWM_CCR2_INV3_Pos                       16
NUC122.h (lib\inc):#define PWM_CCR2_INV3_Msk                       (1ul << PWM_CCR2_INV3_Pos)
NUC122.h (lib\inc):#define PWM_CCR2_CFLRI2_Pos                     7
NUC122.h (lib\inc):#define PWM_CCR2_CFLRI2_Msk                     (1ul << PWM_CCR2_CFLRI2_Pos)
NUC122.h (lib\inc):#define PWM_CCR2_CRLRI2_Pos                     6
NUC122.h (lib\inc):#define PWM_CCR2_CRLRI2_Msk                     (1ul << PWM_CCR2_CRLRI2_Pos)
NUC122.h (lib\inc):#define PWM_CCR2_CAPIF2_Pos                     4
NUC122.h (lib\inc):#define PWM_CCR2_CAPIF2_Msk                     (1ul << PWM_CCR2_CAPIF2_Pos)
NUC122.h (lib\inc):#define PWM_CCR2_CAPCH2EN_Pos                   3
NUC122.h (lib\inc):#define PWM_CCR2_CAPCH2EN_Msk                   (1ul << PWM_CCR2_CAPCH2EN_Pos)
NUC122.h (lib\inc):#define PWM_CCR2_CFL_IE2_Pos                    2
NUC122.h (lib\inc):#define PWM_CCR2_CFL_IE2_Msk                    (1ul << PWM_CCR2_CFL_IE2_Pos)
NUC122.h (lib\inc):#define PWM_CCR2_CRL_IE2_Pos                    1
NUC122.h (lib\inc):#define PWM_CCR2_CRL_IE2_Msk                    (1ul << PWM_CCR2_CRL_IE2_Pos)
NUC122.h (lib\inc):#define PWM_CCR2_INV2_Pos                       0
NUC122.h (lib\inc):#define PWM_CCR2_INV2_Msk                       (1ul << PWM_CCR2_INV2_Pos)
NUC122.h (lib\inc):/* PWM CRLR Bit Field Definitions */
NUC122.h (lib\inc):#define PWM_CRLR_CRLR_Pos                       0
NUC122.h (lib\inc):#define PWM_CRLR_CRLR_Msk                       (0xFFFFul << PWM_CRLR_CRLR_Pos)
NUC122.h (lib\inc):/* PWM CFLR Bit Field Definitions */
NUC122.h (lib\inc):#define PWM_CFLR_CFLR_Pos                       0
NUC122.h (lib\inc):#define PWM_CFLR_CFLR_Msk                       (0xFFFFul << PWM_CFLR_CFLR_Pos)
NUC122.h (lib\inc):/* PWM CAPENR Bit Field Definitions */
NUC122.h (lib\inc):#define PWM_CAPENR_CAPENR_Pos                   0
NUC122.h (lib\inc):#define PWM_CAPENR_CAPENR_Msk                   (0xFul << PWM_CAPENR_CAPENR_Pos)
NUC122.h (lib\inc):/* PWM POE Bit Field Definitions */
NUC122.h (lib\inc):#define PWM_POE_PWM3_Pos                        3
NUC122.h (lib\inc):#define PWM_POE_PWM3_Msk                        (1ul << PWM_POE_PWM3_Pos)
NUC122.h (lib\inc):#define PWM_POE_PWM2_Pos                        2
NUC122.h (lib\inc):#define PWM_POE_PWM2_Msk                        (1ul << PWM_POE_PWM2_Pos)
NUC122.h (lib\inc):#define PWM_POE_PWM1_Pos                        1
NUC122.h (lib\inc):#define PWM_POE_PWM1_Msk                        (1ul << PWM_POE_PWM1_Pos)
NUC122.h (lib\inc):#define PWM_POE_PWM0_Pos                        0
NUC122.h (lib\inc):#define PWM_POE_PWM0_Msk                        (1ul << PWM_POE_PWM0_Pos)
NUC122.h (lib\inc):/*                         Peripheral memory map                              */
NUC122.h (lib\inc):/* Peripheral and SRAM base address */
NUC122.h (lib\inc):#define APB1_BASE           ((     uint32_t)0x40000000)
NUC122.h (lib\inc):#define APB2_BASE           ((     uint32_t)0x40100000)
NUC122.h (lib\inc):/* Peripheral memory map */
NUC122.h (lib\inc):#define GPIO_BASE           (AHB_BASE        + 0x4000)
NUC122.h (lib\inc):#define GPIOA_BASE          (GPIO_BASE               )
NUC122.h (lib\inc):#define GPIOB_BASE          (GPIO_BASE       + 0x0040)
NUC122.h (lib\inc):#define GPIOC_BASE          (GPIO_BASE       + 0x0080)
NUC122.h (lib\inc):#define GPIOD_BASE          (GPIO_BASE       + 0x00C0)
NUC122.h (lib\inc):#define GPIO_DBNCECON_BASE  (GPIO_BASE       + 0x0180)
NUC122.h (lib\inc):#define UART0_BASE          (APB1_BASE      + 0x50000)
NUC122.h (lib\inc):#define UART1_BASE          (APB2_BASE      + 0x50000)
NUC122.h (lib\inc):#define TIMER0_BASE         (APB1_BASE      + 0x10000)
NUC122.h (lib\inc):#define TIMER1_BASE         (APB1_BASE      + 0x10020)
NUC122.h (lib\inc):#define TIMER2_BASE         (APB2_BASE      + 0x10000)
NUC122.h (lib\inc):#define TIMER3_BASE         (APB2_BASE      + 0x10020)
NUC122.h (lib\inc):#define WDT_BASE            (APB1_BASE      + 0x4000)
NUC122.h (lib\inc):#define SPI0_BASE           (APB1_BASE      + 0x30000)
NUC122.h (lib\inc):#define SPI1_BASE           (APB1_BASE      + 0x34000)
NUC122.h (lib\inc):#define I2C_BASE            (APB2_BASE      + 0x20000)
NUC122.h (lib\inc):#define RTC_BASE            (APB1_BASE      + 0x08000)
NUC122.h (lib\inc):#define PS2_BASE            (APB2_BASE      + 0x00000)
NUC122.h (lib\inc):#define USBD_BASE           (APB1_BASE      + 0x60000)
NUC122.h (lib\inc):#define PWMA_BASE           (APB1_BASE      + 0x40000)
NUC122.h (lib\inc):/*                         Peripheral declaration                             */
NUC122.h (lib\inc):#define GPIOA               ((GPIO_T *) GPIOA_BASE)
NUC122.h (lib\inc):#define GPIOB               ((GPIO_T *) GPIOB_BASE)
NUC122.h (lib\inc):#define GPIOC               ((GPIO_T *) GPIOC_BASE)
NUC122.h (lib\inc):#define GPIOD               ((GPIO_T *) GPIOD_BASE)
NUC122.h (lib\inc):#define GPIO_DBNCECON       ((GPIO_DBNCECON_T *) GPIO_DBNCECON_BASE)
NUC122.h (lib\inc):#define GPIO_BIT_ADDR_BASE  (GPIO_BASE + 0x200)
NUC122.h (lib\inc):#define SPI0                ((SPI_T *) SPI0_BASE)
NUC122.h (lib\inc):#define SPI1                ((SPI_T *) SPI1_BASE)
NUC122.h (lib\inc):#define PS2                 ((PS2_T *) PS2_BASE)
NUC122.h (lib\inc):#define PWMA                ((PWM_T *) PWMA_BASE)
NUC122.h (lib\inc):#define REGCOPY(dest, src)  *((uint32_t *)&(dest)) = *((uint32_t *)&(src))
NUC122.h (lib\inc):typedef volatile unsigned char  vu8;
NUC122.h (lib\inc):typedef volatile unsigned long  vu32;
NUC122.h (lib\inc):typedef volatile unsigned short vu16;
NUC122.h (lib\inc):#define outpw(port,value)   *((volatile unsigned int *)(port))=value
NUC122.h (lib\inc):#define inpw(port)          (*((volatile unsigned int *)(port)))
NUC122.h (lib\inc):#define outpb(port,value)   *((volatile unsigned char *)(port))=value
NUC122.h (lib\inc):#define inpb(port)          (*((volatile unsigned char *)(port)))
NUC122.h (lib\inc):#define outps(port,value)   *((volatile unsigned short *)(port))=value
NUC122.h (lib\inc):#define inps(port)          (*((volatile unsigned short *)(port)))
NUC122.h (lib\inc):#define outp32(port,value)  *((volatile unsigned int *)(port))=value
NUC122.h (lib\inc):#define inp32(port)         (*((volatile unsigned int *)(port)))
NUC122.h (lib\inc):#define outp8(port,value)   *((volatile unsigned char *)(port))=value
NUC122.h (lib\inc):#define inp8(port)          (*((volatile unsigned char *)(port)))
NUC122.h (lib\inc):#define outp16(port,value)  *((volatile unsigned short *)(port))=value
NUC122.h (lib\inc):#define inp16(port)         (*((volatile unsigned short *)(port)))
startup_NUC122.s (lib):;/* Copyright(c) 2009 Nuvoton Technology Corp. All rights reserved.                                         */
startup_NUC122.s (lib):    MODULE  ?cstartup
startup_NUC122.s (lib):    EXTERN  __iar_program_start
startup_NUC122.s (lib):    PUBLIC  __vector_table
startup_NUC122.s (lib):    DCD     __iar_program_start
startup_NUC122.s (lib):    DCD     PendSV_Handler
startup_NUC122.s (lib):    ; External Interrupts
startup_NUC122.s (lib):    DCD     BOD_IRQHandler              ; Brownout low voltage detected interrupt                 
startup_NUC122.s (lib):    DCD     WDT_IRQHandler              ; Watch Dog Timer interrupt                              
startup_NUC122.s (lib):    DCD     EINT0_IRQHandler            ; External signal interrupt from PB.14 pin                
startup_NUC122.s (lib):    DCD     EINT1_IRQHandler            ; External signal interrupt from PB.15 pin                
startup_NUC122.s (lib):    DCD     GPAB_IRQHandler             ; External signal interrupt from PA[15:0] / PB[13:0]     
startup_NUC122.s (lib):    DCD     GPCD_IRQHandler             ; External interrupt from PC[15:0]/PD[15:0]     
startup_NUC122.s (lib):    DCD     PWMA_IRQHandler             ; PWM0/PWM1/PWM2/PWM3 interrupt                                 
startup_NUC122.s (lib):    DCD     TMR0_IRQHandler             ; Timer 0 interrupt                                      
startup_NUC122.s (lib):    DCD     TMR1_IRQHandler             ; Timer 1 interrupt                                      
startup_NUC122.s (lib):    DCD     TMR2_IRQHandler             ; Timer 2 interrupt                                      
startup_NUC122.s (lib):    DCD     TMR3_IRQHandler             ; Timer 3 interrupt                                      
startup_NUC122.s (lib):    DCD     UART0_IRQHandler            ; UART0 interrupt                                        
startup_NUC122.s (lib):    DCD     UART1_IRQHandler            ; UART1 interrupt                                        
startup_NUC122.s (lib):    DCD     SPI0_IRQHandler             ; SPI0 interrupt                                         
startup_NUC122.s (lib):    DCD     SPI1_IRQHandler             ; SPI1 interrupt                                         
startup_NUC122.s (lib):    DCD     I2C_IRQHandler              ; I2C interrupt                                         
startup_NUC122.s (lib):    DCD     USBD_IRQHandler             ; USB FS Device interrupt                                
startup_NUC122.s (lib):    DCD     PS2_IRQHandler              ; PS2 interrupt                                          
startup_NUC122.s (lib):    DCD     PWRWU_IRQHandler            ; Clock controller interrupt for chip wake up from power-
startup_NUC122.s (lib):    DCD     RTC_IRQHandler              ; Real time clock interrupt                              
startup_NUC122.s (lib):;; Default interrupt handlers.
startup_NUC122.s (lib):    PUBWEAK Reset_Handler   
startup_NUC122.s (lib):        ; Init POR
startup_NUC122.s (lib):        LDR      R0, =__iar_program_start
startup_NUC122.s (lib):    PUBWEAK NMI_Handler       
startup_NUC122.s (lib):    PUBWEAK SVC_Handler       
startup_NUC122.s (lib):    PUBWEAK PendSV_Handler    
startup_NUC122.s (lib):    PUBWEAK SysTick_Handler   
startup_NUC122.s (lib):    PUBWEAK BOD_IRQHandler   
startup_NUC122.s (lib):    PUBWEAK WDT_IRQHandler   
startup_NUC122.s (lib):    PUBWEAK EINT0_IRQHandler 
startup_NUC122.s (lib):    PUBWEAK EINT1_IRQHandler 
startup_NUC122.s (lib):    PUBWEAK GPAB_IRQHandler  
startup_NUC122.s (lib):    PUBWEAK GPCD_IRQHandler
startup_NUC122.s (lib):    PUBWEAK PWMA_IRQHandler  
startup_NUC122.s (lib):    PUBWEAK TMR0_IRQHandler 
startup_NUC122.s (lib):    PUBWEAK TMR1_IRQHandler 
startup_NUC122.s (lib):    PUBWEAK TMR2_IRQHandler 
startup_NUC122.s (lib):    PUBWEAK TMR3_IRQHandler 
startup_NUC122.s (lib):    PUBWEAK UART0_IRQHandler
startup_NUC122.s (lib):    PUBWEAK UART1_IRQHandler
startup_NUC122.s (lib):    PUBWEAK SPI0_IRQHandler 
startup_NUC122.s (lib):    PUBWEAK SPI1_IRQHandler 
startup_NUC122.s (lib):    PUBWEAK I2C_IRQHandler 
startup_NUC122.s (lib):    PUBWEAK USBD_IRQHandler   
startup_NUC122.s (lib):    PUBWEAK PS2_IRQHandler   
startup_NUC122.s (lib):    PUBWEAK PWRWU_IRQHandler  
startup_NUC122.s (lib):    PUBWEAK RTC_IRQHandler  
startup_NUC122.s (lib):                LDR    R0, [R13, #24]        ; Get previous PC
startup_NUC122.s (lib):                LDR    R2, =0xBEAB           ; The sepcial BKPT instruction
startup_NUC122.s (lib):                CMP    R1, R2                ; Test if the instruction at previous PC is BKPT
startup_NUC122.s (lib):                BNE    HardFault_Handler_Ret ; Not BKPT
startup_NUC122.s (lib):                ADDS   R0, #4                ; Skip BKPT and next line
startup_NUC122.s (lib):                STR    R0, [R13, #24]        ; Save previous PC
startup_NUC122.s (lib):PendSV_Handler    
startup_NUC122.s (lib):GPAB_IRQHandler  
startup_NUC122.s (lib):GPCD_IRQHandler 
startup_NUC122.s (lib):PWMA_IRQHandler  
startup_NUC122.s (lib):SPI0_IRQHandler  
startup_NUC122.s (lib):SPI1_IRQHandler  
startup_NUC122.s (lib):PS2_IRQHandler   
startup_NUC122.s (lib):PWRWU_IRQHandler
startup_NUC122.s (lib):; int SH_DoCommand(int n32In_R0, int n32In_R1, int *pn32Out_R0);
startup_NUC122.s (lib):; Input
startup_NUC122.s (lib):; Output
startup_NUC122.s (lib):;	R2,*pn32Out_R0: semihost register 0
startup_NUC122.s (lib):                EXPORT SH_DoCommand
startup_NUC122.s (lib):                BKPT   0xAB                  ; Wait ICE or HardFault
startup_NUC122.s (lib):                                     ; ICE will step over BKPT directly
startup_NUC122.s (lib):                                     ; HardFault will step BKPT and the next line
startup_NUC122.s (lib):SH_HardFault                         ; Captured by HardFault
startup_NUC122.s (lib):SH_ICE                               ; Captured by ICE
startup_NUC122.s (lib):                CMP    R2, #0
startup_NUC122.s (lib):                STR    R0, [R2]              ; Save the return value to *pn32Out_R0
SysInfra.h (lib\inc):/* Copyright (c) Nuvoton Technology Corp. All rights reserved.                                             */
SysInfra.h (lib\inc):#ifdef __cplusplus
SysInfra.h (lib\inc):/* Macro, type and constant definitions                                                                    */
SysInfra.h (lib\inc):/* Define an error code composed of error bit, module ID, and error ID. */
SysInfra.h (lib\inc):/* Define a module version composed of major number, minor number, and build number. */
SysInfra.h (lib\inc):/* Extract module ID part of this error code. */
SysInfra.h (lib\inc):/* Extract error ID part of this error code. */
SysInfra.h (lib\inc)://E_SYSINFRA_NULL_POINTER               A NULL pointer is passed as an argument
SysInfra.h (lib\inc):#define E_SYSINFRA_NULL_POINTER     _SYSINFRA_ERRCODE(TRUE, MODULE_ID_SYSINFRA, 1)
SysInfra.h (lib\inc):#ifdef __cplusplus
system_NUC122.c (lib\src):/* Copyright(c) 2009 Nuvoton Technology Corp. All rights reserved.                                         */
system_NUC122.c (lib\src):uint32_t CyclesPerUs      = (__HSI / 1000000); /* Cycles per micro second */
system_NUC122.c (lib\src):  This function is used to update the variable SystemCoreClock 
system_NUC122.c (lib\src):void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
system_NUC122.c (lib\src):        /* Use PLL */
system_NUC122.c (lib\src):        u32Shift = SYSCLK->PLLCON.OUT_DV;   /* OUT_DV :DEF: {1, 2, 2, 4} */
system_NUC122.c (lib\src):        u32CoreFreq = ((SYSCLK->PLLCON.PLL_SRC)?__IRC22M:__XTAL) * (SYSCLK->PLLCON.FB_DV+2) / (SYSCLK->PLLCON.IN_DV+2) >> u32Shift;
system_NUC122.c (lib\src):    CyclesPerUs = (SystemCoreClock + 500000) / 1000000;
system_NUC122.c (lib\src):/* Parameters:                                                                                             */
system_NUC122.c (lib\src):/* Description:                                                                                            */
system_NUC122.h (lib\inc):/* Copyright(c) 2009 Nuvoton Technology Corp. All rights reserved.                                         */
system_NUC122.h (lib\inc):#ifdef __cplusplus
system_NUC122.h (lib\inc):/* Debug Port Definition                                                                                   */
system_NUC122.h (lib\inc)://#define DEBUG_ENABLE_SEMIHOST   /* To enable semihosted. !!!The SEMIHOSTED of startup_NUC122.s must be {TRUE} */
system_NUC122.h (lib\inc):#define DEBUG_PORT   1          /* 0: Use UART0, 1: Use UART1 */
system_NUC122.h (lib\inc):extern uint32_t CyclesPerUs;        /* Cycles per micro second */
system_NUC122.h (lib\inc): * @param  none
system_NUC122.h (lib\inc): * @brief  Setup the microcontroller system
system_NUC122.h (lib\inc): *         Initialise GPIO directions and values
system_NUC122.h (lib\inc): * Update SystemCoreClock variable
system_NUC122.h (lib\inc): * @param  none
system_NUC122.h (lib\inc): * @brief  Updates the SystemCoreClock with current core Clock 
system_NUC122.h (lib\inc): *         retrieved from cpu registers.
system_NUC122.h (lib\inc):extern void SystemCoreClockUpdate (void);
system_NUC122.h (lib\inc):#ifdef __cplusplus
